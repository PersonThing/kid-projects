{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Enemy.svelte",
    "..\\..\\Game.svelte",
    "..\\..\\GameOver.svelte",
    "..\\..\\HealthBar.svelte",
    "..\\..\\Instructions.svelte",
    "..\\..\\Player.svelte",
    "..\\..\\Status.svelte",
    "..\\..\\Viewport.svelte",
    "..\\..\\ArtMaker.svelte",
    "..\\..\\LevelBuilder.svelte",
    "..\\..\\FieldGraphicPicker.svelte"
  ],
  "sourcesContent": [
    "<ul class=\"nav\">\n\t<li class=\"nav-item\">\n\t\t<a class=\"nav-link\" href=\"#/bub-the-bobcat\">Bub the Bobcat</a>\n\t</li>\n\t<li class=\"nav-item\">\n\t\t<a class=\"nav-link\" href=\"#/level-builder\">Level Builder (WIP)</a>\n\t</li>\n</ul>\n\n<main>\n\t<Router {routes} />\n</main>\n\n<script>\n\t// svelte-spa-router for hash routing since this is just going to be hosted on github pages\n\timport Router from 'svelte-spa-router'\n\timport LevelBuilder from './pages/LevelBuilder/Index.svelte'\n\timport BubTheBobcat from './pages/BubTheBobcat/Index.svelte'\n\timport NotFound from './pages/NotFound.svelte'\n\n\tconst routes = {\n\t\t'/level-builder/:tab?': LevelBuilder,\n\t\t'/bub-the-bobcat': BubTheBobcat,\n\t\t'*': NotFound,\n\t}\n</script>\n\n<style>\n\tmain {\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>\n",
    "<div class=\"enemy\" style=\"left: {x}px; bottom: {y}px;\">\r\n\t<HealthBar {health} {maxHealth} />\r\n\t<svg\r\n\t\tclass=\"graphic\"\r\n\t\tstyle=\"width: {width}px; height: {height}px; transform: scaleX({direction}) rotate({-4 + (vy > 0 ? vy * 3 : vy * 1.5)}deg); opacity: {health <= 0 ? 0.2 : 1.0}\"\r\n\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\tviewBox=\"0 10 1024 749\"\r\n\t\tversion=\"1.1\"\r\n\t\txml:space=\"preserve\">\r\n\t\t<path d={path1} fill={bodyColor} />\r\n\t\t<path d={path2} fill={eyeColor} />\r\n\t</svg>\r\n</div>\r\n\r\n<script>\r\n\timport HealthBar from './HealthBar.svelte'\r\n\texport let vx = 0\r\n\texport let vy = 0\r\n\texport let x = 0\r\n\texport let y = 0\r\n\texport let width = 75\r\n\texport let height = 50\r\n\texport let isBoss = false\r\n\texport let health = 100\r\n\texport let maxHealth = 100\r\n\texport let gettingHit = false\r\n\tlet direction = 1\r\n\t$: if (vx != 0) direction = vx > 0 ? 1 : -1\r\n\t$: bodyColor = health <= 0 ? '#333333' : gettingHit ? '#ffffff' : isBoss ? '#000' : '#79cf00'\r\n\t$: eyeColor = health <= 0 ? '#000000' : gettingHit ? '#0000ff' : isBoss ? 'red' : '#cf7900'\r\n\tconst path1 = `M560,128H528a15.99954,15.99954,0,0,0-16,16v80H480V176a15.99954,15.99954,0,0,0-16-16H416V96h48a16.00079,16.00079,0,0,0,16-16V48a15.99954,15.99954,0,0,0-16-16H432a15.99954,15.99954,0,0,0-16,16V64H368a15.99954,15.99954,0,0,0-16,16v48H224V80a15.99954,15.99954,0,0,0-16-16H160V48a15.99954,15.99954,0,0,0-16-16H112A15.99954,15.99954,0,0,0,96,48V80a16.00079,16.00079,0,0,0,16,16h48v64H112a15.99954,15.99954,0,0,0-16,16v48H64V144a15.99954,15.99954,0,0,0-16-16H16A15.99954,15.99954,0,0,0,0,144V272a16.00079,16.00079,0,0,0,16,16H64v80a16.00079,16.00079,0,0,0,16,16h48v80a16.00079,16.00079,0,0,0,16,16h96a16.00079,16.00079,0,0,0,16-16V432a15.99954,15.99954,0,0,0-16-16H192V384H384v32H336a15.99954,15.99954,0,0,0-16,16v32a16.00079,16.00079,0,0,0,16,16h96a16.00079,16.00079,0,0,0,16-16V384h48a16.00079,16.00079,0,0,0,16-16V288h48a16.00079,16.00079,0,0,0,16-16V144A15.99954,15.99954,0,0,0,560,128ZM224,320H160V224h64Zm192,0H352V224h64Z`\r\n\tconst path2 = `M160,320h64V224H160Zm192-96v96h64V224Z`\r\n</script>\r\n\r\n<style>\r\n\t.enemy {\r\n\t\tposition: absolute;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.graphic {\r\n\t\tmargin-top: 10px;\r\n\t\tposition: relative;\r\n\t}\r\n</style>\r\n",
    "<svelte:window on:keydown={onKeyDown} on:keyup={onKeyUp} />\r\n\r\n<div class=\"game-window\" bind:this={mainEl}>\r\n\t{#if gameOver}\r\n\t\t<GameOver {score} />\r\n\t{/if}\r\n\t{#if level != null && player != null}\r\n\t\t<Viewport {...viewport} backgroundColor={level.backgroundColor}>\r\n\t\t\t<Level {blocks} width={levelWidth} height={levelHeight} />\r\n\t\t\t{#each enemies as enemy}\r\n\t\t\t\t<Enemy {...enemy} />\r\n\t\t\t{/each}\r\n\t\t\t<Player {...player} />\r\n\t\t</Viewport>\r\n\t{/if}\r\n\t<Status {level} {score} />\r\n\t<Instructions />\r\n</div>\r\n\r\n<script>\r\n\timport { onMount, onDestroy } from 'svelte'\r\n\timport Status from './Status.svelte'\r\n\timport Level from './Level.svelte'\r\n\timport Instructions from './Instructions.svelte'\r\n\timport Viewport from './Viewport.svelte'\r\n\timport Player from './Player.svelte'\r\n\timport Enemy from './Enemy.svelte'\r\n\timport HealthBar from './HealthBar.svelte'\r\n\timport GameOver from './GameOver.svelte'\r\n\timport { levelToBlocks } from './blocks'\r\n\timport { doObjectsIntersect, isAAboveB } from './spatial-functions'\r\n\timport { BossEnemy, SimpleEnemy } from './enemies'\r\n\r\n\texport let level = null\r\n\tconst blockSize = 25\r\n\tlet blocks\r\n\tlet levelWidth = 0\r\n\tlet levelHeight = 0\r\n\r\n\tlet score = 0\r\n\r\n\tlet mainEl\r\n\tlet jumpVelocity = 15\r\n\tlet player\r\n\tlet enemies\r\n\tlet gameOver = false\r\n\r\n\tlet gameAlive = true\r\n\tlet lastRequestedFrame = null\r\n\r\n\tlet visibleBlocks\r\n\tlet viewport = {\r\n\t\twidth: window.innerWidth,\r\n\t\theight: 900,\r\n\t}\r\n\r\n\tonMount(() => {\r\n\t\tblocks = levelToBlocks(level, blockSize)\r\n\t\tlevelWidth = level.data.length * blockSize\r\n\t\tlevelHeight = Math.max(...blocks.map(b => b.y + b.height))\r\n\t\tstart()\r\n\t})\r\n\r\n\tonDestroy(() => {\r\n\t\tgameAlive = false\r\n\t\twindow.cancelAnimationFrame(lastRequestedFrame)\r\n\t})\r\n\r\n\tlet rightBound\r\n\tfunction start() {\r\n\t\tscore = 0\r\n\t\tplayer = {\r\n\t\t\twidth: 85,\r\n\t\t\theight: 75,\r\n\t\t\tx: blocks[0].x,\r\n\t\t\ty: blocks[0].y + blocks[0].height + 100,\r\n\t\t\tvx: 0,\r\n\t\t\tvy: 0,\r\n\t\t\tspinning: false,\r\n\t\t\thealth: 100,\r\n\t\t\tmaxHealth: 100,\r\n\t\t\ttvx: 7,\r\n\t\t\tfallDamageMultiplier: 10,\r\n\t\t\tdps: 120,\r\n\t\t\ttick() {\r\n\t\t\t\tconsole.log('i am the player in a frame')\r\n\t\t\t},\r\n\t\t}\r\n\t\tenemies = []\r\n\t\tgameOver = false\r\n\r\n\t\t// only start game loop if it's not already going\r\n\t\tif (lastRequestedFrame == null) gameLoop()\r\n\t}\r\n\r\n\tfunction gameLoop() {\r\n\t\tif (!gameOver) {\r\n\t\t\t// visibleBlocks = blocks.filter(b => doObjectsIntersect(viewport, b))\r\n\t\t\tplayer = applyGravityAndVelocity(player, true)\r\n\r\n\t\t\trightBound = blockSize * level.length\r\n\t\t\tconst halfViewportWidth = viewport.width / 2\r\n\t\t\tconst halfViewportHeight = viewport.height / 2\r\n\r\n\t\t\tviewport.x =\r\n\t\t\t\t// player is at beginning of level\r\n\t\t\t\tplayer.x < halfViewportWidth\r\n\t\t\t\t\t? // viewport all the way to the left\r\n\t\t\t\t\t  0\r\n\t\t\t\t\t: // player is at end of level\r\n\t\t\t\t\tplayer.x > rightBound - halfViewportWidth\r\n\t\t\t\t\t? // viewport all the way to the right\r\n\t\t\t\t\t  rightBound - viewport.width\r\n\t\t\t\t\t: // player is in middle of level, viewport centered on player\r\n\t\t\t\t\t  player.x - halfViewportWidth\r\n\r\n\t\t\tviewport.y =\r\n\t\t\t\t// player is near bottom of screen\r\n\t\t\t\tplayer.y < halfViewportHeight\r\n\t\t\t\t\t? // viewport all the way to bottom\r\n\t\t\t\t\t  0\r\n\t\t\t\t\t: // player above half viewport height, center on player\r\n\t\t\t\t\t  player.y - halfViewportHeight\r\n\r\n\t\t\t// todo: levels should add mobs, not auto spawn\r\n\t\t\tif (!enemies.some(e => e.health > 0)) {\r\n\t\t\t\tif (enemies.length < 5) {\r\n\t\t\t\t\tenemies = enemies.concat([1, 2, 3, 4, 5].map(x => new SimpleEnemy(player.x + 200 * x, player.y + 200)))\r\n\t\t\t\t} else {\r\n\t\t\t\t\tenemies = [new BossEnemy(player.x + 200, player.y + 200)]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// for every live enemy intersecting the player, one or the other should take damage\r\n\t\t\tfor (let i = 0; i < enemies.length; i++) {\r\n\t\t\t\tif (enemies[i].alive) {\r\n\t\t\t\t\tenemies[i] = applyGravityAndVelocity(enemies[i])\r\n\t\t\t\t\tenemies[i].tick(player)\r\n\t\t\t\t\tif (doObjectsIntersect(player, enemies[i])) {\r\n\t\t\t\t\t\tif (player.spinning) {\r\n\t\t\t\t\t\t\tenemies[i].gettingHit = true\r\n\t\t\t\t\t\t\tenemies[i].health -= player.dps / 60 // damage per frame\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tplayer.health -= enemies[i].dps / 60 // damage per frame\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (enemies[i].health <= 0) {\r\n\t\t\t\t\t\tenemies[i].alive = false\r\n\t\t\t\t\t\tenemies[i].onDeath()\r\n\t\t\t\t\t\tscore += enemies[i].score\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// game is over if player dies\r\n\t\t\tif (player.health <= 0) gameOver = true\r\n\t\t}\r\n\r\n\t\tif (gameAlive) lastRequestedFrame = window.requestAnimationFrame(gameLoop)\r\n\t}\r\n\r\n\tfunction applyGravityAndVelocity(sprite, isPlayerControlled = false) {\r\n\t\tconst surfacesBelowSprite = blocks.filter(b => b.interactive && isAAboveB(sprite, b)).map(b => b.y + b.height)\r\n\t\tconst surfaceY = surfacesBelowSprite.length > 0 ? Math.max(...surfacesBelowSprite) : -500 // some number off screen\r\n\r\n\t\tsprite.y += sprite.vy\r\n\t\tsprite.grounded = sprite.y <= surfaceY\r\n\r\n\t\t// gravity affects all sprites\r\n\t\tif (sprite.grounded) {\r\n\t\t\t// we're grounded - take damage if we were previously falling\r\n\t\t\tif (sprite.vy < 0) {\r\n\t\t\t\tsprite.health += sprite.vy / sprite.fallDamageMultiplier\r\n\t\t\t\tsprite.vy = 0\r\n\t\t\t}\r\n\r\n\t\t\t// make sure we're exactly on the ground\r\n\t\t\tsprite.y = surfaceY\r\n\t\t} else if (sprite.y < -200) {\r\n\t\t\t// we fell under the map, die\r\n\t\t\tsprite.health = 0\r\n\t\t} else {\r\n\t\t\t// we're in the air, accelerate downward\r\n\t\t\tsprite.vy--\r\n\t\t}\r\n\r\n\t\t// x velocity\r\n\t\tif (sprite.vx != 0) {\r\n\t\t\tif (sprite.vx > 0) {\r\n\t\t\t\tconst targetX = sprite.x + sprite.vx\r\n\t\t\t\tsprite.x = targetX > rightBound ? rightBound : targetX\r\n\t\t\t} else {\r\n\t\t\t\tconst leftBound = 0\r\n\t\t\t\tconst targetX = sprite.x + sprite.vx\r\n\t\t\t\tsprite.x = targetX < leftBound ? leftBound : targetX\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn sprite\r\n\t}\r\n\r\n\tfunction onKeyDown(e) {\r\n\t\tif (gameOver) return\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'ArrowLeft':\r\n\t\t\t\tplayer.vx = -player.tvx\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ArrowRight':\r\n\t\t\t\tplayer.vx = player.tvx\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Space':\r\n\t\t\t\tif (player.grounded) player.vy = jumpVelocity\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyR':\r\n\t\t\t\tplayer.spinning = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyQ':\r\n\t\t\t\tplayer.health = player.maxHealth\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onKeyUp(e) {\r\n\t\tif (gameOver) {\r\n\t\t\tstart()\r\n\t\t\treturn\r\n\t\t}\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'ArrowLeft':\r\n\t\t\t\tplayer.vx = 0\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ArrowRight':\r\n\t\t\t\tplayer.vx = 0\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Space':\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyR':\r\n\t\t\t\tplayer.spinning = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Enter':\r\n\t\t\tcase 'NumpadEnter':\r\n\t\t\t\tstart()\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(e.code)\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.game-window {\r\n\t\twidth: 100%;\r\n\t\theight: 90vh;\r\n\t\tmin-height: 600px;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\toverflow: hidden;\r\n\t\tposition: relative;\r\n\t}\r\n</style>\r\n",
    "<div class=\"game-over\">\r\n\t<h1>Bub is dead now. You really let him down.</h1>\r\n\t<h1>Final score: {score}</h1>\r\n\t<p>Press any key to restart.</p>\r\n</div>\r\n\r\n<script>\r\n\texport let score = 0\r\n</script>\r\n\r\n<style>\r\n\t.game-over {\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground: rgba(0, 0, 0, 0.5);\r\n\t\ttext-align: center;\r\n\t\tz-index: 10;\r\n\t\tpadding-top: 150px;\r\n\t}\r\n\r\n\th1 {\r\n\t\tmargin-top: 25x;\r\n\t\tcolor: #fff;\r\n\t\tfont-size: 50px;\r\n\t\tfont-weight: 100;\r\n\t}\r\n\r\n\tp {\r\n\t\tcolor: #eee;\r\n\t}\r\n</style>\r\n",
    "<!-- Josh demands a healing animation -->\r\n\r\n<div class=\"health-bar\">\r\n\t<div class=\"filled\" style=\"width: {displayPercent}%; background-color: {color}\" />\r\n\t<div class=\"text\">{displayHealth} - {displayPercent > 0 ? `${displayPercent}%` : 'I am dead.'}</div>\r\n</div>\r\n\r\n<script>\r\n\texport let percent = 100\r\n\texport let health = 100\r\n\texport let maxHealth = 100\r\n\r\n\t$: displayHealth = health > 0 ? Math.round(health) : 0\r\n\t$: percent = Math.round((health / maxHealth) * 100, 2)\r\n\t$: displayPercent = percent > 0 ? percent : 0\r\n\t$: color = percent > 75 ? 'rgba(24, 197, 33, 0.5)' : percent > 25 ? 'rgba(245, 189, 36, 0.5)' : 'rgba(223, 22, 22, 0.5)'\r\n</script>\r\n\r\n<style>\r\n\t.health-bar {\r\n\t\theight: 18px;\r\n\t\tbackground: rgba(0, 0, 0, 0.5);\r\n\t\tposition: relative;\r\n\t\tborder-radius: 5px;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.filled {\r\n\t\theight: 100%;\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t}\r\n\r\n\t.text {\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\ttext-align: center;\r\n\t\tcolor: #ccc;\r\n\t\tfont-size: 12px;\r\n\t}\r\n</style>\r\n",
    "<div class=\"instructions\">\r\n\t<table>\r\n\t\t{#each keyBinds as bind}\r\n\t\t\t<tr>\r\n\t\t\t\t<td>{bind.key}</td>\r\n\t\t\t\t<td>= {bind.action}</td>\r\n\t\t\t</tr>\r\n\t\t{/each}\r\n\t</table>\r\n</div>\r\n\r\n<script>\r\n\tconst keyBinds = [\r\n\t\t{\r\n\t\t\tkey: 'Left + Right Arrow',\r\n\t\t\taction: 'Move',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Space',\r\n\t\t\taction: 'Jump',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'R',\r\n\t\t\taction: 'Spin Attack / Shield',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Q',\r\n\t\t\taction: 'Heal',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Enter',\r\n\t\t\taction: 'Restart',\r\n\t\t},\r\n\t]\r\n</script>\r\n\r\n<style>\r\n\t.instructions {\r\n\t\tpadding: 10px;\r\n\t}\r\n\r\n\ttable td {\r\n\t\tfont-size: 12px;\r\n\t}\r\n\r\n\ttable tr td:first-child {\r\n\t\ttext-align: right;\r\n\t}\r\n\ttable tr td:last-child {\r\n\t\ttext-align: left;\r\n\t}\r\n</style>\r\n",
    "<div class=\"player\" style=\"left: {x}px; bottom: {y - 5}px;\">\r\n\t<HealthBar {health} {maxHealth} />\r\n\t<img\r\n\t\tclass=\"graphic\"\r\n\t\tsrc=\"https://i.imgur.com/g1jV9bN.png\"\r\n\t\talt=\"Bub\"\r\n\t\tstyle=\"width: {width}px; height: {height}px; transform: scaleX({direction}) rotate({rotate}deg);\" />\r\n</div>\r\n\r\n<script>\r\n\timport HealthBar from './HealthBar.svelte'\r\n\texport let vx = 0\r\n\texport let vy = 0\r\n\texport let y = 0\r\n\texport let x = 0\r\n\texport let width = 150\r\n\texport let height = 100\r\n\texport let health = 100\r\n\texport let maxHealth = 100\r\n\texport let spinning = false\r\n\r\n\tlet direction = 1\r\n\t$: if (vx != 0) direction = vx > 0 ? 1 : -1\r\n\r\n\t$: rotate = spinning ? spinningRotation : -1 * (5 + (vy > 0 ? vy * 3 : vy * 1.5))\r\n\r\n\tlet spinningRotation = 0\r\n\tlet spinTimeout = null\r\n\t$: if (spinning) {\r\n\t\tspinTimeout = setTimeout(() => {\r\n\t\t\tspinningRotation += 30\r\n\t\t}, 25)\r\n\t} else {\r\n\t\tclearTimeout(spinTimeout)\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.player {\r\n\t\tposition: absolute;\r\n\t}\r\n\r\n\t.graphic {\r\n\t\tmargin-top: 10px;\r\n\t\tmargin: -7px;\r\n\t}\r\n</style>\r\n",
    "<div>\r\n\t<p>Level: {level.name}</p>\r\n\t<p>Score: {score}</p>\r\n</div>\r\n\r\n<script>\r\n\texport let level = {}\r\n\texport let score = 0\r\n</script>\r\n\r\n<style>\r\n\tdiv {\r\n\t\tposition: absolute;\r\n\t\tfont-size: 30px;\r\n\t\ttop: 10px;\r\n\t\tleft: 10px;\r\n\t\tcolor: #333;\r\n\t}\r\n\tp {\r\n\t\tmargin: 0;\r\n\t\tpadding: 0;\r\n\t}\r\n</style>\r\n",
    "<div class=\"viewport\" style=\"width: {width}px; height: {height}px; background-color: {backgroundColor}\">\r\n\t<div style=\"position: absolute; left: {-x}px; bottom: {-y}px; height: {height}px;\">\r\n\t\t<slot />\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\texport let x = 0\r\n\texport let y = 0\r\n\texport let width = 0\r\n\texport let height = 0\r\n\texport let backgroundColor = null\r\n</script>\r\n\r\n<style>\r\n\t.viewport {\r\n\t\tposition: relative;\r\n\t\toverflow: hidden;\r\n\t}\r\n</style>\r\n",
    "{#if savedNames.length}\r\n\t<div>\r\n\t\t{#each savedNames as savedDrawingName}\r\n\t\t\t<div class=\"btn-group mr-2\">\r\n\t\t\t\t<button class=\"btn btn-sm btn-{savedDrawingName == loaded ? 'primary active' : 'secondary'}\" on:click={() => load(savedDrawingName)}>\r\n\t\t\t\t\t{savedDrawingName}\r\n\t\t\t\t</button>\r\n\t\t\t\t<button class=\"btn btn-sm btn-secondary\" on:click={() => deleteSave(savedDrawingName)}>x</button>\r\n\t\t\t</div>\r\n\t\t{/each}\r\n\t</div>\r\n{/if}\r\n\r\n<div class=\"flex\">\r\n\t<button class=\"btn btn-success btn-sm mr-2\" on:click={() => save()}>Save</button>\r\n\t<button class=\"btn btn-secondary btn-sm\" on:click={reset}>Reset</button>\r\n\r\n\t<div class=\"btn-group\">\r\n\t\t<button disabled={undos.length == 0} class=\"btn btn-default btn-sm\" on:click={undo}>Undo {undos.length}</button>\r\n\t\t<button disabled={redos.length == 0} class=\"btn btn-default btn-sm\" on:click={redo}>Redo {redos.length}</button>\r\n\t</div>\r\n\r\n\t<div>\r\n\t\tGrid size\r\n\t\t<input type=\"number\" bind:value={gridSize} min=\"15\" max=\"50\" step=\"5\" />\r\n\t</div>\r\n\t<div>\r\n\t\tHeight\r\n\t\t<input type=\"number\" bind:value={height} placeholder=\"Height\" />\r\n\t</div>\r\n\t<div>\r\n\t\tWidth\r\n\t\t<input type=\"number\" bind:value={width} placeholder=\"Width\" />\r\n\t</div>\r\n\t<label>\r\n\t\t<input type=\"checkbox\" bind:checked={showGrid} />\r\n\t\tShow grid\r\n\t</label>\r\n</div>\r\n\r\n<div class=\"flex align-top\">\r\n\t<div class=\"controls\">\r\n\t\t<div class=\"color-picker\">\r\n\t\t\t{#each colors as color}\r\n\t\t\t\t<button style=\"background-color: {color}\" class:active={color == selectedColor} on:click={() => selectColor(color)} />\r\n\t\t\t{/each}\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"flex-grow\">\r\n\t\t<div>\r\n\t\t\tPreview at in-game size / repeated next to same graphic:\r\n\t\t\t<div style=\"background: rgb(135, 206, 235); padding: 20px;\">\r\n\t\t\t\t{#each [20, 0, 0, 0, 0] as margin}\r\n\t\t\t\t\t<img src={previewPNG} alt=\"\" style=\"margin-right: {margin}px;\" />\r\n\t\t\t\t{/each}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<svg\r\n\t\t\twidth={width * (gridSize + 2)}\r\n\t\t\theight={height * (gridSize + 2)}\r\n\t\t\ton:mousedown={onSvgMouseDown}\r\n\t\t\ton:mouseup={onSvgMouseUp}\r\n\t\t\ton:contextmenu|preventDefault\r\n\t\t\ton:mousemove={e => onSvgMouseMove(e.target)}>\r\n\t\t\t{#each rows as row}\r\n\t\t\t\t{#each columns as column}\r\n\t\t\t\t\t<rect\r\n\t\t\t\t\t\ty={row * gridSize}\r\n\t\t\t\t\t\tx={column * gridSize}\r\n\t\t\t\t\t\tstyle=\"fill: {getCellColor(data, row, column)}\"\r\n\t\t\t\t\t\twidth={gridSize}\r\n\t\t\t\t\t\theight={gridSize}\r\n\t\t\t\t\t\tdata-row={row}\r\n\t\t\t\t\t\tdata-column={column}\r\n\t\t\t\t\t\tstroke={showGrid ? '#eee' : null} />\r\n\t\t\t\t{/each}\r\n\t\t\t{/each}\r\n\t\t</svg>\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\timport LocalStorageStore from '../../stores/local-storage-store'\r\n\timport toPNG from './to-png'\r\n\r\n\tconst savedDrawings = LocalStorageStore('pixel-drawings', {})\r\n\t$: savedNames = Object.keys($savedDrawings)\r\n\r\n\t$: previewPNG = toPNG(data, width, height)\r\n\r\n\tlet loaded = null\r\n\tconst colors = [\r\n\t\t'transparent',\r\n\t\t'white',\r\n\t\t'rgb(204, 204, 204)',\r\n\t\t'rgb(160, 164, 160)',\r\n\t\t'rgb(102, 102, 102)',\r\n\t\t'rgb(51, 51, 51)',\r\n\t\t'black',\r\n\t\t'rgb(119, 59, 11)',\r\n\t\t'blue',\r\n\t\t'pink',\r\n\t\t'yellow',\r\n\t\t'orange',\r\n\t\t'red',\r\n\t\t'purple',\r\n\t\t'teal',\r\n\t\t'green',\r\n\t\t'rgb(40, 40, 184)',\r\n\t\t'rgb(40, 80, 224)',\r\n\t\t'rgb(80, 80, 248)',\r\n\t\t'rgb(120, 124, 248)',\r\n\t\t'rgb(160, 0, 16)',\r\n\t\t'rgb(248, 0, 32)',\r\n\t\t'rgb(208, 124, 96)',\r\n\t\t'rgb(248, 208, 176)',\r\n\r\n\t\t'red',\r\n\t\t// bub colors\r\n\t\t'rgb(253, 240, 232)',\r\n\t\t'rgb(245, 222, 208)',\r\n\t\t'rgb(220, 201, 187)',\r\n\t\t'rgb(197, 179, 167)',\r\n\t\t'rgb(186, 167, 153)',\r\n\t\t'rgb(146, 129, 119)',\r\n\t\t'rgb(120, 107, 99)',\r\n\t\t'rgb(80, 68, 68)',\r\n\r\n\t\t// eyes\r\n\t\t'rgb(122, 80, 55)',\r\n\t\t'rgb(178, 105, 58)',\r\n\t\t'rgb(203, 140, 97)',\r\n\t\t'rgb(238, 187, 155)',\r\n\r\n\t\t// ears & nose\r\n\t\t'rgb(75, 53, 39)',\r\n\r\n\t\t// 'white',\r\n\t\t// '#ccc',\r\n\t\t// '#A0A4A0',\r\n\t\t// '#666',\r\n\t\t// '#333',\r\n\t\t// 'black',\r\n\t\t// '#773b0b',\r\n\t\t// 'blue',\r\n\t\t// 'pink',\r\n\t\t// 'yellow',\r\n\t\t// 'orange',\r\n\t\t// 'red',\r\n\t\t// 'purple',\r\n\t\t// 'teal',\r\n\t\t// 'green',\r\n\t\t// '#2828B8',\r\n\t\t// '#2850E0',\r\n\t\t// '#5050F8',\r\n\t\t// '#787CF8',\r\n\t\t// '#A00010',\r\n\t\t// '#F80020',\r\n\t\t// '#D07C60',\r\n\t\t// '#F8D0B0',\r\n\t]\r\n\tlet selectedColor = 'black'\r\n\tlet gridSize = 30\r\n\tlet height = 30\r\n\tlet width = 30\r\n\tlet undos = []\r\n\tlet redos = []\r\n\tlet showGrid = true\r\n\r\n\t$: rows = [...Array(height)].map((_, i) => i)\r\n\t$: columns = [...Array(width)].map((_, i) => i)\r\n\r\n\t// let levelData = []\r\n\t// $: if (columns.length > 0) {\r\n\t// \tconst newLevelData = []\r\n\t// \tconst reverseData = JSON.parse(JSON.stringify(data)).reverse()\r\n\t// \tfor (let c = 0; c < columns.length; c++) {\r\n\t// \t\tnewLevelData.push(reverseData.map(r => (r.length > c ? r[c] : null)))\r\n\t// \t}\r\n\t// \tlevelData = newLevelData\r\n\t// }\r\n\r\n\tlet data = []\r\n\tlet mouseDown = false\r\n\r\n\treset()\r\n\r\n\tfunction reset() {\r\n\t\taddUndoState()\r\n\t\tdata = buildRows(height)\r\n\t\tloaded = null\r\n\t}\r\n\r\n\tfunction onSvgMouseDown(e) {\r\n\t\tif (e.altKey || e.button !== 0) {\r\n\t\t\tselectedColor = e.target.style.fill\r\n\t\t} else {\r\n\t\t\taddUndoState()\r\n\t\t\tmouseDown = true\r\n\t\t\tonSvgMouseMove(e.target)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onSvgMouseUp(e) {\r\n\t\tmouseDown = false\r\n\t}\r\n\r\n\tfunction onSvgMouseMove(target) {\r\n\t\tif (!mouseDown) return\r\n\r\n\t\tconst row = target.dataset.row\r\n\t\tconst column = target.dataset.column\r\n\t\tif (row != null && column != null) {\r\n\t\t\tsetColor(row, column)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction addUndoState() {\r\n\t\tundos = [...undos.slice(Math.max(undos.length - 20, 0)), JSON.stringify(data)]\r\n\r\n\t\t// if we're adding a new undo state, empty redos\r\n\t\tredos = []\r\n\t}\r\n\r\n\tfunction buildRows(num) {\r\n\t\treturn [...Array(num)].map(r => buildColumns(width))\r\n\t}\r\n\r\n\tfunction buildColumns(num) {\r\n\t\treturn [...Array(num)].map(c => null)\r\n\t}\r\n\r\n\tfunction undo() {\r\n\t\tredos = [...redos, JSON.stringify(data)]\r\n\t\tdata = JSON.parse(undos.pop())\r\n\t\tundos = undos\r\n\t}\r\n\r\n\tfunction redo() {\r\n\t\tif (redos.length == 0) return\r\n\r\n\t\tundos = [...undos, JSON.stringify(data)]\r\n\t\tdata = JSON.parse(redos.pop())\r\n\t\tredos = redos\r\n\t}\r\n\r\n\tfunction setColor(row, column, color = selectedColor) {\r\n\t\t// make sure we have enough rows in data to fit the value\r\n\t\tif (row > data.length) {\r\n\t\t\tconst rowsNeeded = height - data.length\r\n\t\t\tconsole.log('trying to set row ', row, ' but only have ', data.length, ' adding ' + rowsNeeded)\r\n\t\t\tdata = data.concat(buildRows(rowsNeeded))\r\n\t\t}\r\n\r\n\t\t// don't need to worry about columns.. they get auto-filled with null\r\n\t\tdata[row][column] = color\r\n\t}\r\n\r\n\tfunction selectColor(color) {\r\n\t\tselectedColor = color\r\n\t}\r\n\r\n\tfunction save() {\r\n\t\tconst name = prompt('Give us a name', loaded || '')\r\n\t\tif (name == null || name.trim().length == 0) return\r\n\r\n\t\t$savedDrawings[name] = {\r\n\t\t\tname,\r\n\t\t\tgridSize,\r\n\t\t\twidth,\r\n\t\t\theight,\r\n\t\t\tdata,\r\n\t\t\tshowGrid,\r\n\t\t\tpng: toPNG(data, width, height),\r\n\t\t}\r\n\t\tloaded = name\r\n\t}\r\n\r\n\tfunction load(name) {\r\n\t\tlet savedDrawing = JSON.parse(JSON.stringify($savedDrawings[name]))\r\n\r\n\t\tdata = savedDrawing.data\r\n\t\tgridSize = savedDrawing.gridSize\r\n\t\twidth = savedDrawing.width || savedDrawing.data[0].length\r\n\t\theight = savedDrawing.height || savedDrawing.data.length\r\n\t\tshowGrid = savedDrawing.showGrid || showGrid\r\n\t\tundos = []\r\n\t\tredos = []\r\n\t\tloaded = name\r\n\t}\r\n\r\n\tfunction deleteSave(name) {\r\n\t\tif (!confirm(`Are you sure you want to delete ${name}?`)) return\r\n\r\n\t\tif ($savedDrawings.hasOwnProperty(name)) {\r\n\t\t\tdelete $savedDrawings[name]\r\n\t\t\t$savedDrawings = $savedDrawings\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getCellColor(d, row, column) {\r\n\t\treturn d.length > row && d[row].length > column ? d[row][column] : 'white'\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.color-picker button {\r\n\t\tdisplay: block;\r\n\t\twidth: 40px;\r\n\t\theight: 25px;\r\n\t\tmargin-bottom: 0;\r\n\t\tborder: none;\r\n\t\tborder: 1px solid #eee;\r\n\t}\r\n\t.color-picker button:focus {\r\n\t\toutline: none;\r\n\t\tborder: 1px solid #eee;\r\n\t}\r\n\r\n\t.color-picker button.active {\r\n\t\twidth: 50px;\r\n\t}\r\n\r\n\tsvg {\r\n\t\tfill: #fff;\r\n\t\tpadding: 5px;\r\n\t}\r\n\r\n\t.flex input[type='number'] {\r\n\t\twidth: 50px;\r\n\t}\r\n</style>\r\n",
    "<!-- <ul>\r\n\t<li>Choose which characters can play this level</li>\r\n</ul>\r\n\r\n<div class=\"row\">\r\n\t<div class=\"col-2\">\r\n\t\tPlaceable items here. Click an item, then click on the grid to place it in the level\r\n\t\t<ul>\r\n\t\t\t<li>all saved blocks</li>\r\n\t\t\t<li>all saved enemies</li>\r\n\t\t</ul>\r\n\t</div>\r\n\r\n\t<div class=\"col\">GRID HERE</div>\r\n</div> -->\r\n\r\n<div class=\"row\">\r\n\t<div class=\"col-2\">\r\n\t\t<StoreNav items={$levels} activeName={input.name} on:create={create} on:edit={e => edit(e.detail)} />\r\n\t</div>\r\n\t<div class=\"col\">\r\n\t\t<Form on:submit={save}>\r\n\t\t\t<FieldText name=\"name\" bind:value={input.name}>Name</FieldText>\r\n\t\t\t<FieldMultiSelect name=\"characters\" bind:value={input.characters} options={Object.keys($characters)}>\r\n\t\t\t\tWhich characters can play this level?\r\n\t\t\t</FieldMultiSelect>\r\n\r\n\t\t\t<div class=\"flex\">\r\n\t\t\t\t<div class=\"align-top\">\r\n\t\t\t\t\t<strong>Blocks</strong>\r\n\t\t\t\t\t{#each Object.keys($blocks) as blockName}\r\n\t\t\t\t\t\t<div>{blockName}</div>\r\n\t\t\t\t\t{/each}\r\n\t\t\t\t\t<div class=\"mt-3\">\r\n\t\t\t\t\t\t<strong>Enemies</strong>\r\n\t\t\t\t\t\t{#each Object.keys($enemies) as enemyName}\r\n\t\t\t\t\t\t\t<div>{enemyName}</div>\r\n\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"flex-grow align-top level-grid\">GRID HERE</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<span slot=\"buttons\">\r\n\t\t\t\t{#if !isAdding}\r\n\t\t\t\t\t<button class=\"btn btn-danger\" on:click={() => del(input.name)}>Delete</button>\r\n\t\t\t\t{/if}\r\n\t\t\t</span>\r\n\t\t</Form>\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\timport FieldGraphicPicker from './components/FieldGraphicPicker.svelte'\r\n\timport FieldText from './components/FieldText.svelte'\r\n\timport FieldCheckbox from './components/FieldCheckbox.svelte'\r\n\timport FieldNumber from './components/FieldNumber.svelte'\r\n\timport Form from './components/Form.svelte'\r\n\timport StoreNav from './StoreNav.svelte'\r\n\timport FieldMultiSelect from './components/FieldMultiSelect.svelte'\r\n\r\n\timport characters from '../../stores/character-store'\r\n\timport blocks from '../../stores/block-store'\r\n\timport enemies from '../../stores/enemy-store'\r\n\timport levels from '../../stores/level-store'\r\n\r\n\tlet input\r\n\r\n\tcreate()\r\n\r\n\t$: isAdding = $levels[input.name] == null\r\n\r\n\tfunction save() {\r\n\t\t$levels[input.name] = JSON.parse(JSON.stringify(input))\r\n\t}\r\n\r\n\tfunction edit(name) {\r\n\t\tinput = { ...$levels[name] }\r\n\t}\r\n\r\n\tfunction create() {\r\n\t\tinput = {\r\n\t\t\tname: '',\r\n\t\t\tcharacters: [],\r\n\t\t\tdata: [],\r\n\t\t}\r\n\t}\r\n\r\n\tfunction del(name) {\r\n\t\tif (confirm(`Are you sure you want to delete \"${name}\"?`)) delete $levels[name]\r\n\t\t$levels = $levels\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.level-grid {\r\n\t\tbackground: rgb(135, 206, 235);\r\n\t}\r\n</style>\r\n",
    "<div class=\"form-group\">\r\n\t<label for=\"graphic\">\r\n\t\t<slot>Graphic</slot>\r\n\t</label>\r\n\t<div class=\"list-group\">\r\n\t\t{#each options as drawingName}\r\n\t\t\t<div class=\"list-group-item list-group-item-action\" class:active={value == drawingName} on:click={() => (value = drawingName)}>\r\n\t\t\t\t<CustomGraphic graphic={$savedDrawings[drawingName]} />\r\n\t\t\t\t{drawingName}\r\n\t\t\t</div>\r\n\t\t{/each}\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\timport savedDrawings from '../../../stores/pixel-art-store'\r\n\timport CustomGraphic from './CustomGraphic.svelte'\r\n\timport { onMount } from 'svelte'\r\n\texport let value = null\r\n\texport let filter = null\r\n\r\n\t$: options = Object.keys($savedDrawings).filter(name => filter == null || filter($savedDrawings[name]))\r\n</script>\r\n\r\n<style>\r\n\t.list-group {\r\n\t\toverflow: auto;\r\n\t\tmax-height: 250px;\r\n\t}\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "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"
}