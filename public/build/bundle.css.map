{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\ArtMaker.svelte",
    "..\\..\\FieldCharacterPicker.svelte",
    "..\\..\\FieldGraphicPicker.svelte",
    "..\\..\\LevelBuilderDrawingTool.svelte",
    "..\\..\\LevelBuilderLayout.svelte",
    "..\\..\\Game.svelte",
    "..\\..\\GameOver.svelte",
    "..\\..\\HealthBar.svelte",
    "..\\..\\Instructions.svelte",
    "..\\..\\LevelPreview.svelte",
    "..\\..\\LivingSprite.svelte",
    "..\\..\\Status.svelte",
    "..\\..\\Viewport.svelte"
  ],
  "sourcesContent": [
    "<ul class=\"nav\">\r\n\t<li class=\"nav-item\">\r\n\t\t<a class=\"nav-link\" href=\"#/level-builder\">Level Builder</a>\r\n\t</li>\r\n\t{#if canPlay}\r\n\t\t<li class=\"nav-item\">\r\n\t\t\t<a class=\"nav-link\" href=\"#/play\">Play!</a>\r\n\t\t</li>\r\n\t{/if}\r\n</ul>\r\n\r\n<main>\r\n\t<Router {routes} />\r\n</main>\r\n\r\n<script>\r\n\t// svelte-spa-router for hash routing since this is just going to be hosted on github pages\r\n\timport Router from 'svelte-spa-router'\r\n\timport LevelBuilder from './pages/LevelBuilder/Index.svelte'\r\n\timport Play from './pages/Play/Index.svelte'\r\n\timport NotFound from './pages/NotFound.svelte'\r\n\r\n\timport levelStore from './stores/level-store'\r\n\r\n\t$: canPlay = Object.keys($levelStore).length > 0\r\n\r\n\tconst routes = {\r\n\t\t'/level-builder/:tab?/:name?': LevelBuilder,\r\n\t\t'/play': Play,\r\n\t\t'*': NotFound,\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\tmain {\r\n\t\tpadding: 1em;\r\n\t\tmax-width: 240px;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\r\n\th1 {\r\n\t\tcolor: #ff3e00;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-size: 4em;\r\n\t\tfont-weight: 100;\r\n\t}\r\n\r\n\t@media (min-width: 640px) {\r\n\t\tmain {\r\n\t\t\tmax-width: none;\r\n\t\t}\r\n\t}\r\n</style>\r\n",
    "<svelte:window on:keyup={onKeyUp} />\r\n\r\n<LevelBuilderLayout tab=\"art\">\r\n\t{#if savedNames.length}\r\n\t\t<div>\r\n\t\t\t{#each savedNames as savedDrawingName}\r\n\t\t\t\t<div class=\"btn-group mr-1 mb-1\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tclass=\"btn btn-sm btn-{savedDrawingName == loaded ? 'primary active' : 'secondary'}\"\r\n\t\t\t\t\t\ton:click={() => load(savedDrawingName)}>\r\n\t\t\t\t\t\t{savedDrawingName}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-sm btn-secondary\" on:click={() => deleteSave(savedDrawingName)}>x</button>\r\n\t\t\t\t</div>\r\n\t\t\t{/each}\r\n\t\t</div>\r\n\t{/if}\r\n\r\n\t<div class=\"flex my-3\">\r\n\t\t<button type=\"button\" class=\"btn btn-success btn-sm mr-2\" on:click={() => save()}>Save</button>\r\n\t\t<button type=\"button\" class=\"btn btn-secondary btn-sm\" on:click={reset}>Reset</button>\r\n\r\n\t\t<div class=\"btn-group\">\r\n\t\t\t<button type=\"button\" class=\"btn btn-secondary btn-sm\" on:click={flipX}>Flip horizontal</button>\r\n\t\t\t<button type=\"button\" class=\"btn btn-secondary btn-sm\" on:click={flipY}>Flip vertical</button>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"btn-group\">\r\n\t\t\t<button type=\"button\" disabled={undos.length == 0} class=\"btn btn-default btn-sm\" on:click={undo}>Undo {undos.length}</button>\r\n\t\t\t<button type=\"button\" disabled={redos.length == 0} class=\"btn btn-default btn-sm\" on:click={redo}>Redo {redos.length}</button>\r\n\t\t</div>\r\n\r\n\t\t<div>\r\n\t\t\tGrid size\r\n\t\t\t<input type=\"number\" bind:value={gridSize} min=\"15\" max=\"50\" step=\"5\" />\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\tHeight\r\n\t\t\t<input type=\"number\" bind:value={height} placeholder=\"Height\" />\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\tWidth\r\n\t\t\t<input type=\"number\" bind:value={width} placeholder=\"Width\" />\r\n\t\t</div>\r\n\t\t<label>\r\n\t\t\t<input type=\"checkbox\" bind:checked={showGrid} />\r\n\t\t\tShow grid\r\n\t\t</label>\r\n\t</div>\r\n\r\n\t<div class=\"flex align-top\">\r\n\t\t<div class=\"controls\">\r\n\t\t\t<div class=\"color-picker\">\r\n\t\t\t\t{#each colors as color}\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tstyle=\"background: {color != 'transparent' ? color : 'linear-gradient(110deg, rgba(200,200,200,1) 45%, rgba(255,255,255,1) 55%, rgba(255,255,255,1) 100%)'}\"\r\n\t\t\t\t\t\tclass:active={color == selectedColor}\r\n\t\t\t\t\t\ton:click={() => selectColor(color)} />\r\n\t\t\t\t{/each}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"flex-grow \">\r\n\t\t\t<div class=\"my-1\">\r\n\t\t\t\tPreview at in-game size / repeated next to same graphic:\r\n\t\t\t\t<div class=\"p-3 preview-bg flex\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<img src={previewPNG} alt=\"preview\" />\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<!-- if block size, show repeated in x and y-->\r\n\t\t\t\t\t{#if width == 20 && height == 20}\r\n\t\t\t\t\t\t<div class=\"ml-3\">\r\n\t\t\t\t\t\t\t{#each [0, 0] as r}\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t{#each [0, 0, 0, 0] as margin}\r\n\t\t\t\t\t\t\t\t\t\t<img src={previewPNG} alt=\"block repeating preview\" />\r\n\t\t\t\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t{/if}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<svg\r\n\t\t\t\tclass=\"preview-bg\"\r\n\t\t\t\twidth={width * (gridSize + 1)}\r\n\t\t\t\theight={height * (gridSize + 1)}\r\n\t\t\t\ton:mousedown={onSvgMouseDown}\r\n\t\t\t\ton:mouseup={onSvgMouseUp}\r\n\t\t\t\ton:contextmenu|preventDefault\r\n\t\t\t\ton:mousemove={e => onSvgMouseMove(e.target)}>\r\n\t\t\t\t{#each rows as row}\r\n\t\t\t\t\t{#each columns as column}\r\n\t\t\t\t\t\t<rect\r\n\t\t\t\t\t\t\ty={row * gridSize}\r\n\t\t\t\t\t\t\tx={column * gridSize}\r\n\t\t\t\t\t\t\tstyle=\"fill: {getCellColor(data, row, column)}\"\r\n\t\t\t\t\t\t\twidth={gridSize}\r\n\t\t\t\t\t\t\theight={gridSize}\r\n\t\t\t\t\t\t\tdata-row={row}\r\n\t\t\t\t\t\t\tdata-column={column}\r\n\t\t\t\t\t\t\tstroke={showGrid ? '#eee' : null} />\r\n\t\t\t\t\t{/each}\r\n\t\t\t\t{/each}\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t</div>\r\n\r\n</LevelBuilderLayout>\r\n\r\n<script>\r\n\timport LevelBuilderLayout from './components/LevelBuilderLayout.svelte'\r\n\timport LocalStorageStore from '../../stores/local-storage-store'\r\n\timport toPNG from './to-png'\r\n\r\n\tconst artStore = LocalStorageStore('pixel-drawings', {})\r\n\t$: savedNames = Object.keys($artStore)\r\n\r\n\t$: previewPNG = toPNG(data, width, height)\r\n\r\n\tlet loaded = null\r\n\tconst colors = [\r\n\t\t'transparent',\r\n\t\t'white',\r\n\t\t'rgb(204, 204, 204)',\r\n\t\t'rgb(160, 164, 160)',\r\n\t\t'rgb(102, 102, 102)',\r\n\t\t'rgb(51, 51, 51)',\r\n\t\t'black',\r\n\t\t'rgb(119, 59, 11)',\r\n\t\t'blue',\r\n\t\t'pink',\r\n\t\t'yellow',\r\n\t\t'orange',\r\n\t\t'red',\r\n\t\t'purple',\r\n\t\t'teal',\r\n\t\t'green',\r\n\t\t'rgb(40, 40, 184)',\r\n\t\t'rgb(40, 80, 224)',\r\n\t\t'rgb(80, 80, 248)',\r\n\t\t'rgb(120, 124, 248)',\r\n\t\t'rgb(160, 0, 16)',\r\n\t\t'rgb(248, 0, 32)',\r\n\t\t'rgb(208, 124, 96)',\r\n\t\t'rgb(248, 208, 176)',\r\n\r\n\t\t'red',\r\n\t\t// bub colors\r\n\t\t'rgb(253, 240, 232)',\r\n\t\t'rgb(245, 222, 208)',\r\n\t\t'rgb(220, 201, 187)',\r\n\t\t'rgb(197, 179, 167)',\r\n\t\t'rgb(186, 167, 153)',\r\n\t\t'rgb(146, 129, 119)',\r\n\t\t'rgb(120, 107, 99)',\r\n\t\t'rgb(80, 68, 68)',\r\n\r\n\t\t// eyes\r\n\t\t'rgb(122, 80, 55)',\r\n\t\t'rgb(178, 105, 58)',\r\n\t\t'rgb(203, 140, 97)',\r\n\t\t'rgb(238, 187, 155)',\r\n\r\n\t\t// ears & nose\r\n\t\t'rgb(75, 53, 39)',\r\n\r\n\t\t// 'white',\r\n\t\t// '#ccc',\r\n\t\t// '#A0A4A0',\r\n\t\t// '#666',\r\n\t\t// '#333',\r\n\t\t// 'black',\r\n\t\t// '#773b0b',\r\n\t\t// 'blue',\r\n\t\t// 'pink',\r\n\t\t// 'yellow',\r\n\t\t// 'orange',\r\n\t\t// 'red',\r\n\t\t// 'purple',\r\n\t\t// 'teal',\r\n\t\t// 'green',\r\n\t\t// '#2828B8',\r\n\t\t// '#2850E0',\r\n\t\t// '#5050F8',\r\n\t\t// '#787CF8',\r\n\t\t// '#A00010',\r\n\t\t// '#F80020',\r\n\t\t// '#D07C60',\r\n\t\t// '#F8D0B0',\r\n\t]\r\n\tlet selectedColor = 'black'\r\n\tlet gridSize = 25\r\n\tlet height = 20\r\n\tlet width = 20\r\n\tlet undos = []\r\n\tlet redos = []\r\n\tlet showGrid = true\r\n\r\n\t$: rows = [...Array(height)].map((_, i) => i)\r\n\t$: columns = [...Array(width)].map((_, i) => i)\r\n\r\n\tlet data = []\r\n\tlet mouseDown = false\r\n\r\n\treset(false)\r\n\r\n\tfunction reset(undoable = true) {\r\n\t\tif (undoable) addUndoState()\r\n\t\tdata = buildRows(height)\r\n\t\tloaded = null\r\n\t}\r\n\r\n\tfunction onSvgMouseDown(e) {\r\n\t\tif (e.altKey || e.button !== 0) {\r\n\t\t\tselectedColor = e.target.style.fill\r\n\t\t} else {\r\n\t\t\taddUndoState()\r\n\t\t\tmouseDown = true\r\n\t\t\tonSvgMouseMove(e.target)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onSvgMouseUp(e) {\r\n\t\tmouseDown = false\r\n\t}\r\n\r\n\tfunction onSvgMouseMove(target) {\r\n\t\tif (!mouseDown) return\r\n\r\n\t\tconst row = target.dataset.row\r\n\t\tconst column = target.dataset.column\r\n\t\tif (row != null && column != null) {\r\n\t\t\tsetColor(row, column)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction addUndoState() {\r\n\t\tundos = [...undos.slice(Math.max(undos.length - 20, 0)), JSON.stringify(data)]\r\n\r\n\t\t// if we're adding a new undo state, empty redos\r\n\t\tredos = []\r\n\t}\r\n\r\n\tfunction buildRows(num) {\r\n\t\treturn [...Array(num)].map(r => buildColumns(width))\r\n\t}\r\n\r\n\tfunction buildColumns(num) {\r\n\t\treturn [...Array(num)].map(c => 'transparent')\r\n\t}\r\n\r\n\tfunction undo() {\r\n\t\tif (undos.length == 0) return\r\n\r\n\t\tredos = [...redos, JSON.stringify(data)]\r\n\t\tdata = JSON.parse(undos.pop())\r\n\t\tundos = undos\r\n\t}\r\n\r\n\tfunction redo() {\r\n\t\tif (redos.length == 0) return\r\n\r\n\t\tundos = [...undos, JSON.stringify(data)]\r\n\t\tdata = JSON.parse(redos.pop())\r\n\t\tredos = redos\r\n\t}\r\n\r\n\tfunction setColor(row, column, color = selectedColor) {\r\n\t\t// make sure we have enough rows in data to fit the value\r\n\t\tif (row > data.length) {\r\n\t\t\tconst rowsNeeded = height - data.length\r\n\t\t\tdata = data.concat(buildRows(rowsNeeded))\r\n\t\t}\r\n\r\n\t\t// don't need to worry about columns.. they get auto-filled with null\r\n\t\tdata[row][column] = color\r\n\t}\r\n\r\n\tfunction selectColor(color) {\r\n\t\tselectedColor = color\r\n\t}\r\n\r\n\tfunction save() {\r\n\t\tconst name = prompt('Give us a name', loaded || '')\r\n\t\tif (name == null || name.trim().length == 0) return\r\n\r\n\t\t$artStore[name] = {\r\n\t\t\tname,\r\n\t\t\tgridSize,\r\n\t\t\twidth,\r\n\t\t\theight,\r\n\t\t\tdata,\r\n\t\t\tshowGrid,\r\n\t\t\tpng: toPNG(data, width, height),\r\n\t\t}\r\n\t\tloaded = name\r\n\t}\r\n\r\n\tfunction load(name) {\r\n\t\tlet savedDrawing = JSON.parse(JSON.stringify($artStore[name]))\r\n\r\n\t\tdata = savedDrawing.data\r\n\t\tgridSize = savedDrawing.gridSize\r\n\t\twidth = savedDrawing.width || savedDrawing.data[0].length\r\n\t\theight = savedDrawing.height || savedDrawing.data.length\r\n\t\tshowGrid = savedDrawing.showGrid || showGrid\r\n\t\tundos = []\r\n\t\tredos = []\r\n\t\tloaded = name\r\n\t}\r\n\r\n\tfunction deleteSave(name) {\r\n\t\tif (!confirm(`Are you sure you want to delete ${name}?`)) return\r\n\r\n\t\tif ($artStore.hasOwnProperty(name)) {\r\n\t\t\tdelete $artStore[name]\r\n\t\t\t$artStore = $artStore\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getCellColor(d, row, column) {\r\n\t\treturn d.length > row && d[row].length > column ? d[row][column] || 'transparent' : 'white'\r\n\t}\r\n\r\n\tfunction onKeyUp(e) {\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'KeyZ':\r\n\t\t\t\tif (e.ctrlKey) undo()\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyY':\r\n\t\t\t\tif (e.ctrlKey) redo()\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\tfunction flipY() {\r\n\t\tdata = data.slice(0, height).reverse()\r\n\t}\r\n\r\n\tfunction flipX() {\r\n\t\tdata = data.map(d => d.slice(0, width).reverse())\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.color-picker button {\r\n\t\tdisplay: block;\r\n\t\twidth: 40px;\r\n\t\theight: 25px;\r\n\t\tmargin-bottom: 0;\r\n\t\tborder: none;\r\n\t\tborder: 1px solid #eee;\r\n\t}\r\n\t.color-picker button:focus {\r\n\t\toutline: none;\r\n\t\tborder: 1px solid #eee;\r\n\t}\r\n\r\n\t.color-picker button.active {\r\n\t\twidth: 50px;\r\n\t}\r\n\r\n\tsvg {\r\n\t\tfill: #fff;\r\n\t\tpadding: 5px;\r\n\t}\r\n\r\n\t.flex input[type='number'] {\r\n\t\twidth: 50px;\r\n\t}\r\n\r\n\t.preview-bg {\r\n\t\tbackground: rgb(135, 206, 235);\r\n\t}\r\n</style>\r\n",
    "<div class=\"form-group\">\r\n\t<label for=\"graphic\">\r\n\t\t<slot>Characters</slot>\r\n\t</label>\r\n\t<div class=\"options\">\r\n\t\t{#each Object.keys($characterStore) as name}\r\n\t\t\t<div class:active={value.indexOf(name) > -1} on:click={() => toggle(name)}>\r\n\t\t\t\t<Art name={$characterStore[name].graphicStill} />\r\n\t\t\t</div>\r\n\t\t{/each}\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\timport artStore from '../../../stores/art-store'\r\n\timport characterStore from '../../../stores/character-store'\r\n\timport Art from './Art.svelte'\r\n\texport let value = []\r\n\texport let filter = null\r\n\r\n\t$: options = Object.keys($artStore).filter(name => filter == null || filter($artStore[name]))\r\n\r\n\tfunction toggle(name) {\r\n\t\tvalue = value.indexOf(name) > -1 ? value.filter(v => v != name) : [...value, name].sort()\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.options {\r\n\t\toverflow: auto;\r\n\t}\r\n\t.options > div {\r\n\t\tpadding: 10px;\r\n\t\tfloat: left;\r\n\t\tborder-radius: 0.25rem;\r\n\t\tmargin-right: 3px;\r\n\t}\r\n\t.options > div.active {\r\n\t\tbackground: #007bff;\r\n\t\t/* background: #28a745; */\r\n\t}\r\n</style>\r\n",
    "<div class=\"form-group\">\r\n\t<label for=\"graphic\">\r\n\t\t<slot>Graphic</slot>\r\n\t</label>\r\n\t<div class=\"options\">\r\n\t\t{#each options as drawingName}\r\n\t\t\t<div class:active={value == drawingName} on:click={() => (value = drawingName)}>\r\n\t\t\t\t<Art name={drawingName} {spin} />\r\n\t\t\t</div>\r\n\t\t{/each}\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\timport artStore from '../../../stores/art-store'\r\n\timport Art from './Art.svelte'\r\n\texport let value = null\r\n\texport let filter = null\r\n\texport let spin = false\r\n\r\n\t$: options = Object.keys($artStore).filter(name => filter == null || filter($artStore[name]))\r\n</script>\r\n\r\n<style>\r\n\t.options {\r\n\t\toverflow: auto;\r\n\t}\r\n\t.options > div {\r\n\t\tpadding: 10px;\r\n\t\tfloat: left;\r\n\t\tborder-radius: 0.25rem;\r\n\t}\r\n\t.options > div.active {\r\n\t\tbackground: #007bff;\r\n\t}\r\n</style>\r\n",
    "<div class=\"drawing-tool\">\r\n\t<LevelPreview level={{ background, thumbnail }} on:pan={onPreviewPan} />\r\n\t<div class=\"tool-picker\">\r\n\t\t<div>\r\n\t\t\tBlocks\r\n\t\t\t<div class=\"btn-group\">\r\n\t\t\t\t{#each Object.keys($blockStore) as name}\r\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-{name == selectedBlock ? 'primary' : 'light'}\" on:click={() => selectBlock(name)}>\r\n\t\t\t\t\t\t<Art name={$blockStore[name].graphic} />\r\n\t\t\t\t\t</button>\r\n\t\t\t\t{/each}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\tEnemies\r\n\t\t\t<div class=\"btn-group\">\r\n\t\t\t\t{#each Object.keys($enemyStore) as name}\r\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-{name == selectedEnemy ? 'primary' : 'default'}\" on:click={() => selectEnemy(name)}>\r\n\t\t\t\t\t\t<Art name={$enemyStore[name].graphicStill} />\r\n\t\t\t\t\t</button>\r\n\t\t\t\t{/each}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<div\r\n\t\tclass=\"level-container\"\r\n\t\tstyle=\"background: {background}; height: {height + 25}px;\"\r\n\t\tbind:this={levelContainer}\r\n\t\ton:mousedown={onMouseDown}\r\n\t\ton:mouseup={onMouseUp}\r\n\t\ton:mousemove={onMouseMove}\r\n\t\ton:contextmenu|preventDefault>\r\n\t\t<Level {blocks} {enemies} {width} {height} on:draw={onLevelDraw} />\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\timport Art from './Art.svelte'\r\n\timport artStore from '../../../stores/art-store'\r\n\timport blockStore from '../../../stores/block-store'\r\n\timport LivingSprite from '../../Play/LivingSprite.svelte'\r\n\timport enemyStore from '../../../stores/enemy-store'\r\n\timport Level from '../../Play/Level.svelte'\r\n\timport makeThumbnail from '../make-thumbnail'\r\n\timport LevelPreview from '../../Play/LevelPreview.svelte'\r\n\r\n\texport let background = null\r\n\r\n\t// each block passed to <Level> needs x, y, width, height, png\r\n\texport let thumbnail\r\n\texport let blocks = []\r\n\texport let enemies = []\r\n\r\n\t$: if (blocks != null && blocks.some(b => b.png != null)) {\r\n\t\tblocks = blocks.map(b => {\r\n\t\t\tconst { png, ...otherProps } = b\r\n\t\t\treturn otherProps\r\n\t\t})\r\n\t}\r\n\r\n\tconst blockSize = 40\r\n\r\n\tlet selectedBlock = null\r\n\tlet selectedEnemy = null\r\n\tlet mouseDown = false\r\n\r\n\tlet levelContainer\r\n\tlet canvas\r\n\tconst thumbnailScale = 8\r\n\tfunction onLevelDraw(e) {\r\n\t\tconst canvas = e.detail\r\n\t\tthumbnail = makeThumbnail(canvas, width / thumbnailScale, height / thumbnailScale)\r\n\t}\r\n\r\n\t// todo let them draw higher, use wasd or arrows to navigate around level rather than scrolling\r\n\t// $: highestYUsed = blocks.length > 0 ? Math.max(...blocks.map(b => b.y + b.height)) : 0\r\n\t$: height = 600 //Math.max(400, highestYUsed + 300)\r\n\r\n\t$: highestXUsed = blocks.length > 0 ? Math.max(...blocks.map(b => b.x + b.width)) : 0\r\n\t$: width = Math.max(800, highestXUsed + 500)\r\n\r\n\tfunction selectBlock(name) {\r\n\t\tselectedBlock = name\r\n\t\tselectedEnemy = null\r\n\t}\r\n\r\n\tfunction selectEnemy(name) {\r\n\t\tselectedBlock = null\r\n\t\tselectedEnemy = name\r\n\t}\r\n\r\n\tfunction onPreviewPan(e) {\r\n\t\tconst centerTargetX = e.detail * thumbnailScale\r\n\t\tconst leftTargetX = Math.max(centerTargetX - levelContainer.clientWidth / 2, 0)\r\n\t\tlevelContainer.scroll(leftTargetX, 0)\r\n\t}\r\n\r\n\tfunction onMouseDown(e) {\r\n\t\t// if they right click or alt click, select whatever block they're hovering over\r\n\t\t// if no block is there, it selects null, which makes placeBlock erase the current block\r\n\t\tif (e.altKey || e.button !== 0) {\r\n\t\t\tselectedBlock = findBlockAtPosition(e)\r\n\t\t\tselectedEnemy = findEnemyAtPosition(e)\r\n\t\t}\r\n\r\n\t\tmouseDown = e.button === 0\r\n\t\tonMouseMove(e)\r\n\t}\r\n\r\n\tfunction onMouseMove(e) {\r\n\t\tif (mouseDown) {\r\n\t\t\tconst { x, y } = getEventItemPosition(e)\r\n\t\t\tplaceItem(x, y)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onMouseUp(e) {\r\n\t\tmouseDown = false\r\n\t}\r\n\r\n\tfunction findBlockAtPosition(e) {\r\n\t\tconst { x, y } = getEventItemPosition(e)\r\n\t\tconst block = blocks.find(b => b.x == x && b.y == y)\r\n\t\treturn block == null ? null : block.name\r\n\t}\r\n\r\n\tfunction findEnemyAtPosition(e) {\r\n\t\tconst { x, y } = getEventItemPosition(e)\r\n\t\tconst enemy = enemies.find(e => e.x == x && e.y == y)\r\n\t\treturn enemy == null ? null : enemy.name\r\n\t}\r\n\r\n\tfunction getEventItemPosition(e) {\r\n\t\tconst container = e.target.closest('.level-container')\r\n\t\treturn {\r\n\t\t\tx: Math.floor(e.offsetX / blockSize) * blockSize,\r\n\t\t\ty: Math.floor((height - e.offsetY) / blockSize) * blockSize,\r\n\t\t}\r\n\t}\r\n\r\n\tfunction placeItem(x, y) {\r\n\t\teraseItemAt(x, y)\r\n\t\tif (selectedBlock != null) {\r\n\t\t\tconst template = $blockStore[selectedBlock]\r\n\t\t\tblocks = [\r\n\t\t\t\t...blocks,\r\n\t\t\t\t{\r\n\t\t\t\t\tname: selectedBlock,\r\n\t\t\t\t\tx,\r\n\t\t\t\t\ty,\r\n\t\t\t\t\twidth: blockSize,\r\n\t\t\t\t\theight: blockSize,\r\n\t\t\t\t},\r\n\t\t\t]\r\n\t\t} else if (selectedEnemy != null) {\r\n\t\t\tconst template = $enemyStore[selectedEnemy]\r\n\t\t\tenemies = [\r\n\t\t\t\t...enemies,\r\n\t\t\t\t{\r\n\t\t\t\t\tname: selectedEnemy,\r\n\t\t\t\t\tx,\r\n\t\t\t\t\ty,\r\n\t\t\t\t\twidth: template.width,\r\n\t\t\t\t\theight: template.height,\r\n\t\t\t\t},\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n\r\n\tfunction eraseItemAt(x, y) {\r\n\t\tblocks = blocks.filter(b => b.x != x || b.y != y)\r\n\t\tenemies = enemies.filter(e => e.x != x || e.y != y)\r\n\t}\r\n\r\n\tfunction hydrateEnemy(enemy) {\r\n\t\tconst template = $enemyStore[enemy.name]\r\n\t\treturn {\r\n\t\t\t...template,\r\n\t\t\t...enemy,\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.drawing-tool {\r\n\t\tposition: relative;\r\n\t\twidth: 1400px;\r\n\t}\r\n\r\n\t.tool-picker {\r\n\t\tmargin: 5px 0;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: row;\r\n\t\talign-items: top;\r\n\t}\r\n\t.tool-picker > div {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.tool-picker .btn-group {\r\n\t\tmargin-right: 5px;\r\n\t}\r\n\r\n\t.tool-picker .btn {\r\n\t\theight: 60px;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.level-container {\r\n\t\toverflow-x: auto;\r\n\t\tmax-width: 100%;\r\n\t}\r\n</style>\r\n",
    "<div class=\"flex align-top\">\r\n\t<div>\r\n\t\t<div class=\"list-group\">\r\n\t\t\t<a class=\"list-group-item list-group-item-action\" class:active={tab == 'art'} href={baseUrl}>Art</a>\r\n\t\t\t{#each tabs as t}\r\n\t\t\t\t<a class=\"list-group-item list-group-item-action\" class:active={tab == t.name} href=\"{baseUrl}/{t.name}/new\">{t.name}</a>\r\n\t\t\t\t{#if t.name == tab}\r\n\t\t\t\t\t<div class=\"list-group sub-nav\">\r\n\t\t\t\t\t\t<a href=\"{baseUrl}/{t.name}/new\" class=\"list-group-item list-group-item-action\" class:list-group-item-success={store[activeName] == null}>\r\n\t\t\t\t\t\t\t+ New\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t{#each Object.keys(store) as name}\r\n\t\t\t\t\t\t\t<a class=\"list-group-item list-group-item-action\" class:active={activeName == name} href=\"{baseUrl}/{t.name}/{name}\">\r\n\t\t\t\t\t\t\t\t<Art name={store[name][t.graphicKey]} />\r\n\t\t\t\t\t\t\t\t{name}\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t{/if}\r\n\t\t\t{/each}\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"flex-grow\">\r\n\t\t<slot />\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\timport Art from './Art.svelte'\r\n\r\n\texport let tab\r\n\texport let activeName\r\n\texport let store\r\n\r\n\tconst baseUrl = '#/level-builder'\r\n\r\n\tconst tabs = [\r\n\t\t{ name: 'blocks', graphicKey: 'graphic' },\r\n\t\t{ name: 'characters', graphicKey: 'graphicStill' },\r\n\t\t{ name: 'enemies', graphicKey: 'graphicStill' },\r\n\t\t{ name: 'levels', graphicKey: null },\r\n\t]\r\n</script>\r\n\r\n<style>\r\n\t.sub-nav {\r\n\t\tmargin-left: 20px;\r\n\t}\r\n\t.sub-nav .list-group-item {\r\n\t\tpadding: 6px 12px;\r\n\t}\r\n</style>\r\n",
    "<svelte:window on:keydown={onKeyDown} on:keyup={onKeyUp} />\r\n\r\n<div class=\"game-window\" bind:this={mainEl}>\r\n\t{#if gameOver}\r\n\t\t<GameOver {score} {player} />\r\n\t{/if}\r\n\t{#if level != null && player != null}\r\n\t\t<Viewport {...viewport} background={level.background}>\r\n\t\t\t<Level {blocks} width={levelWidth} height={levelHeight} playing />\r\n\t\t\t{#each enemies as enemy}\r\n\t\t\t\t<LivingSprite {...enemy} />\r\n\t\t\t{/each}\r\n\t\t\t<LivingSprite {...player} />\r\n\t\t</Viewport>\r\n\t{/if}\r\n\t<Status {level} {score} />\r\n\t<Instructions />\r\n</div>\r\n\r\n<script>\r\n\timport { onMount, onDestroy } from 'svelte'\r\n\timport Status from './Status.svelte'\r\n\timport Level from './Level.svelte'\r\n\timport Instructions from './Instructions.svelte'\r\n\timport Viewport from './Viewport.svelte'\r\n\timport LivingSprite from './LivingSprite.svelte'\r\n\timport HealthBar from './HealthBar.svelte'\r\n\timport GameOver from './GameOver.svelte'\r\n\timport { doObjectsIntersect, isAAboveB, doObjectsIntersectY, doObjectsIntersectYExclusive } from './spatial-functions'\r\n\timport CreateEnemy from './enemies'\r\n\r\n\timport artStore from '../../stores/art-store'\r\n\timport blockStore from '../../stores/block-store'\r\n\timport enemyStore from '../../stores/enemy-store'\r\n\r\n\texport let level = null\r\n\texport let character = null\r\n\r\n\tconst artScale = 2\r\n\tconst startOfLevel = 0\r\n\tlet endOfLevel\r\n\tconst blockSize = 40\r\n\tlet blocks\r\n\tlet damageBlocks\r\n\tlet levelWidth = 0\r\n\tlet levelHeight = 0\r\n\r\n\tlet score = 0\r\n\r\n\tlet mainEl\r\n\tlet player\r\n\tlet enemies\r\n\tlet gameOver = false\r\n\r\n\tlet gameAlive = true\r\n\tlet lastRequestedFrame = null\r\n\r\n\tlet visibleBlocks\r\n\tlet viewport = {\r\n\t\twidth: window.innerWidth,\r\n\t\theight: 600,\r\n\t}\r\n\r\n\tlet leftDown = false\r\n\tlet rightDown = false\r\n\r\n\tonMount(() => {\r\n\t\t// sort blocks by x, then y\r\n\t\tblocks = level.blocks\r\n\t\t\t.sort((a, b) => {\r\n\t\t\t\tif (a.x > b.x) return 1\r\n\t\t\t\telse if (b.x > a.x) return -1\r\n\r\n\t\t\t\tif (a.y > b.y) return -1\r\n\t\t\t\telse if (b.y > a.y) return 1\r\n\r\n\t\t\t\treturn 0\r\n\t\t\t})\r\n\t\t\t.map(b => ({\r\n\t\t\t\t...b,\r\n\t\t\t\tsolid: $blockStore[b.name].solid,\r\n\t\t\t\tpng: $artStore[$blockStore[b.name].graphic].png,\r\n\t\t\t\tdps: $blockStore[b.name].dps,\r\n\t\t\t\tthrowOnTouch: $blockStore[b.name].throwOnTouch,\r\n\t\t\t}))\r\n\r\n\t\tendOfLevel = Math.max(...blocks.map(b => b.x + b.width))\r\n\r\n\t\tdamageBlocks = blocks.filter(b => b.dps > 0)\r\n\r\n\t\tlevelWidth = Math.max(...blocks.map(b => b.x + b.width))\r\n\t\tlevelHeight = 600 //Math.max(...blocks.map(b => b.y + b.height))\r\n\t\tstart()\r\n\t})\r\n\r\n\tonDestroy(() => {\r\n\t\tgameAlive = false\r\n\t\twindow.cancelAnimationFrame(lastRequestedFrame)\r\n\t})\r\n\r\n\tfunction start() {\r\n\t\tscore = 0\r\n\t\tplayer = {\r\n\t\t\t...character,\r\n\t\t\thealth: character.maxHealth,\r\n\t\t\ttvx: character.maxVelocity,\r\n\r\n\t\t\twidth: $artStore[character.graphicStill].width * artScale, // width of graphic\r\n\t\t\theight: $artStore[character.graphicStill].height * artScale, // height of graphic\r\n\r\n\t\t\t// runtime stuff\r\n\t\t\tx: blocks[0].x,\r\n\t\t\ty: blocks[0].y + blocks[0].height + 100,\r\n\t\t\tvx: 0,\r\n\t\t\tvy: 0,\r\n\r\n\t\t\t// todo: replace \"spinning\" with abilities\r\n\t\t\tspinning: false,\r\n\r\n\t\t\ttick() {\r\n\t\t\t\t// x axis controls\r\n\t\t\t\tif (player.grounded) {\r\n\t\t\t\t\tif (leftDown && !rightDown) player.vx -= player.tvx / 5\r\n\t\t\t\t\telse if (rightDown && !leftDown) player.vx += player.tvx / 5\r\n\t\t\t\t\telse player.vx = 0\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// let them control direction a little in the air, but not as much\r\n\t\t\t\t\tif (leftDown && !rightDown) player.vx -= player.tvx / 10\r\n\t\t\t\t\telse if (rightDown && !leftDown) player.vx += player.tvx / 10\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// don't let them break top speed though\r\n\t\t\t\tif (Math.abs(player.vx) > player.tvx) player.vx = player.tvx * (player.vx < 0 ? -1 : 1)\r\n\t\t\t},\r\n\t\t}\r\n\t\tenemies = level.enemies.map(e => {\r\n\t\t\tconst template = $enemyStore[e.name]\r\n\t\t\tconst w = $artStore[template.graphicStill].width * artScale // width of graphic\r\n\t\t\tconst h = $artStore[template.graphicStill].height * artScale // height of graphic\r\n\t\t\treturn CreateEnemy(template, e, w, h)\r\n\t\t})\r\n\t\tgameOver = false\r\n\r\n\t\t// only start game loop if it's not already going\r\n\t\tif (lastRequestedFrame == null) gameLoop()\r\n\t}\r\n\r\n\tfunction gameLoop() {\r\n\t\tif (!gameOver) {\r\n\t\t\t// visibleBlocks = blocks.filter(b => doObjectsIntersect(viewport, b))\r\n\t\t\tplayer = applyWorldToSprite(player, true)\r\n\r\n\t\t\t// handle movement / attack abilities\r\n\t\t\tplayer.tick()\r\n\r\n\t\t\tconst halfViewportWidth = viewport.width / 2\r\n\t\t\tconst halfViewportHeight = viewport.height / 2\r\n\r\n\t\t\tviewport.x =\r\n\t\t\t\t// player is at beginning of level\r\n\t\t\t\tplayer.x < halfViewportWidth\r\n\t\t\t\t\t? // viewport all the way to the left\r\n\t\t\t\t\t  0\r\n\t\t\t\t\t: // player is at end of level\r\n\t\t\t\t\tplayer.x > endOfLevel - halfViewportWidth\r\n\t\t\t\t\t? // viewport all the way to the right\r\n\t\t\t\t\t  endOfLevel - viewport.width\r\n\t\t\t\t\t: // player is in middle of level, viewport centered on player\r\n\t\t\t\t\t  player.x - halfViewportWidth\r\n\r\n\t\t\tviewport.y =\r\n\t\t\t\t// player is near bottom of screen\r\n\t\t\t\tplayer.y < halfViewportHeight\r\n\t\t\t\t\t? // viewport all the way to bottom\r\n\t\t\t\t\t  0\r\n\t\t\t\t\t: // player above half viewport height, center on player\r\n\t\t\t\t\t  player.y - halfViewportHeight\r\n\r\n\t\t\t// for every live enemy intersecting the player, one or the other should take damage\r\n\t\t\tfor (let i = 0; i < enemies.length; i++) {\r\n\t\t\t\tif (enemies[i].alive) {\r\n\t\t\t\t\tenemies[i] = applyWorldToSprite(enemies[i])\r\n\t\t\t\t\tenemies[i].tick(enemies[i], player)\r\n\t\t\t\t\tif (doObjectsIntersect(player, enemies[i])) {\r\n\t\t\t\t\t\tif (player.spinning) {\r\n\t\t\t\t\t\t\tenemies[i].gettingHit = true\r\n\t\t\t\t\t\t\tenemies[i].health -= player.dps / 60 // damage per frame\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tplayer.health -= enemies[i].dps / 60 // damage per frame\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (enemies[i].health <= 0) {\r\n\t\t\t\t\t\tenemies[i].alive = false\r\n\t\t\t\t\t\tenemies[i].onDeath()\r\n\t\t\t\t\t\tscore += enemies[i].score\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// game is over if player dies\r\n\t\t\tif (player.health <= 0) gameOver = true\r\n\t\t}\r\n\r\n\t\tif (gameAlive) lastRequestedFrame = window.requestAnimationFrame(gameLoop)\r\n\t}\r\n\r\n\tfunction applyWorldToSprite(sprite, isPlayerControlled = false) {\r\n\t\tconst surfacesBelowSprite = blocks.filter(b => b.solid && isAAboveB(sprite, b)).map(b => b.y + b.height)\r\n\t\tconst surfaceY = surfacesBelowSprite.length > 0 ? Math.max(...surfacesBelowSprite) : -500 // some number off screen\r\n\r\n\t\tsprite.y += sprite.vy\r\n\t\tsprite.grounded = sprite.y <= surfaceY\r\n\r\n\t\t// gravity affects all sprites\r\n\t\tif (sprite.grounded) {\r\n\t\t\t// we're grounded - take damage if we were previously falling\r\n\t\t\tif (sprite.vy < 0) {\r\n\t\t\t\tsprite.health += (sprite.vy / 10) * sprite.fallDamageMultiplier\r\n\t\t\t\tsprite.vy = 0\r\n\t\t\t}\r\n\r\n\t\t\t// make sure we're exactly on the ground\r\n\t\t\tsprite.y = surfaceY\r\n\t\t} else if (sprite.y < -200) {\r\n\t\t\t// we fell under the map, die\r\n\t\t\tsprite.health = 0\r\n\t\t} else {\r\n\t\t\t// we're in the air, accelerate downward\r\n\t\t\tsprite.vy -= 1\r\n\t\t}\r\n\r\n\t\t// x velocity\r\n\t\tif (sprite.vx != 0) {\r\n\t\t\tif (sprite.vx > 0) {\r\n\t\t\t\t// moving right\r\n\t\t\t\tlet targetX = sprite.x + sprite.vx\r\n\t\t\t\t// any block that would prevent us from reaching our target?\r\n\t\t\t\tconst blockToRight = blocks.find(b => {\r\n\t\t\t\t\t// sprite x + width <= box x\r\n\t\t\t\t\t// target x + width > box x\r\n\t\t\t\t\tconst txw = targetX + sprite.width\r\n\t\t\t\t\tconst sxw = sprite.x + sprite.width\r\n\t\t\t\t\treturn b.solid && txw > b.x && sxw <= b.x && doObjectsIntersectYExclusive(b, sprite)\r\n\t\t\t\t})\r\n\t\t\t\tif (blockToRight != null) targetX = blockToRight.x - sprite.width\r\n\t\t\t\t// don't let them go past end of level\r\n\t\t\t\telse if (targetX > endOfLevel) targetX = endOfLevel\r\n\t\t\t\tsprite.x = targetX\r\n\t\t\t} else if (sprite.vx < 0) {\r\n\t\t\t\t// moving left\r\n\t\t\t\tlet targetX = sprite.x + sprite.vx\r\n\t\t\t\t// any block that would prevent us from reaching target?\r\n\t\t\t\tconst blockToLeft = blocks.find(b => {\r\n\t\t\t\t\t// sprite x >= box x + width\r\n\t\t\t\t\t// target x < box x + width\r\n\t\t\t\t\tconst bxw = b.x + b.width\r\n\t\t\t\t\treturn b.solid && sprite.x >= bxw && targetX < bxw && doObjectsIntersectYExclusive(b, sprite)\r\n\t\t\t\t})\r\n\t\t\t\tif (blockToLeft != null) targetX = blockToLeft.x + blockToLeft.width\r\n\t\t\t\t// don't let them go past start of level\r\n\t\t\t\telse if (targetX < 0) targetX = 0\r\n\r\n\t\t\t\tsprite.x = targetX < startOfLevel ? startOfLevel : targetX\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// blocks that do damage\r\n\t\tfor (let i = 0; i < damageBlocks.length; i++) {\r\n\t\t\tif (doObjectsIntersect(sprite, damageBlocks[i])) {\r\n\t\t\t\tsprite.health -= damageBlocks[i].dps / 60 // damage per frame\r\n\r\n\t\t\t\t// does the block also throw?\r\n\t\t\t\tif (damageBlocks[i].throwOnTouch) {\r\n\t\t\t\t\tsprite.vy = 20\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn sprite\r\n\t}\r\n\r\n\tfunction onKeyDown(e) {\r\n\t\tif (gameOver) return\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'ArrowLeft':\r\n\t\t\t\tleftDown = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ArrowRight':\r\n\t\t\t\trightDown = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Space':\r\n\t\t\t\tif (player.grounded || player.canFly) player.vy = player.jumpVelocity\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyR':\r\n\t\t\t\tplayer.spinning = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyQ':\r\n\t\t\t\tplayer.health = player.maxHealth\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onKeyUp(e) {\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'ArrowLeft':\r\n\t\t\t\tleftDown = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ArrowRight':\r\n\t\t\t\trightDown = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Space':\r\n\t\t\t\tif (gameOver) start()\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyR':\r\n\t\t\t\tplayer.spinning = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Enter':\r\n\t\t\tcase 'NumpadEnter':\r\n\t\t\t\tstart()\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(e.code)\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.game-window {\r\n\t\twidth: 100%;\r\n\t\theight: 90vh;\r\n\t\tmin-height: 600px;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\toverflow: hidden;\r\n\t\tposition: relative;\r\n\t}\r\n</style>\r\n",
    "{#if player}\r\n\t<div class=\"game-over\">\r\n\t\t<h1>{player.name} is dead now. You really let him down.</h1>\r\n\t\t<h1>Final score: {score}</h1>\r\n\t\t<p>Press enter or space to restart.</p>\r\n\t</div>\r\n{/if}\r\n\r\n<script>\r\n\texport let score = 0\r\n\texport let player\r\n</script>\r\n\r\n<style>\r\n\t.game-over {\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground: rgba(0, 0, 0, 0.5);\r\n\t\ttext-align: center;\r\n\t\tz-index: 10;\r\n\t\tpadding-top: 150px;\r\n\t}\r\n\r\n\th1 {\r\n\t\tmargin-top: 25x;\r\n\t\tcolor: #fff;\r\n\t\tfont-size: 50px;\r\n\t\tfont-weight: 100;\r\n\t}\r\n\r\n\tp {\r\n\t\tcolor: #eee;\r\n\t}\r\n</style>\r\n",
    "<!-- Josh demands a healing animation -->\r\n\r\n<div class=\"health-bar\">\r\n\t<div class=\"filled\" style=\"width: {displayPercent}%; background-color: {color}\" />\r\n\t<div class=\"text\">{displayHealth} {health > 0 ? `(${displayPercent}%)` : 'I am dead.'}</div>\r\n</div>\r\n\r\n<script>\r\n\texport let percent = 100\r\n\texport let health = 100\r\n\texport let maxHealth = 100\r\n\r\n\t$: displayHealth = health > 0 ? Math.round(health) : 0\r\n\t$: percent = Math.round((health / maxHealth) * 100, 2)\r\n\t$: displayPercent = percent > 0 ? percent : 0\r\n\t$: color = percent > 75 ? 'rgba(24, 197, 33, 0.5)' : percent > 25 ? 'rgba(245, 189, 36, 0.5)' : 'rgba(223, 22, 22, 0.5)'\r\n</script>\r\n\r\n<style>\r\n\t.health-bar {\r\n\t\theight: 18px;\r\n\t\tbackground: rgba(0, 0, 0, 0.5);\r\n\t\tposition: relative;\r\n\t\tborder-radius: 5px;\r\n\t\toverflow: hidden;\r\n\t\tmin-width: 75px;\r\n\t}\r\n\r\n\t.filled {\r\n\t\theight: 100%;\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t}\r\n\r\n\t.text {\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\ttext-align: center;\r\n\t\tcolor: #ccc;\r\n\t\tfont-size: 12px;\r\n\t}\r\n</style>\r\n",
    "<div class=\"instructions\">\r\n\t<table>\r\n\t\t{#each keyBinds as bind}\r\n\t\t\t<tr>\r\n\t\t\t\t<td>{bind.key}</td>\r\n\t\t\t\t<td>= {bind.action}</td>\r\n\t\t\t</tr>\r\n\t\t{/each}\r\n\t</table>\r\n</div>\r\n\r\n<script>\r\n\tconst keyBinds = [\r\n\t\t{\r\n\t\t\tkey: 'Left + Right Arrow',\r\n\t\t\taction: 'Move',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Space',\r\n\t\t\taction: 'Jump',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'R',\r\n\t\t\taction: 'Spin Attack / Shield',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Q',\r\n\t\t\taction: 'Heal',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Enter',\r\n\t\t\taction: 'Restart',\r\n\t\t},\r\n\t]\r\n</script>\r\n\r\n<style>\r\n\t.instructions {\r\n\t\tpadding: 10px;\r\n\t}\r\n\r\n\ttable td {\r\n\t\tfont-size: 12px;\r\n\t}\r\n\r\n\ttable tr td:first-child {\r\n\t\ttext-align: right;\r\n\t}\r\n\ttable tr td:last-child {\r\n\t\ttext-align: left;\r\n\t}\r\n</style>\r\n",
    "{#if level}\r\n\t<img\r\n\t\tsrc={level.thumbnail}\r\n\t\talt=\"level preview\"\r\n\t\tclass=\"level-preview\"\r\n\t\tclass:grabbing={mouseDown}\r\n\t\tstyle=\"background: {level.background}\"\r\n\t\ton:mousedown|preventDefault={onMouseDown}\r\n\t\ton:mousemove|preventDefault={onMouseMove}\r\n\t\ton:mouseup|preventDefault={onMouseUp} />\r\n{/if}\r\n\r\n<script>\r\n\timport { createEventDispatcher } from 'svelte'\r\n\texport let level\r\n\tconst dispatch = createEventDispatcher()\r\n\r\n\tlet mouseDown = false\r\n\tfunction onMouseDown(e) {\r\n\t\tmouseDown = true\r\n\t}\r\n\r\n\tfunction onMouseUp(e) {\r\n\t\tmouseDown = false\r\n\t}\r\n\r\n\tfunction onMouseMove(e) {\r\n\t\tif (mouseDown) dispatch('pan', e.offsetX)\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\timg {\r\n\t\tcursor: grab;\r\n\t}\r\n\t.grabbing {\r\n\t\tcursor: grabbing;\r\n\t}\r\n</style>\r\n",
    "<div class=\"player\" style=\"left: {x}px; bottom: {y}px;\">\r\n\t<HealthBar {health} {maxHealth} />\r\n\t{#if graphic != null}\r\n\t\t<img\r\n\t\t\tclass=\"graphic\"\r\n\t\t\tsrc={graphic.png}\r\n\t\t\talt={name}\r\n\t\t\tstyle=\"width: {graphic.width * artScale}px; height: {graphic.height * artScale}px; transform: scaleX({direction}) rotate({rotate}deg);\" />\r\n\t{/if}\r\n</div>\r\n\r\n<script>\r\n\timport artStore from '../../stores/art-store'\r\n\timport HealthBar from './HealthBar.svelte'\r\n\r\n\tconst artScale = 2\r\n\r\n\texport let name\r\n\texport let maxHealth\r\n\texport let graphicStill\r\n\texport let graphicSpinning\r\n\r\n\texport let vx = 0\r\n\texport let vy = 0\r\n\texport let y = 0\r\n\texport let x = 0\r\n\r\n\texport let health\r\n\r\n\t$: graphic = spinning && graphicSpinning != null ? $artStore[graphicSpinning] : graphicStill != null ? $artStore[graphicStill] : null\r\n\r\n\texport let spinning = false\r\n\r\n\tlet direction = 1\r\n\t$: if (vx != 0) direction = vx > 0 ? 1 : -1\r\n\r\n\t$: rotate = spinning ? spinningRotation : -1 * (5 + (vy > 0 ? vy * 3 : vy * 1.5))\r\n\r\n\tlet spinningRotation = 0\r\n\tlet spinTimeout = null\r\n\t$: if (spinning) {\r\n\t\tspinTimeout = setTimeout(() => {\r\n\t\t\tspinningRotation += 30\r\n\t\t}, 25)\r\n\t} else {\r\n\t\tclearTimeout(spinTimeout)\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.player {\r\n\t\tposition: absolute;\r\n\t}\r\n</style>\r\n",
    "<div>\r\n\t<p>Level: {level.name}</p>\r\n\t<p>Score: {score}</p>\r\n</div>\r\n\r\n<script>\r\n\texport let level = {}\r\n\texport let score = 0\r\n</script>\r\n\r\n<style>\r\n\tdiv {\r\n\t\tposition: absolute;\r\n\t\tfont-size: 30px;\r\n\t\ttop: 10px;\r\n\t\tleft: 10px;\r\n\t\tcolor: #333;\r\n\t}\r\n\tp {\r\n\t\tmargin: 0;\r\n\t\tpadding: 0;\r\n\t}\r\n</style>\r\n",
    "<div class=\"viewport\" style=\"width: {width}px; height: {height}px; background: {background}\">\r\n\t<div style=\"position: absolute; left: {-x}px; bottom: {-y}px; height: {height}px;\">\r\n\t\t<slot />\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\texport let x = 0\r\n\texport let y = 0\r\n\texport let width = 0\r\n\texport let height = 0\r\n\texport let background = null\r\n</script>\r\n\r\n<style>\r\n\t.viewport {\r\n\t\tposition: relative;\r\n\t\toverflow: hidden;\r\n\t}\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "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"
}