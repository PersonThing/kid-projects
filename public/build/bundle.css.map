{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\Svg.svelte",
    "..\\..\\ColorPicker.svelte",
    "..\\..\\InputSelect.svelte",
    "..\\..\\QuickDropdown.svelte",
    "..\\..\\ArtMaker.svelte",
    "..\\..\\FieldCharacterPicker.svelte",
    "..\\..\\LevelBuilderDrawingTool.svelte",
    "..\\..\\LevelBuilderLayout.svelte",
    "..\\..\\Game.svelte",
    "..\\..\\GameOver.svelte",
    "..\\..\\HealthBar.svelte",
    "..\\..\\Instructions.svelte",
    "..\\..\\Level.svelte",
    "..\\..\\LevelPreview.svelte",
    "..\\..\\LivingSprite.svelte",
    "..\\..\\Status.svelte",
    "..\\..\\Viewport.svelte"
  ],
  "sourcesContent": [
    "<svg version=\"1.1\" class=\"fa-icon {className}\"\n  class:fa-spin={spin} class:fa-pulse={pulse} class:fa-inverse={inverse}\n  class:fa-flip-horizontal=\"{flip === 'horizontal'}\" class:fa-flip-vertical=\"{flip === 'vertical'}\"\n  {x} {y} {width} {height}\n  aria-label={label}\n  role=\"{ label ? 'img' : 'presentation' }\"\n  viewBox={box} style={style}\n  >\n  <slot></slot>\n</svg>\n\n<style>\n.fa-icon {\n  display: inline-block;\n  fill: currentColor;\n}\n.fa-flip-horizontal {\n  transform: scale(-1, 1);\n}\n.fa-flip-vertical {\n  transform: scale(1, -1);\n}\n.fa-spin {\n  animation: fa-spin 1s 0s infinite linear;\n}\n.fa-inverse {\n  color: #fff;\n}\n.fa-pulse {\n  animation: fa-spin 1s infinite steps(8);\n}\n@keyframes fa-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n</style>\n\n<script>\n  let className;\n\n  export { className as class };\n\n  export let width;\n  export let height;\n  export let box;\n\n  export let spin = false;\n  export let inverse = false;\n  export let pulse = false;\n  export let flip = null;\n\n  // optionals\n  export let x = undefined;\n  export let y = undefined;\n  export let style = undefined;\n  export let label = undefined;\n</script>\n",
    "<!-- <div class=\"color-picker\">\r\n\t{#each colors as color}\r\n\t\t<button\r\n\t\t\ttype=\"button\"\r\n\t\t\tstyle=\"background: {color != 'transparent' ? color : 'linear-gradient(110deg, rgba(200,200,200,1) 45%, rgba(255,255,255,1) 55%, rgba(255,255,255,1) 100%)'}\"\r\n\t\t\tclass:active={color == value}\r\n\t\t\ton:click={() => selectColor(color)} />\r\n\t{/each}\r\n</div> -->\r\n<QuickDropdown btnClass=\"color-picker-toggle\" noCaret anyItemClickCloses>\r\n\t<span slot=\"label\">\r\n\t\t<div data-test={name} class=\"color-choice\" style=\"background: {getBackground(value)}\" title=\"Change color\" />\r\n\t</span>\r\n\t<div class=\"color-picker-choices\">\r\n\t\t{#each colors as color}\r\n\t\t\t<div class=\"color-choice\" class:selected={value == color} on:click={() => select(color)} style=\"background: {getBackground(color)}\">\r\n\t\t\t\t{#if value == color}\r\n\t\t\t\t\t<Icon data={checkIcon} />\r\n\t\t\t\t{/if}\r\n\t\t\t</div>\r\n\t\t{/each}\r\n\t</div>\r\n</QuickDropdown>\r\n\r\n<script>\r\n\timport QuickDropdown from './QuickDropdown.svelte'\r\n\timport Icon from 'svelte-awesome'\r\n\timport { check as checkIcon } from 'svelte-awesome/icons'\r\n\r\n\texport let value = 'transparent'\r\n\r\n\tfunction select(color) {\r\n\t\tvalue = color\r\n\t}\r\n\r\n\tfunction getBackground(color) {\r\n\t\treturn color != 'transparent' ? color : 'repeating-linear-gradient(-45deg, transparent, #eee 10px)'\r\n\t}\r\n\r\n\t// random collection of colors kids requested.. lazy\r\n\tconst colors = [\r\n\t\t'transparent',\r\n\t\t'white',\r\n\t\t'rgb(204, 204, 204)',\r\n\t\t'rgb(160, 164, 160)',\r\n\t\t'rgb(102, 102, 102)',\r\n\t\t'rgb(51, 51, 51)',\r\n\t\t'black',\r\n\t\t'rgb(119, 59, 11)',\r\n\t\t'blue',\r\n\t\t'pink',\r\n\t\t'yellow',\r\n\t\t'orange',\r\n\t\t'purple',\r\n\t\t'teal',\r\n\t\t'green',\r\n\t\t'rgb(40, 40, 184)',\r\n\t\t'rgb(40, 80, 224)',\r\n\t\t'rgb(80, 80, 248)',\r\n\t\t'rgb(120, 124, 248)',\r\n\t\t'rgb(160, 0, 16)',\r\n\t\t'red',\r\n\t\t'rgb(248, 0, 32)',\r\n\t\t'rgb(208, 124, 96)',\r\n\t\t'rgb(248, 208, 176)',\r\n\t\t'rgb(253, 240, 232)',\r\n\t\t'rgb(245, 222, 208)',\r\n\t\t'rgb(220, 201, 187)',\r\n\t\t'rgb(197, 179, 167)',\r\n\t\t'rgb(186, 167, 153)',\r\n\t\t'rgb(146, 129, 119)',\r\n\t\t'rgb(120, 107, 99)',\r\n\t\t'rgb(80, 68, 68)',\r\n\t\t'rgb(122, 80, 55)',\r\n\t\t'rgb(178, 105, 58)',\r\n\t\t'rgb(203, 140, 97)',\r\n\t\t'rgb(238, 187, 155)',\r\n\t\t'rgb(75, 53, 39)',\r\n\t]\r\n</script>\r\n\r\n<style lang=\"scss\">:global(.color-picker-toggle .color-choice) {\n  -webkit-box-shadow: 0 1px 10px 4px rgba(0, 0, 0, 0.08);\n  -moz-box-shadow: 0 1px 10px 4px rgba(0, 0, 0, 0.08);\n  box-shadow: 0 1px 10px 4px rgba(0, 0, 0, 0.08); }\n\n.color-choice {\n  float: left;\n  vertical-align: top;\n  min-width: 48px;\n  position: relative;\n  height: 100%;\n  color: #fff;\n  text-align: center;\n  padding: 12px 15px;\n  cursor: pointer; }\n  .color-choice:focus {\n    outline: none; }\n\n.color-picker-choices {\n  width: 347px;\n  overflow: auto;\n  padding: 5px; }\n  .color-picker-choices .color-choice {\n    height: 30px;\n    padding: 2px 15px;\n    z-index: 9;\n    color: #fff; }\n    .color-picker-choices .color-choice:hover, .color-picker-choices .color-choice.selected {\n      -webkit-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 1px 15px 4px rgba(0, 0, 0, 0.14);\n      -moz-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 1px 15px 4px rgba(0, 0, 0, 0.14);\n      box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 1px 15px 4px rgba(0, 0, 0, 0.14);\n      z-index: 10;\n      transform: scale(1.25); }\n</style>\r\n",
    "<div class=\"select\" class:inline class:disabled bind:this={container} data-test={name} id={name}>\r\n\t<div\r\n\t\tclass=\"btn btn-light {className}\"\r\n\t\tclass:btn-sm={sm}\r\n\t\tdata-test=\"{name}-btn\"\r\n\t\tclass:open={isOpen}\r\n\t\t{tabindex}\r\n\t\ton:click={open}\r\n\t\ton:focus={open}\r\n\t\ton:keydown={keyListener}\r\n\t\tbind:this={fakeField}>\r\n\t\t<div class=\"input-select-content\">\r\n\t\t\t{#if selectedOptions.length === 0 || (!multiple && selectedOptions[0].value)}{prefixLabel}{/if}\r\n\t\t\t{#each selectedOptions as option, index (option)}\r\n\t\t\t\t{#if multiple}\r\n\t\t\t\t\t{#if index > 0},{inline && index == selectedOptions.length - 1 ? ' and' : ''}{/if}\r\n\t\t\t\t\t<span class=\"select-input-text\">\r\n\t\t\t\t\t\t<slot {option}>\r\n\t\t\t\t\t\t\t{@html option.label}\r\n\t\t\t\t\t\t</slot>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t{:else}\r\n\t\t\t\t\t<span class=\"select-input-text\">\r\n\t\t\t\t\t\t<slot {option}>\r\n\t\t\t\t\t\t\t{@html option.label}\r\n\t\t\t\t\t\t</slot>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t{/if}\r\n\t\t\t{/each}\r\n\t\t\t{#if selectedOptions == null || selectedOptions.length === 0}\r\n\t\t\t\t<span class=\"select-input-text\">{placeholder != null ? placeholder : ''}</span>\r\n\t\t\t{/if}\r\n\t\t</div>\r\n\t\t<span class=\"dropdown-icon\">\r\n\t\t\t<Icon data={caretDownIcon} class=\"fw\" />\r\n\t\t</span>\r\n\t</div>\r\n\r\n\t{#if isOpen && !disabled}\r\n\t\t<div class=\"select-dropdown\">\r\n\t\t\t{#if filterable}\r\n\t\t\t\t<div class=\"filter\">\r\n\t\t\t\t\t<div class=\"input-group\">\r\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" bind:value={filter} placeholder={filterPlaceholder} autofocus on:keydown={keyListener} />\r\n\t\t\t\t\t\t<a class=\"input-group-addon\" on:click|preventDefault={() => (filter = '')} href=\"/\" tabindex=\"-1\">\r\n\t\t\t\t\t\t\t<Icon data={removeIcon} class=\"fw\" />\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t{/if}\r\n\t\t\t{#each filteredOptions as option, index}\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"item\"\r\n\t\t\t\t\tclass:selected={option.selected}\r\n\t\t\t\t\tclass:viewing={viewIndex == index}\r\n\t\t\t\t\tclass:disabled={option.disabled}\r\n\t\t\t\t\ton:click={() => (option.disabled ? null : toggle(option, index))}>\r\n\t\t\t\t\t<slot {option}>\r\n\t\t\t\t\t\t{@html option.label}\r\n\t\t\t\t\t</slot>\r\n\t\t\t\t</div>\r\n\t\t\t{:else}\r\n\t\t\t\t{#if filter != null && filter.length > 0}\r\n\t\t\t\t\t<div class=\"alert alert-warning\">No options match \"{filter}\"</div>\r\n\t\t\t\t{/if}\r\n\t\t\t{/each}\r\n\t\t</div>\r\n\t{/if}\r\n</div>\r\n\r\n<script>\r\n\timport Icon from 'svelte-awesome'\r\n\timport { remove as removeIcon, caretDown as caretDownIcon } from 'svelte-awesome/icons'\r\n\r\n\timport _filter from '../services/filter'\r\n\timport validator from '../services/validator'\r\n\timport { tick, getContext, createEventDispatcher } from 'svelte'\r\n\r\n\tconst dispatch = createEventDispatcher()\r\n\r\n\texport let name = null\r\n\texport let multiple = false\r\n\texport let prefixLabel = ''\r\n\r\n\t// placeholder for the main input\r\n\texport let placeholder = ''\r\n\r\n\t// pass an array of options\r\n\t// can be either simple values, or { value, label } objects\r\n\texport let options = null\r\n\r\n\t// optionally set what prop to use for an option's value.\r\n\t// by default we use 'option.value' if it's defined, else we use the option itself (assuming it to be a simple value type)\r\n\texport let valueProp = null\r\n\r\n\t// optionally set what prop to use for an option's label if you don't want to define a custom renderer.\r\n\t// by default we use 'option.label' if it's defined, else we use the option itself (assuming it to be a simple value type)\r\n\texport let labelProp = null\r\n\r\n\t// pass either a simple value, or an array of values if multiple\r\n\texport let value = null\r\n\tconst initialValue = value\r\n\r\n\tconst markDirty = getContext('markDirty')\r\n\t$: if (markDirty != null && value != null && !validator.equals(value, initialValue)) markDirty()\r\n\r\n\t// set filterable to true to allow filtering\r\n\texport let filterable = false\r\n\r\n\t// programmatically open if you want\r\n\texport let isOpen = false\r\n\r\n\t// prevents user from interacting\r\n\texport let disabled = false\r\n\r\n\t// class will get added to the form-control, for if you want to do form-control-lg, form-control-sm, etc to match the rest of your form\r\n\tlet className = ''\r\n\texport { className as class }\r\n\r\n\t// whether to display it inline\r\n\texport let inline = false\r\n\r\n\texport let sm = false\r\n\r\n\tlet container = null\r\n\tlet fakeField = null\r\n\r\n\tconst tabindex = 0\r\n\r\n\t// you can also pass filter to preemptively filter options\r\n\texport let filter = ''\r\n\r\n\t// placeholder for the filter input\r\n\texport let filterPlaceholder = 'Filter'\r\n\r\n\t// option we're currently viewing w/ keyboard navigation\r\n\tlet viewIndex = -1\r\n\r\n\t// options to render, filtered if necessary\r\n\t$: filteredOptions = (() => {\r\n\t\tconst arr = optionsToArray(options, value)\r\n\t\treturn !filterable ? arr : _filter(arr, filter)\r\n\t})()\r\n\r\n\t// keep viewIndex within filteredOptions length\r\n\t$: {\r\n\t\tif (viewIndex > filteredOptions.length - 1) viewIndex = filteredOptions.length - 1\r\n\t\tif (viewIndex < -1) viewIndex = filterable ? -1 : -1\r\n\t}\r\n\r\n\t// if multiple...\r\n\t// make sure value is always array\r\n\t// make sure value is always sorted to match option order - just nice to pass the same order around regardless of user click order\r\n\t$: if (multiple && value) makeValueArray()\r\n\r\n\t// options to render in the selected box (so we can use the same slot logic)\r\n\t$: selectedOptions = optionsToArray(options, value).filter(option => (multiple ? value && value.indexOf(option.value) > -1 : value == option.value))\r\n\r\n\tfunction makeValueArray() {\r\n\t\tif (!Array.isArray(value)) value = [value]\r\n\t\telse\r\n\t\t\tvalue = optionsToArray(options, value)\r\n\t\t\t\t.filter(o => o.selected)\r\n\t\t\t\t.map(option => option.value)\r\n\t}\r\n\r\n\tfunction optionsToArray(_options, v) {\r\n\t\tconst arr =\r\n\t\t\t_options == null\r\n\t\t\t\t? []\r\n\t\t\t\t: _options.map(o => {\r\n\t\t\t\t\t\tconst isString = typeof o === 'string'\r\n\t\t\t\t\t\t// in case they pass a custom object with other keys they need in a custom label, we destructure the original option object\r\n\t\t\t\t\t\tconst option = isString ? {} : { ...o }\r\n\t\t\t\t\t\toption.value = isString ? o : valueProp != null ? o[valueProp] : o.value !== undefined ? o.value : o\r\n\t\t\t\t\t\toption.label = isString ? o : o[labelProp] !== undefined ? o[labelProp] : o.label !== undefined ? o.label : o\r\n\t\t\t\t\t\toption.selected = multiple ? v != null && v.indexOf(option.value) > -1 : v == option.value\r\n\t\t\t\t\t\toption.disabled = o.disabled === undefined ? false : o.disabled\r\n\t\t\t\t\t\treturn option\r\n\t\t\t\t  })\r\n\t\treturn arr\r\n\t}\r\n\r\n\tfunction toggle(option, setViewIndex) {\r\n\t\tif (multiple) {\r\n\t\t\tvalue = option.selected ? (value || []).filter(v => v != option.value) : (value || []).concat(option.value)\r\n\t\t\t// if user clicked an option in multi-select, refocus the fakeField\r\n\t\t\tif (document.activeElement != fakeField) focusField()\r\n\t\t} else {\r\n\t\t\tvalue = option.value\r\n\t\t\tclose()\r\n\t\t}\r\n\t\tif (setViewIndex != null) viewIndex = setViewIndex\r\n\t\tdispatch('change')\r\n\t}\r\n\r\n\tasync function open() {\r\n\t\tif (disabled) return\r\n\t\tisOpen = true\r\n\t\tconst selected = multiple ? (value != null && value.length > 0 ? value[0] : null) : value\r\n\t\tviewIndex = selected != null ? filteredOptions.findIndex(o => o.value === selected) : -1\r\n\t\tdocument.addEventListener('mousedown', clickListener)\r\n\t\tdocument.addEventListener('touchstart', clickListener)\r\n\t\tawait tick()\r\n\t\tif (isOpen) focusField()\r\n\t}\r\n\r\n\tfunction close() {\r\n\t\t// focus the non-field so tabbing/shift-tabbing works after close\r\n\t\tfocusField()\r\n\t\tisOpen = false\r\n\t\tdocument.removeEventListener('mousedown', clickListener)\r\n\t\tdocument.removeEventListener('touchstart', clickListener)\r\n\t}\r\n\r\n\tfunction keyListener(e) {\r\n\t\t// if tab, close and let them out\r\n\t\tif (e.code == 'Tab') {\r\n\t\t\tclose()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// otherwise, if we're not open, any key should open\r\n\t\tif (!isOpen) {\r\n\t\t\t// except shift, so shift-tab doesn't open before closing immediately anyway\r\n\t\t\t// and up, cuz it feels weird\r\n\t\t\tif (e.code == 'ShiftLeft' || e.code == 'ShiftRight' || e.code == 'ArrowUp') return\r\n\r\n\t\t\topen()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// otherwise, handle a few keys for navigating options and toggling them\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'Escape':\r\n\t\t\t\te.stopPropagation()\r\n\t\t\t\tclose()\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase 'Space':\r\n\t\t\tcase 'Enter':\r\n\t\t\t\tif (viewIndex != null && filteredOptions[viewIndex] != null) {\r\n\t\t\t\t\ttoggle(filteredOptions[viewIndex])\r\n\t\t\t\t\te.preventDefault()\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase 'ArrowUp':\r\n\t\t\t\tviewIndex--\r\n\t\t\t\tif ((filterable && viewIndex == -2) || (!filterable && viewIndex <= -1)) close()\r\n\r\n\t\t\t\te.preventDefault()\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase 'ArrowDown':\r\n\t\t\t\tif (!isOpen) open()\r\n\t\t\t\telse if (viewIndex < filteredOptions.length - 1) viewIndex++\r\n\t\t\t\te.preventDefault()\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\tfunction clickListener(e) {\r\n\t\tif (e.target.closest == null || e.target.closest('.select') !== container) close()\r\n\t}\r\n\r\n\tfunction focusField() {\r\n\t\tif (fakeField && !filterable) fakeField.focus()\r\n\t}\r\n</script>\r\n\r\n<style lang=\"scss\">.select {\n  position: relative;\n  cursor: pointer; }\n  .select.inline {\n    display: inline-block;\n    vertical-align: top; }\n    .select.inline .select-dropdown .item {\n      white-space: nowrap; }\n  .select .btn {\n    display: flex;\n    flex-direction: row;\n    align-items: center; }\n    .select .btn .dropdown-icon {\n      margin-left: 0.6rem; }\n    .select .btn .select-input-text {\n      display: inline-block; }\n    .select .btn .input-select-content {\n      text-align: left;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      flex: 1; }\n  .select.disabled {\n    cursor: not-allowed; }\n    .select.disabled .input-select {\n      background-color: #f0f0f0;\n      color: #aaa; }\n\n.select-dropdown {\n  min-width: 100%;\n  position: absolute;\n  border-bottom: none;\n  border-top: none;\n  z-index: 1055;\n  top: 100%;\n  left: 0;\n  -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\n  background-color: #fff; }\n  .select-dropdown > .filter {\n    padding: 2px; }\n  .select-dropdown > .item {\n    cursor: pointer;\n    border-bottom: 1px solid #efefef;\n    padding: 8px 16px;\n    min-width: 150px; }\n    .select-dropdown > .item:hover, .select-dropdown > .item.viewing {\n      /*when hovering an item or when navigating through the items using the arrow keys*/\n      background-color: #eee; }\n    .select-dropdown > .item.selected {\n      background-color: #007bff;\n      color: #ffffff; }\n      .select-dropdown > .item.selected.viewing {\n        background-color: #006fe6; }\n    .select-dropdown > .item.disabled {\n      background-color: #f0f0f0;\n      color: #aaa;\n      cursor: not-allowed; }\n\n:global(.fw) {\n  width: 1.5em; }\n</style>\r\n",
    "<div bind:this={dropdownElement} class=\"quick-dropdown {className}\" data-test={dataTest}>\r\n\t<a\r\n\t\tclass={btnClass}\r\n\t\tclass:btn-default={!invalid}\r\n\t\tclass:btn-danger={invalid}\r\n\t\tclass:invalid={invalid && !isOpen}\r\n\t\tclass:disabled\r\n\t\t{id}\r\n\t\ton:click|preventDefault={toggle}\r\n\t\thref=\"/\"\r\n\t\ton:keydown={keydown}\r\n\t\t{tabindex}\r\n\t\tbind:this={buttonElement}>\r\n\t\t<slot name=\"label\">\r\n\t\t\t{#if label != null}\r\n\t\t\t\t<span>\r\n\t\t\t\t\t{@html label}\r\n\t\t\t\t</span>\r\n\t\t\t{/if}\r\n\t\t</slot>\r\n\t\t{#if !noCaret}\r\n\t\t\t<Icon data={caretDownIcon} />\r\n\t\t{/if}\r\n\t</a>\r\n\t{#if isOpen}\r\n\t\t<div class=\"quick-dropdown-menu {dropdownClass}\" bind:this={dropdownMenuElement} on:click={closeIfAnyClickCloses}>\r\n\t\t\t<slot />\r\n\t\t</div>\r\n\t{/if}\r\n</div>\r\n\r\n<script>\r\n\timport { createEventDispatcher, onDestroy } from 'svelte'\r\n\timport Icon from 'svelte-awesome'\r\n\timport { caretDown as caretDownIcon } from 'svelte-awesome/icons'\r\n\r\n\texport let btnTitle = null\r\n\texport let isOpen = false\r\n\texport let dataTest = null\r\n\texport { className as class }\r\n\texport let btnClass = 'btn btn-light btn-sm'\r\n\texport let dropdownClass = 'below left'\r\n\texport let anyItemClickCloses = false\r\n\texport let noCaret = false\r\n\texport let icon = null\r\n\texport let autofocusFirstItem = false\r\n\texport let disabled = false\r\n\texport let label = null\r\n\texport let id = null\r\n\texport let invalid = false\r\n\r\n\tconst dispatch = createEventDispatcher()\r\n\tconst tabindex = 0\r\n\tlet dropdownElement = null\r\n\tlet buttonElement = null\r\n\tlet dropdownMenuElement = null\r\n\tlet className = ''\r\n\tlet lastMouseDownTarget = null\r\n\r\n\tonDestroy(close)\r\n\r\n\t$: if (isOpen) open()\r\n\telse close()\r\n\r\n\tfunction open() {\r\n\t\tisOpen = true\r\n\t\t// wait for next event loop (not just micro task as in tick()) so menu element is rendered\r\n\t\tsetTimeout(() => {\r\n\t\t\tif (autofocusFirstItem && dropdownMenuElement != null) {\r\n\t\t\t\tconst item = dropdownMenuElement.querySelector('input, label, a')\r\n\t\t\t\tif (item != null) item.focus()\r\n\t\t\t}\r\n\t\t\tdispatch('open')\r\n\t\t\tdocument.addEventListener('mousedown', trackLastMouseDownTarget)\r\n\t\t\tdocument.addEventListener('click', clickListener)\r\n\t\t})\r\n\t}\r\n\r\n\tfunction close() {\r\n\t\tdispatch('close')\r\n\t\tisOpen = false\r\n\t\tdocument.removeEventListener('mousedown', trackLastMouseDownTarget)\r\n\t\tdocument.removeEventListener('click', clickListener)\r\n\t}\r\n\r\n\tfunction trackLastMouseDownTarget(e) {\r\n\t\tlastMouseDownTarget = e.target\r\n\t}\r\n\r\n\tfunction clickListener() {\r\n\t\t// for click events, e.target is the last element the mouse was on, so use the element they initially put their mouse down on instead.\r\n\t\t// wait til they finish the click to determine if we need to close it or not, so that click handlers can fire before we close\r\n\t\t// e.g. if they select all text in a box with mouse and end their \"click\" outside the menu, don't close\r\n\t\tif (dropdownMenuElement == null || lastMouseDownTarget == null) return\r\n\r\n\t\t// if the element has since been removed from DOM, assume don't close--e.g. open an date picker, select date, calendar goes away, should keep quickdropdown open\r\n\t\tif (!document.body.contains(lastMouseDownTarget)) return\r\n\r\n\t\tconst clickedMenu = dropdownMenuElement === lastMouseDownTarget || dropdownMenuElement.contains(lastMouseDownTarget)\r\n\t\tif (!clickedMenu) {\r\n\t\t\t// console.log('closing', clickedMenu, anyItemClickCloses, dropdownMenuElement, lastMouseDownTarget, e.target)\r\n\t\t\tclose()\r\n\t\t}\r\n\t}\r\n\r\n\tfunction closeIfAnyClickCloses() {\r\n\t\tif (anyItemClickCloses) setTimeout(close, 0) // wait a bit so click registers prior to closing\r\n\t}\r\n\r\n\tfunction toggle() {\r\n\t\tisOpen ? close() : open()\r\n\t}\r\n\r\n\tfunction keydown(e) {\r\n\t\tconst key = e.which || e.keyCode\r\n\t\tswitch (key) {\r\n\t\t\tcase 13: // enter\r\n\t\t\tcase 32: // space\r\n\t\t\tcase 40: // down\r\n\t\t\t\topen()\r\n\t\t\t\te.preventDefault()\r\n\t\t\t\treturn\r\n\t\t\tcase 27: // esc\r\n\t\t\tcase 9: // tab\r\n\t\t\tcase 38: // up\r\n\t\t\t\tclose()\r\n\t\t\t\treturn\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style lang=\"scss\">.quick-dropdown {\n  position: relative; }\n  .quick-dropdown .quick-dropdown-menu {\n    border: none;\n    padding: 0;\n    border-radius: 4px;\n    position: absolute;\n    z-index: 10;\n    white-space: nowrap;\n    background: #fff;\n    -webkit-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 1px 15px 4px rgba(0, 0, 0, 0.14);\n    -moz-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 1px 15px 4px rgba(0, 0, 0, 0.14);\n    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 1px 15px 4px rgba(0, 0, 0, 0.14); }\n    .quick-dropdown .quick-dropdown-menu .list-group {\n      margin-bottom: 0; }\n    .quick-dropdown .quick-dropdown-menu .list-group-item.active {\n      background-color: #007bff; }\n\n.below {\n  top: 100%; }\n\n.left {\n  left: 0; }\n</style>\r\n",
    "<svelte:window on:keyup={onKeyUp} />\r\n\r\n<LevelBuilderLayout tab=\"art\" activeName={input.name} store={$artStore}>\r\n\t<Form on:submit={save} {hasChanges}>\r\n\t\t<span slot=\"buttons\" class=\"flex\">\r\n\t\t\t<input type=\"text\" class=\"form-control width-auto\" id=\"name\" name=\"name\" bind:value={input.name} bind:this={nameField} />\r\n\r\n\t\t\t{#if !isAdding}\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-danger\" on:click={() => del(input.name)}>Delete</button>\r\n\t\t\t{/if}\r\n\t\t</span>\r\n\r\n\t\t<div class=\"toolbar flex align-center\">\r\n\t\t\t<div class=\"btn-group\">\r\n\t\t\t\t<ColorPicker bind:value={selectedColor} />\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-sm btn-{mode == 'paint' ? 'primary' : 'light'}\" on:click={() => (mode = 'paint')}>\r\n\t\t\t\t\t<Icon data={paintIcon} />\r\n\t\t\t\t</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-sm btn-{mode == 'fill' ? 'primary' : 'light'}\" on:click={() => (mode = 'fill')}>\r\n\t\t\t\t\t<Icon data={fillIcon} />\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\r\n\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={reset}>Start over</button>\r\n\r\n\t\t\t<div class=\"btn-group\">\r\n\t\t\t\t<button type=\"button\" disabled={undos.length == 0} class=\"btn btn-default btn-sm\" on:click={undo}>\r\n\t\t\t\t\t<Icon data={undoIcon} />\r\n\t\t\t\t\t{undos.length > 0 ? undos.length : ''}\r\n\t\t\t\t</button>\r\n\t\t\t\t<button type=\"button\" disabled={redos.length == 0} class=\"btn btn-default btn-sm\" on:click={redo}>\r\n\t\t\t\t\t<Icon data={undoIcon} flip=\"horizontal\" />\r\n\t\t\t\t\t{redos.length > 0 ? redos.length : ''}\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div class=\"btn-group\">\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={flipX} title=\"Flip horizontal\">\r\n\t\t\t\t\t<Icon data={flipIcon} />\r\n\t\t\t\t</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={flipY} title=\"Flip vertical\">\r\n\t\t\t\t\t<Icon data={flipIcon} style=\"transform: rotate(90deg);\" />\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div class=\"btn-group\">\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={moveLeft} title=\"Move left\">\r\n\t\t\t\t\t<Icon data={arrowLeftIcon} />\r\n\t\t\t\t</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={moveRight} title=\"Move right\">\r\n\t\t\t\t\t<Icon data={arrowRightIcon} />\r\n\t\t\t\t</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={moveUp} title=\"Move up\">\r\n\t\t\t\t\t<Icon data={arrowUpIcon} />\r\n\t\t\t\t</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={moveDown} title=\"Move down\">\r\n\t\t\t\t\t<Icon data={arrowDownIcon} />\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div class=\"flex-column\">\r\n\t\t\t\tHeight\r\n\t\t\t\t<input type=\"number\" bind:value={input.height} placeholder=\"Height\" />\r\n\t\t\t</div>\r\n\t\t\t<div class=\"flex-column\">\r\n\t\t\t\tWidth\r\n\t\t\t\t<input type=\"number\" bind:value={input.width} placeholder=\"Width\" />\r\n\t\t\t</div>\r\n\t\t\t<label>\r\n\t\t\t\t<input type=\"checkbox\" bind:checked={showGrid} />\r\n\t\t\t\tShow grid\r\n\t\t\t</label>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"flex my-3 align-top\">\r\n\t\t\t<canvas\r\n\t\t\t\tclass:paint-cursor={mode == 'paint'}\r\n\t\t\t\tclass:fill-cursor={mode == 'fill'}\r\n\t\t\t\tbind:this={drawCanvas}\r\n\t\t\t\twidth={input.width * gridSize}\r\n\t\t\t\theight={input.height * gridSize}\r\n\t\t\t\ton:mousedown|preventDefault={onDrawMouseDown}\r\n\t\t\t\ton:mouseup|preventDefault={onDrawMouseUp}\r\n\t\t\t\ton:mousemove|preventDefault={onDrawMouseMove}\r\n\t\t\t\ton:contextmenu|preventDefault />\r\n\t\t\t<div class=\"preview flex\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<img src={previewPNG} alt=\"preview\" class=\"drop-shadow\" />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- if block size, show repeated in x and y-->\r\n\t\t\t\t{#if input.width == 20 && input.height == 20}\r\n\t\t\t\t\t<div class=\"ml-2\">\r\n\t\t\t\t\t\t{#each [0, 0] as r}\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t{#each [0, 0, 0] as margin}\r\n\t\t\t\t\t\t\t\t\t<img src={previewPNG} alt=\"block repeating preview\" />\r\n\t\t\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t{/if}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</Form>\r\n\r\n</LevelBuilderLayout>\r\n\r\n<script>\r\n\timport { push } from 'svelte-spa-router'\r\n\timport ColorPicker from '../../components/ColorPicker.svelte'\r\n\timport FieldText from './components/FieldText.svelte'\r\n\timport Form from './components/Form.svelte'\r\n\timport LevelBuilderLayout from './components/LevelBuilderLayout.svelte'\r\n\timport toPNG from '../../services/to-png'\r\n\timport validator from '../../services/validator'\r\n\timport Icon from 'svelte-awesome'\r\n\timport artStore from '../../stores/art-store'\r\n\timport {\r\n\t\tarrowLeft as arrowLeftIcon,\r\n\t\tarrowRight as arrowRightIcon,\r\n\t\tarrowUp as arrowUpIcon,\r\n\t\tarrowDown as arrowDownIcon,\r\n\t\tundo as undoIcon,\r\n\t\tpaintBrush as paintBrushIcon,\r\n\t} from 'svelte-awesome/icons'\r\n\timport { faFillDrip as fillIcon, faPaintBrush as paintIcon, faExchangeAlt as flipIcon } from '@fortawesome/free-solid-svg-icons'\r\n\timport { null_to_empty } from 'svelte/internal'\r\n\r\n\texport let params = {}\r\n\tlet input\r\n\tcreate()\r\n\r\n\tlet mode = 'paint'\r\n\tlet drawCanvas\r\n\tlet undos = []\r\n\tlet redos = []\r\n\tlet mouseDown = false\r\n\tlet showGrid = true\r\n\tlet gridSize = 25\r\n\tlet drawContext\r\n\tlet nameField\r\n\tlet savedInput\r\n\tlet selectedColor = 'black'\r\n\r\n\t$: paramName = decodeURIComponent(params.name) || 'new'\r\n\t$: paramName == 'new' ? create() : edit(paramName)\r\n\t$: isAdding = paramName == 'new'\r\n\t$: previewPNG = toPNG(input.data, input.width, input.height)\r\n\t$: drawResult = draw(input.data, input.width, input.height)\r\n\t$: if (input.width != 0 && input.height != 0 && showGrid) redraw()\r\n\t$: hasChanges = input != null && !validator.equals(input, $artStore[input.name])\r\n\r\n\tfunction create() {\r\n\t\tinput = {\r\n\t\t\tname: '',\r\n\t\t\twidth: 20,\r\n\t\t\theight: 20,\r\n\t\t\tdata: buildData(20, 20),\r\n\t\t}\r\n\t\tsetTimeout(() => {\r\n\t\t\tnameField.focus()\r\n\t\t}, 100)\r\n\t}\r\n\r\n\tfunction edit(name) {\r\n\t\tif (!$artStore.hasOwnProperty(name)) return\r\n\r\n\t\tundos = []\r\n\t\tredos = []\r\n\r\n\t\tinput = JSON.parse(JSON.stringify($artStore[name]))\r\n\t\tinput.width = input.width || input.data[0].length\r\n\t\tinput.height = input.height || input.data.length\r\n\r\n\t\tredraw()\r\n\t}\r\n\r\n\tfunction save() {\r\n\t\tif (validator.empty(input.name)) {\r\n\t\t\tdocument.getElementById('name').focus()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tinput.png = toPNG(input.data, input.width, input.height)\r\n\r\n\t\t$artStore[input.name] = JSON.parse(JSON.stringify(input))\r\n\t\tpush(`/level-builder/art/${encodeURIComponent(input.name)}`)\r\n\t}\r\n\r\n\tfunction del(name) {\r\n\t\tif (confirm(`Are you sure you want to delete \"${name}\"?`)) {\r\n\t\t\tdelete $artStore[name]\r\n\t\t\t$artStore = $artStore\r\n\t\t\tpush('/level-builder/art/new')\r\n\t\t}\r\n\t}\r\n\r\n\tfunction reset(undoable = true) {\r\n\t\tif (undoable) addUndoState()\r\n\t\tinput.data = buildData(input.height, input.width)\r\n\t}\r\n\r\n\tfunction draw(d, w, h) {\r\n\t\tif (d == null || drawCanvas == null) return\r\n\t\tif (drawContext == null) drawContext = drawCanvas.getContext('2d')\r\n\r\n\t\tdrawContext.clearRect(0, 0, w * gridSize, h * gridSize)\r\n\t\tfor (let y = 0; y < h; y++) {\r\n\t\t\tfor (let x = 0; x < w; x++) {\r\n\t\t\t\tdrawContext.beginPath()\r\n\t\t\t\tdrawContext.rect(x * gridSize, y * gridSize, gridSize, gridSize)\r\n\t\t\t\tdrawContext.fillStyle = getCellColor(d, y, x)\r\n\t\t\t\tdrawContext.fill()\r\n\t\t\t\tif (showGrid) {\r\n\t\t\t\t\tdrawContext.strokeStyle = '#eee'\r\n\t\t\t\t\tdrawContext.stroke()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction redraw() {\r\n\t\tsetTimeout(() => draw(input.data, input.width, input.height, gridSize), 10)\r\n\t}\r\n\r\n\tfunction onDrawMouseDown(e) {\r\n\t\tconst color = getColorAtEvent(e)\r\n\t\tif (e.altKey || e.button !== 0) {\r\n\t\t\tselectedColor = color\r\n\t\t} else {\r\n\t\t\taddUndoState()\r\n\t\t\tmouseDown = true\r\n\t\t\tonDrawMouseMove(e)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onDrawMouseUp(e) {\r\n\t\tmouseDown = false\r\n\t}\r\n\r\n\tfunction onDrawMouseMove(e) {\r\n\t\tif (!mouseDown) return\r\n\t\tconst { x, y } = getEventCellIndexes(e)\r\n\t\tif (y != null && x != null) setColor(y, x, selectedColor)\r\n\t}\r\n\r\n\tfunction getEventCellIndexes(e) {\r\n\t\treturn {\r\n\t\t\tx: Math.floor(e.offsetX / gridSize),\r\n\t\t\ty: Math.floor(e.offsetY / gridSize),\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getColorAtEvent(e) {\r\n\t\t// could probably get this directly from canvas / getPixel stuff\r\n\t\tconst { x, y } = getEventCellIndexes(e)\r\n\t\treturn input.data[y][x] || 'transparent'\r\n\t}\r\n\r\n\tfunction addUndoState() {\r\n\t\tundos = [...undos.slice(Math.max(undos.length - 20, 0)), JSON.stringify(input.data)]\r\n\r\n\t\t// if we're adding a new undo state, empty redos\r\n\t\tredos = []\r\n\t}\r\n\r\n\tfunction buildData(height, width) {\r\n\t\treturn [...Array(height)].map(r => buildColumns(width))\r\n\t}\r\n\r\n\tfunction buildColumns(width) {\r\n\t\treturn [...Array(width)].map(c => 'transparent')\r\n\t}\r\n\r\n\tfunction undo() {\r\n\t\tif (undos.length == 0) return\r\n\r\n\t\tredos = [...redos, JSON.stringify(input.data)]\r\n\t\tinput.data = JSON.parse(undos.pop())\r\n\t\tundos = undos\r\n\t}\r\n\r\n\tfunction redo() {\r\n\t\tif (redos.length == 0) return\r\n\r\n\t\tundos = [...undos, JSON.stringify(input.data)]\r\n\t\tinput.data = JSON.parse(redos.pop())\r\n\t\tredos = redos\r\n\t}\r\n\r\n\tfunction setColor(y, x, color) {\r\n\t\tsyncDataToSize()\r\n\r\n\t\t// don't need to worry about columns.. they get auto-filled with null\r\n\t\tconst oldColor = input.data[y][x] || 'transparent'\r\n\t\tinput.data[y][x] = color\r\n\r\n\t\tif (mode == 'fill') {\r\n\t\t\t// recursively loop around this pixel setting pixels that were the same color this one used to be to the new color\r\n\t\t\t// needs revision\r\n\t\t\t// right now it works well for filling outlines, but overfills through outlines that only touch on corners\r\n\t\t\tfor (let yn = y - 1; yn <= y + 1; yn++) {\r\n\t\t\t\tfor (let xn = x - 1; xn <= x + 1; xn++) {\r\n\t\t\t\t\tif (yn < 0 || yn > input.height - 1 || xn < 0 || xn > input.width - 1) continue\r\n\t\t\t\t\tconst currentColor = input.data[yn][xn] || 'transparent'\r\n\t\t\t\t\tif (currentColor == oldColor) setColor(yn, xn, color)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getCellColor(d, row, column) {\r\n\t\treturn d.length > row && d[row].length > column ? d[row][column] || 'transparent' : 'white'\r\n\t}\r\n\r\n\tfunction onKeyUp(e) {\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'KeyZ':\r\n\t\t\t\tif (e.ctrlKey) undo()\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyY':\r\n\t\t\t\tif (e.ctrlKey) redo()\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\tfunction flipY() {\r\n\t\tinput.data = input.data.slice(0, input.height).reverse()\r\n\t}\r\n\r\n\tfunction flipX() {\r\n\t\tinput.data = input.data.map(d => d.slice(0, input.width).reverse())\r\n\t}\r\n\r\n\tfunction moveLeft() {\r\n\t\taddUndoState()\r\n\t\tsyncDataToSize()\r\n\t\tinput.data = input.data.map(row => {\r\n\t\t\tconst firstCol = row.shift()\r\n\t\t\treturn [...row, firstCol]\r\n\t\t})\r\n\t}\r\n\r\n\tfunction moveRight() {\r\n\t\taddUndoState()\r\n\t\tsyncDataToSize()\r\n\t\tinput.data = input.data.map(row => {\r\n\t\t\tconst lastCol = row.pop()\r\n\t\t\treturn [lastCol, ...row]\r\n\t\t})\r\n\t}\r\n\r\n\tfunction moveUp() {\r\n\t\taddUndoState()\r\n\t\tsyncDataToSize()\r\n\t\tconst firstRow = input.data.shift()\r\n\t\tinput.data = [...input.data, firstRow]\r\n\t}\r\n\r\n\tfunction moveDown() {\r\n\t\taddUndoState()\r\n\t\tsyncDataToSize()\r\n\t\tconst lastRow = input.data.pop()\r\n\t\tinput.data = [lastRow, ...input.data]\r\n\t}\r\n\r\n\tfunction syncDataToSize() {\r\n\t\tif (input.height > input.data.length) {\r\n\t\t\t// add empty rows\r\n\t\t\tconst rowsNeeded = input.height - input.data.length\r\n\t\t\tinput.data = input.data.concat(buildData(rowsNeeded, input.width))\r\n\t\t\t// } else if (input.height < input.data.length) {\r\n\t\t\t// \t// crop unnecessary rows\r\n\t\t\t// \tinput.data.slice(0, input.height)\r\n\t\t}\r\n\r\n\t\t// make sure all rows are the right length\r\n\t\tinput.data = input.data.map(row => {\r\n\t\t\tif (input.width > row.length) {\r\n\t\t\t\tconst colsNeeded = input.width - row.length\r\n\t\t\t\trow = row.concat(buildColumns(colsNeeded))\r\n\t\t\t\t// } else if (input.width < row.length) {\r\n\t\t\t\t// \trow.slice(0, input.width)\r\n\t\t\t}\r\n\t\t\treturn row\r\n\t\t})\r\n\t}\r\n</script>\r\n\r\n<style lang=\"scss\">.flex input[type='number'] {\n  width: 50px; }\n\ncanvas {\n  display: block;\n  -webkit-box-shadow: 0 1px 10px 4px rgba(0, 0, 0, 0.08);\n  -moz-box-shadow: 0 1px 10px 4px rgba(0, 0, 0, 0.08);\n  box-shadow: 0 1px 10px 4px rgba(0, 0, 0, 0.08);\n  background: repeating-linear-gradient(-45deg, transparent, #eee 10px); }\n\n.preview {\n  margin-left: 10px; }\n\n.header-controls {\n  display: flex;\n  flex-direction: row; }\n\n.width-auto {\n  width: auto; }\n\n.flex .btn-group {\n  margin-left: 5px; }\n\n.flex .btn-group,\n.flex input {\n  margin-right: 5px; }\n\n.toolbar {\n  font-size: 14px; }\n  .toolbar .flex-column {\n    margin-right: 5px; }\n\n.paint-cursor {\n  cursor: url(/paint-icon.png) 0 20, auto; }\n\n.fill-cursor {\n  cursor: url(/fill-icon.png) 20 20, auto; }\n</style>\r\n",
    "<div class=\"form-group\">\r\n\t<label for=\"graphic\">\r\n\t\t<slot>Characters</slot>\r\n\t</label>\r\n\t<div>\r\n\t\t<InputSelect multiple {options} bind:value let:option inline filterable={options.length > 2}>\r\n\t\t\t<Art name={$characterStore[option.value].graphicStill} />\r\n\t\t\t{option.value}\r\n\t\t</InputSelect>\r\n\t</div>\r\n\t<!-- <div class=\"options\">\r\n\t\t{#each options as name}\r\n\t\t\t<div class:active={value.indexOf(name) > -1} on:click={() => toggle(name)}>\r\n\t\t\t\t<Art name={$characterStore[name].graphicStill} />\r\n\t\t\t</div>\r\n\t\t{/each}\r\n\t</div> -->\r\n</div>\r\n\r\n<script>\r\n\timport artStore from '../../../stores/art-store'\r\n\timport characterStore from '../../../stores/character-store'\r\n\timport Art from './Art.svelte'\r\n\timport InputSelect from '../../../components/InputSelect.svelte'\r\n\texport let value = []\r\n\r\n\t$: options = Object.keys($characterStore)\r\n\r\n\tfunction toggle(name) {\r\n\t\tvalue = value.indexOf(name) > -1 ? value.filter(v => v != name) : [...value, name].sort()\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.options {\r\n\t\toverflow: auto;\r\n\t}\r\n\t.options > div {\r\n\t\tpadding: 10px;\r\n\t\tfloat: left;\r\n\t\tborder-radius: 0.25rem;\r\n\t\tmargin-right: 3px;\r\n\t}\r\n\t.options > div.active {\r\n\t\tbackground: #007bff;\r\n\t\t/* background: #28a745; */\r\n\t}\r\n</style>\r\n",
    "<div class=\"drawing-tool\">\r\n\t<LevelPreview level={{ background, thumbnail }} on:pan={onPreviewPan} />\r\n\t<div class=\"tool-picker\">\r\n\t\t<div>\r\n\t\t\t<InputSelect\r\n\t\t\t\tname=\"selected-block\"\r\n\t\t\t\tinline\r\n\t\t\t\tplaceholder=\"Select a block to place\"\r\n\t\t\t\toptions={Object.keys($blockStore).map(name => $blockStore[name])}\r\n\t\t\t\tlet:option\r\n\t\t\t\tvalueProp=\"name\"\r\n\t\t\t\tbind:value={selectedBlock}\r\n\t\t\t\ton:change={() => (selectedEnemy = null)}>\r\n\t\t\t\t<Art name={$blockStore[option.name].graphic} height=\"40\" />\r\n\t\t\t\t{option.name}: {option.dps} dps, {option.solid ? 'solid' : 'background'}\r\n\t\t\t</InputSelect>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<InputSelect\r\n\t\t\t\tname=\"selected-block\"\r\n\t\t\t\tinline\r\n\t\t\t\tplaceholder=\"Select an enemy to place\"\r\n\t\t\t\toptions={Object.keys($enemyStore).map(name => $enemyStore[name])}\r\n\t\t\t\tlet:option\r\n\t\t\t\tvalueProp=\"name\"\r\n\t\t\t\tbind:value={selectedEnemy}\r\n\t\t\t\ton:change={() => (selectedBlock = null)}>\r\n\t\t\t\t<Art name={$enemyStore[option.name].graphicStill} height=\"40\" />\r\n\t\t\t\t<strong>{option.name}</strong>\r\n\t\t\t\t{option.dps} dps, {option.maxVelocity} max velocity, worth {option.score} score\r\n\t\t\t</InputSelect>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<div\r\n\t\tclass=\"level-container\"\r\n\t\tstyle=\"background: {background}; height: {height + 25}px;\"\r\n\t\tbind:this={levelContainer}\r\n\t\ton:mousedown={onMouseDown}\r\n\t\ton:mouseup={onMouseUp}\r\n\t\ton:mousemove={onMouseMove}\r\n\t\ton:contextmenu|preventDefault>\r\n\t\t<Level {blocks} {enemies} {width} {height} on:draw={onLevelDraw} />\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\timport Art from './Art.svelte'\r\n\timport artStore from '../../../stores/art-store'\r\n\timport blockStore from '../../../stores/block-store'\r\n\timport LivingSprite from '../../Play/LivingSprite.svelte'\r\n\timport enemyStore from '../../../stores/enemy-store'\r\n\timport Level from '../../Play/Level.svelte'\r\n\timport makeThumbnail from '../../../services/make-thumbnail'\r\n\timport LevelPreview from '../../Play/LevelPreview.svelte'\r\n\timport InputSelect from '../../../components/InputSelect.svelte'\r\n\r\n\texport let background = null\r\n\r\n\t// each block passed to <Level> needs x, y, width, height, png\r\n\texport let thumbnail\r\n\texport let blocks = []\r\n\texport let enemies = []\r\n\r\n\t$: if (blocks != null && blocks.some(b => b.png != null)) {\r\n\t\tblocks = blocks.map(b => {\r\n\t\t\tconst { png, ...otherProps } = b\r\n\t\t\treturn otherProps\r\n\t\t})\r\n\t}\r\n\r\n\tconst blockSize = 40\r\n\r\n\tlet selectedBlock = null\r\n\tlet selectedEnemy = null\r\n\tlet mouseDown = false\r\n\r\n\tlet levelContainer\r\n\tlet canvas\r\n\tconst thumbnailScale = 8\r\n\tfunction onLevelDraw(e) {\r\n\t\tconst canvas = e.detail\r\n\t\tthumbnail = makeThumbnail(canvas, width / thumbnailScale, height / thumbnailScale)\r\n\t}\r\n\r\n\t// todo let them draw higher, use wasd or arrows to navigate around level rather than scrolling\r\n\t// $: highestYUsed = blocks.length > 0 ? Math.max(...blocks.map(b => b.y + b.height)) : 0\r\n\t$: height = 600 //Math.max(400, highestYUsed + 300)\r\n\r\n\t$: highestXUsed = blocks.length > 0 ? Math.max(...blocks.map(b => b.x + b.width)) : 0\r\n\t$: width = Math.max(800, highestXUsed + 500)\r\n\r\n\tfunction selectBlock(name) {\r\n\t\tselectedBlock = name\r\n\t\tselectedEnemy = null\r\n\t}\r\n\r\n\tfunction selectEnemy(name) {\r\n\t\tselectedBlock = null\r\n\t\tselectedEnemy = name\r\n\t}\r\n\r\n\tfunction onPreviewPan(e) {\r\n\t\tconst centerTargetX = e.detail * thumbnailScale\r\n\t\tconst leftTargetX = Math.max(centerTargetX - levelContainer.clientWidth / 2, 0)\r\n\t\tlevelContainer.scroll(leftTargetX, 0)\r\n\t}\r\n\r\n\tfunction onMouseDown(e) {\r\n\t\t// if they right click or alt click, select whatever block they're hovering over\r\n\t\t// if no block is there, it selects null, which makes placeBlock erase the current block\r\n\t\tif (e.altKey || e.button !== 0) {\r\n\t\t\tselectedBlock = findBlockAtPosition(e)\r\n\t\t\tselectedEnemy = findEnemyAtPosition(e)\r\n\t\t}\r\n\r\n\t\tmouseDown = e.button === 0\r\n\t\tonMouseMove(e)\r\n\t}\r\n\r\n\tfunction onMouseMove(e) {\r\n\t\tif (mouseDown) {\r\n\t\t\tconst { x, y } = getEventItemPosition(e)\r\n\t\t\tplaceItem(x, y)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onMouseUp(e) {\r\n\t\tmouseDown = false\r\n\t}\r\n\r\n\tfunction findBlockAtPosition(e) {\r\n\t\tconst { x, y } = getEventItemPosition(e)\r\n\t\tconst block = blocks.find(b => b.x == x && b.y == y)\r\n\t\treturn block == null ? null : block.name\r\n\t}\r\n\r\n\tfunction findEnemyAtPosition(e) {\r\n\t\tconst { x, y } = getEventItemPosition(e)\r\n\t\tconst enemy = enemies.find(e => e.x == x && e.y == y)\r\n\t\treturn enemy == null ? null : enemy.name\r\n\t}\r\n\r\n\tfunction getEventItemPosition(e) {\r\n\t\treturn {\r\n\t\t\tx: Math.floor(e.offsetX / blockSize) * blockSize,\r\n\t\t\ty: Math.floor((height - e.offsetY) / blockSize) * blockSize,\r\n\t\t}\r\n\t}\r\n\r\n\tfunction placeItem(x, y) {\r\n\t\teraseItemAt(x, y)\r\n\t\tif (selectedBlock != null) {\r\n\t\t\tconst template = $blockStore[selectedBlock]\r\n\t\t\tblocks = [\r\n\t\t\t\t...blocks,\r\n\t\t\t\t{\r\n\t\t\t\t\tname: selectedBlock,\r\n\t\t\t\t\tx,\r\n\t\t\t\t\ty,\r\n\t\t\t\t\twidth: blockSize,\r\n\t\t\t\t\theight: blockSize,\r\n\t\t\t\t},\r\n\t\t\t]\r\n\t\t} else if (selectedEnemy != null) {\r\n\t\t\tconst template = $enemyStore[selectedEnemy]\r\n\t\t\tenemies = [\r\n\t\t\t\t...enemies,\r\n\t\t\t\t{\r\n\t\t\t\t\tname: selectedEnemy,\r\n\t\t\t\t\tx,\r\n\t\t\t\t\ty,\r\n\t\t\t\t\twidth: template.width,\r\n\t\t\t\t\theight: template.height,\r\n\t\t\t\t},\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n\r\n\tfunction eraseItemAt(x, y) {\r\n\t\tblocks = blocks.filter(b => b.x != x || b.y != y)\r\n\t\tenemies = enemies.filter(e => e.x != x || e.y != y)\r\n\t}\r\n\r\n\tfunction hydrateEnemy(enemy) {\r\n\t\tconst template = $enemyStore[enemy.name]\r\n\t\treturn {\r\n\t\t\t...template,\r\n\t\t\t...enemy,\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.drawing-tool {\r\n\t\tposition: relative;\r\n\t\twidth: 1400px;\r\n\t}\r\n\r\n\t.tool-picker {\r\n\t\tmargin: 5px 0;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: row;\r\n\t\talign-items: top;\r\n\t}\r\n\t.tool-picker > div {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.tool-picker .btn-group {\r\n\t\tmargin-right: 5px;\r\n\t}\r\n\r\n\t.tool-picker .btn {\r\n\t\theight: 60px;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.level-container {\r\n\t\toverflow-x: auto;\r\n\t\tmax-width: 100%;\r\n\t}\r\n</style>\r\n",
    "<div class=\"flex align-top\">\r\n\t<div class=\"sub-nav\">\r\n\t\t{#each tabs as t}\r\n\t\t\t<a class=\"sub-nav-item\" class:active={tab == t.name} href=\"{baseUrl}/{t.name}/new\">{t.name}</a>\r\n\t\t\t{#if t.name == tab}\r\n\t\t\t\t<div class=\"sub-nav\">\r\n\t\t\t\t\t<a href=\"{baseUrl}/{t.name}/new\" class=\"sub-nav-item\" class:new={store[activeName] == null}>+ New</a>\r\n\t\t\t\t\t{#each Object.keys(store).sort() as name}\r\n\t\t\t\t\t\t<a class=\"sub-nav-item\" class:active={activeName == name} href=\"{baseUrl}/{t.name}/{name}\">\r\n\t\t\t\t\t\t\t<Art name={tab == 'art' ? name : store[name][t.graphicKey]} height=\"20\" />\r\n\t\t\t\t\t\t\t<div class=\"flex-column\">\r\n\t\t\t\t\t\t\t\t<span>{name}</span>\r\n\t\t\t\t\t\t\t\t{#if tab == 'levels'}\r\n\t\t\t\t\t\t\t\t\t<img src={store[name].thumbnail} class=\"level-thumbnail\" />\r\n\t\t\t\t\t\t\t\t{/if}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t{/each}\r\n\t\t\t\t</div>\r\n\t\t\t{/if}\r\n\t\t{/each}\r\n\t</div>\r\n\t<div class=\"flex-grow pl-2\">\r\n\t\t<slot />\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\timport Art from './Art.svelte'\r\n\r\n\texport let tab\r\n\texport let activeName\r\n\texport let store\r\n\r\n\tconst baseUrl = '#/level-builder'\r\n\r\n\tconst tabs = [\r\n\t\t{ name: 'art' },\r\n\t\t{ name: 'blocks', graphicKey: 'graphic' },\r\n\t\t{ name: 'characters', graphicKey: 'graphicStill' },\r\n\t\t{ name: 'enemies', graphicKey: 'graphicStill' },\r\n\t\t{ name: 'levels', graphicKey: null },\r\n\t]\r\n</script>\r\n\r\n<style lang=\"scss\">.sub-nav .sub-nav {\n  padding-left: 5px;\n  margin-left: 15px;\n  max-height: 60vh;\n  overflow: auto;\n  border-left: 1px solid #eee; }\n  .sub-nav .sub-nav .sub-nav-item {\n    padding: 3px 7px; }\n\n.sub-nav .sub-nav-item {\n  padding: 5px 7px;\n  display: flex;\n  flex-direction: row;\n  font-size: 15px;\n  color: #666; }\n  .sub-nav .sub-nav-item :global(img) {\n    margin-right: 5px; }\n  .sub-nav .sub-nav-item img.level-thumbnail {\n    width: 100px; }\n  .sub-nav .sub-nav-item:hover {\n    color: #28a745;\n    text-decoration: none;\n    font-weight: bold; }\n  .sub-nav .sub-nav-item.active {\n    color: #007bff;\n    font-weight: bold; }\n\n.sub-nav-item.new {\n  color: #28a745; }\n</style>\r\n",
    "<svelte:window on:keydown={onKeyDown} on:keyup={onKeyUp} />\r\n\r\n<div class=\"game-window\" bind:this={mainEl}>\r\n\t{#if gameOver}\r\n\t\t<GameOver {score} {player} />\r\n\t{/if}\r\n\t{#if level != null && player != null}\r\n\t\t<Viewport {...viewport} background={level.background}>\r\n\t\t\t<Level {blocks} width={levelWidth} height={levelHeight} playing />\r\n\t\t\t{#each enemies as enemy}\r\n\t\t\t\t<LivingSprite {...enemy} />\r\n\t\t\t{/each}\r\n\t\t\t<LivingSprite {...player} />\r\n\t\t</Viewport>\r\n\t{/if}\r\n\t<Status {level} {score} enemyCount={(enemies || []).filter(e => e.alive).length} />\r\n\t<Instructions />\r\n</div>\r\n\r\n<script>\r\n\timport { onMount, onDestroy } from 'svelte'\r\n\timport Status from './Status.svelte'\r\n\timport Level from './Level.svelte'\r\n\timport Instructions from './Instructions.svelte'\r\n\timport Viewport from './Viewport.svelte'\r\n\timport LivingSprite from './LivingSprite.svelte'\r\n\timport HealthBar from './HealthBar.svelte'\r\n\timport GameOver from './GameOver.svelte'\r\n\timport { doObjectsIntersect, isAAboveB, doObjectsIntersectY, doObjectsIntersectYExclusive } from './spatial-functions'\r\n\timport CreateEnemy from './enemies'\r\n\r\n\timport artStore from '../../stores/art-store'\r\n\timport blockStore from '../../stores/block-store'\r\n\timport enemyStore from '../../stores/enemy-store'\r\n\r\n\texport let level = null\r\n\texport let character = null\r\n\r\n\tconst artScale = 2\r\n\tconst startOfLevel = 0\r\n\tlet endOfLevel\r\n\tconst blockSize = 40\r\n\tlet blocks\r\n\tlet damageBlocks\r\n\tlet levelWidth = 0\r\n\tlet levelHeight = 0\r\n\r\n\tlet score = 0\r\n\r\n\tlet mainEl\r\n\tlet player\r\n\tlet enemies\r\n\tlet gameOver = false\r\n\tlet paused = false\r\n\r\n\tlet gameAlive = true\r\n\tlet lastRequestedFrame = null\r\n\r\n\tlet visibleBlocks\r\n\tlet viewport = {\r\n\t\twidth: window.innerWidth,\r\n\t\theight: 600,\r\n\t}\r\n\r\n\tlet leftDown = false\r\n\tlet rightDown = false\r\n\r\n\tonMount(() => {\r\n\t\t// sort blocks by x, then y\r\n\t\tblocks = level.blocks\r\n\t\t\t.sort((a, b) => {\r\n\t\t\t\tif (a.x > b.x) return 1\r\n\t\t\t\telse if (b.x > a.x) return -1\r\n\r\n\t\t\t\tif (a.y > b.y) return -1\r\n\t\t\t\telse if (b.y > a.y) return 1\r\n\r\n\t\t\t\treturn 0\r\n\t\t\t})\r\n\t\t\t.map(b => ({\r\n\t\t\t\t...b,\r\n\t\t\t\tsolid: $blockStore[b.name].solid,\r\n\t\t\t\tpng: $artStore[$blockStore[b.name].graphic].png,\r\n\t\t\t\tdps: $blockStore[b.name].dps,\r\n\t\t\t\tthrowOnTouch: $blockStore[b.name].throwOnTouch,\r\n\t\t\t}))\r\n\r\n\t\tendOfLevel = Math.max(...blocks.map(b => b.x + b.width))\r\n\r\n\t\tdamageBlocks = blocks.filter(b => b.dps > 0)\r\n\r\n\t\tlevelWidth = Math.max(...blocks.map(b => b.x + b.width))\r\n\t\tlevelHeight = 600 //Math.max(...blocks.map(b => b.y + b.height))\r\n\t\tstart()\r\n\t})\r\n\r\n\tonDestroy(() => {\r\n\t\tgameAlive = false\r\n\t\twindow.cancelAnimationFrame(lastRequestedFrame)\r\n\t})\r\n\r\n\tfunction start() {\r\n\t\tscore = 0\r\n\t\tplayer = {\r\n\t\t\t...character,\r\n\t\t\thealth: character.maxHealth,\r\n\t\t\ttvx: character.maxVelocity,\r\n\r\n\t\t\twidth: $artStore[character.graphicStill].width * artScale, // width of graphic\r\n\t\t\theight: $artStore[character.graphicStill].height * artScale, // height of graphic\r\n\r\n\t\t\t// runtime stuff\r\n\t\t\tx: blocks[0].x,\r\n\t\t\ty: blocks[0].y + blocks[0].height + 100,\r\n\t\t\tvx: 0,\r\n\t\t\tvy: 0,\r\n\r\n\t\t\t// todo: replace \"spinning\" with abilities\r\n\t\t\tspinning: false,\r\n\r\n\t\t\ttick() {\r\n\t\t\t\t// x axis controls\r\n\t\t\t\tif (player.grounded) {\r\n\t\t\t\t\tif (leftDown && !rightDown) player.vx -= player.tvx / 5\r\n\t\t\t\t\telse if (rightDown && !leftDown) player.vx += player.tvx / 5\r\n\t\t\t\t\telse player.vx = 0\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// let them control direction a little in the air, but not as much\r\n\t\t\t\t\tif (leftDown && !rightDown) player.vx -= player.tvx / 10\r\n\t\t\t\t\telse if (rightDown && !leftDown) player.vx += player.tvx / 10\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// don't let them break top speed though\r\n\t\t\t\tif (Math.abs(player.vx) > player.tvx) player.vx = player.tvx * (player.vx < 0 ? -1 : 1)\r\n\t\t\t},\r\n\t\t}\r\n\t\tenemies = level.enemies.map(e => {\r\n\t\t\tconst template = $enemyStore[e.name]\r\n\t\t\tconst w = $artStore[template.graphicStill].width * artScale // width of graphic\r\n\t\t\tconst h = $artStore[template.graphicStill].height * artScale // height of graphic\r\n\t\t\treturn CreateEnemy(template, e, w, h)\r\n\t\t})\r\n\t\tgameOver = false\r\n\t\tpaused = false\r\n\r\n\t\t// only start game loop if it's not already going\r\n\t\tif (lastRequestedFrame == null) gameLoop()\r\n\t}\r\n\r\n\tfunction gameLoop() {\r\n\t\tif (!gameOver) {\r\n\t\t\t// visibleBlocks = blocks.filter(b => doObjectsIntersect(viewport, b))\r\n\t\t\tplayer = applyWorldToSprite(player, true)\r\n\r\n\t\t\t// handle movement / attack abilities\r\n\t\t\tplayer.tick()\r\n\r\n\t\t\tconst halfViewportWidth = viewport.width / 2\r\n\t\t\tconst halfViewportHeight = viewport.height / 2\r\n\r\n\t\t\tviewport.x =\r\n\t\t\t\t// player is at beginning of level\r\n\t\t\t\tplayer.x < halfViewportWidth\r\n\t\t\t\t\t? // viewport all the way to the left\r\n\t\t\t\t\t  0\r\n\t\t\t\t\t: // player is at end of level\r\n\t\t\t\t\tplayer.x > endOfLevel - halfViewportWidth && endOfLevel > viewport.width\r\n\t\t\t\t\t? // viewport all the way to the right\r\n\t\t\t\t\t  endOfLevel - viewport.width\r\n\t\t\t\t\t: // player is in middle of level, viewport centered on player\r\n\t\t\t\t\t  player.x - halfViewportWidth\r\n\r\n\t\t\tviewport.y =\r\n\t\t\t\t// player is near bottom of screen\r\n\t\t\t\tplayer.y < halfViewportHeight\r\n\t\t\t\t\t? // viewport all the way to bottom\r\n\t\t\t\t\t  0\r\n\t\t\t\t\t: // player above half viewport height, center on player\r\n\t\t\t\t\t  player.y - halfViewportHeight\r\n\r\n\t\t\t// for every live enemy intersecting the player, one or the other should take damage\r\n\t\t\tfor (let i = 0; i < enemies.length; i++) {\r\n\t\t\t\tif (enemies[i].alive) {\r\n\t\t\t\t\tenemies[i] = applyWorldToSprite(enemies[i])\r\n\t\t\t\t\tenemies[i].tick(enemies[i], player)\r\n\t\t\t\t\tif (doObjectsIntersect(player, enemies[i])) {\r\n\t\t\t\t\t\tif (player.spinning) {\r\n\t\t\t\t\t\t\tenemies[i].gettingHit = true\r\n\t\t\t\t\t\t\tenemies[i].health -= player.dps / 60 // damage per frame\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tplayer.health -= enemies[i].dps / 60 // damage per frame\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (enemies[i].health <= 0) {\r\n\t\t\t\t\t\tenemies[i].alive = false\r\n\t\t\t\t\t\tenemies[i].onDeath()\r\n\t\t\t\t\t\tscore += enemies[i].score\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// game is over if player dies\r\n\t\t\tif (player.health <= 0) gameOver = true\r\n\t\t}\r\n\r\n\t\tif (gameAlive) lastRequestedFrame = window.requestAnimationFrame(gameLoop)\r\n\t}\r\n\r\n\tfunction applyWorldToSprite(sprite, isPlayerControlled = false) {\r\n\t\tconst surfacesBelowSprite = blocks.filter(b => b.solid && isAAboveB(sprite, b)).map(b => b.y + b.height)\r\n\t\tconst surfaceY = surfacesBelowSprite.length > 0 ? Math.max(...surfacesBelowSprite) : -500 // some number off screen\r\n\r\n\t\tsprite.y += sprite.vy\r\n\t\tsprite.grounded = sprite.y <= surfaceY\r\n\r\n\t\t// gravity affects all sprites\r\n\t\tif (sprite.grounded) {\r\n\t\t\t// we're grounded - take damage if we were previously falling\r\n\t\t\tif (sprite.vy < 0) {\r\n\t\t\t\tsprite.health += (sprite.vy / 10) * sprite.fallDamageMultiplier\r\n\t\t\t\tsprite.vy = 0\r\n\t\t\t}\r\n\r\n\t\t\t// make sure we're exactly on the ground\r\n\t\t\tsprite.y = surfaceY\r\n\t\t} else if (sprite.y < -200) {\r\n\t\t\t// we fell under the map, die\r\n\t\t\tsprite.health = 0\r\n\t\t} else {\r\n\t\t\t// we're in the air, accelerate downward\r\n\t\t\tsprite.vy -= 1\r\n\t\t}\r\n\r\n\t\t// x velocity\r\n\t\tif (sprite.vx != 0) {\r\n\t\t\tif (sprite.vx > 0) {\r\n\t\t\t\t// moving right\r\n\t\t\t\tlet targetX = sprite.x + sprite.vx\r\n\t\t\t\t// any block that would prevent us from reaching our target?\r\n\t\t\t\tconst blockToRight = blocks.find(b => {\r\n\t\t\t\t\t// sprite x + width <= box x\r\n\t\t\t\t\t// target x + width > box x\r\n\t\t\t\t\tconst txw = targetX + sprite.width\r\n\t\t\t\t\tconst sxw = sprite.x + sprite.width\r\n\t\t\t\t\treturn b.solid && txw > b.x && sxw <= b.x && doObjectsIntersectYExclusive(b, sprite)\r\n\t\t\t\t})\r\n\r\n\t\t\t\tif (blockToRight != null) targetX = blockToRight.x - sprite.width\r\n\t\t\t\t// don't let them go past end of level\r\n\t\t\t\telse if (targetX > endOfLevel - sprite.width) targetX = endOfLevel - sprite.width\r\n\t\t\t\tsprite.x = targetX\r\n\t\t\t} else if (sprite.vx < 0) {\r\n\t\t\t\t// moving left\r\n\t\t\t\tlet targetX = sprite.x + sprite.vx\r\n\t\t\t\t// any block that would prevent us from reaching target?\r\n\t\t\t\tconst blockToLeft = blocks.find(b => {\r\n\t\t\t\t\t// sprite x >= box x + width\r\n\t\t\t\t\t// target x < box x + width\r\n\t\t\t\t\tconst bxw = b.x + b.width\r\n\t\t\t\t\treturn b.solid && sprite.x >= bxw && targetX < bxw && doObjectsIntersectYExclusive(b, sprite)\r\n\t\t\t\t})\r\n\t\t\t\tif (blockToLeft != null) targetX = blockToLeft.x + blockToLeft.width\r\n\t\t\t\t// don't let them go past start of level\r\n\t\t\t\telse if (targetX < 0) targetX = 0\r\n\r\n\t\t\t\tsprite.x = targetX < startOfLevel ? startOfLevel : targetX\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// blocks that do damage\r\n\t\tfor (let i = 0; i < damageBlocks.length; i++) {\r\n\t\t\tif (doObjectsIntersect(sprite, damageBlocks[i])) {\r\n\t\t\t\tsprite.health -= damageBlocks[i].dps / 60 // damage per frame\r\n\r\n\t\t\t\t// does the block also throw?\r\n\t\t\t\tif (damageBlocks[i].throwOnTouch) {\r\n\t\t\t\t\tsprite.vy = 20\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn sprite\r\n\t}\r\n\r\n\tfunction onKeyDown(e) {\r\n\t\tif (gameOver) return\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'ArrowLeft':\r\n\t\t\t\tleftDown = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ArrowRight':\r\n\t\t\t\trightDown = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Space':\r\n\t\t\t\tif (player.grounded || player.canFly) player.vy = player.jumpVelocity\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyR':\r\n\t\t\t\tplayer.spinning = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyQ':\r\n\t\t\t\tplayer.health = player.maxHealth\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onKeyUp(e) {\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'ArrowLeft':\r\n\t\t\t\tleftDown = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ArrowRight':\r\n\t\t\t\trightDown = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Space':\r\n\t\t\t\tif (gameOver) start()\r\n\t\t\t\tif (paused) paused = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyR':\r\n\t\t\t\tplayer.spinning = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Enter':\r\n\t\t\tcase 'NumpadEnter':\r\n\t\t\t\tstart()\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyP':\r\n\t\t\t\tpaused = true\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(e.code)\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.game-window {\r\n\t\twidth: 100%;\r\n\t\theight: 90vh;\r\n\t\tmin-height: 600px;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\toverflow: hidden;\r\n\t\tposition: relative;\r\n\t}\r\n</style>\r\n",
    "{#if player}\r\n\t<div class=\"game-over\">\r\n\t\t<h1>{player.name} is dead now. You really let him down.</h1>\r\n\t\t<h1>Final score: {score}</h1>\r\n\t\t<p>Press enter or space to restart.</p>\r\n\t</div>\r\n{/if}\r\n\r\n<script>\r\n\texport let score = 0\r\n\texport let player\r\n</script>\r\n\r\n<style>\r\n\t.game-over {\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground: rgba(0, 0, 0, 0.5);\r\n\t\ttext-align: center;\r\n\t\tz-index: 10;\r\n\t\tpadding-top: 150px;\r\n\t}\r\n\r\n\th1 {\r\n\t\tmargin-top: 25x;\r\n\t\tcolor: #fff;\r\n\t\tfont-size: 50px;\r\n\t\tfont-weight: 100;\r\n\t}\r\n\r\n\tp {\r\n\t\tcolor: #eee;\r\n\t}\r\n</style>\r\n",
    "<!-- Josh demands a healing animation -->\r\n\r\n<div class=\"health-bar\">\r\n\t<div class=\"filled\" style=\"width: {displayPercent}%; background-color: {color}\" />\r\n\t<div class=\"text\">{displayHealth} {health > 0 ? `(${displayPercent}%)` : 'I am dead.'}</div>\r\n</div>\r\n\r\n<script>\r\n\texport let percent = 100\r\n\texport let health = 100\r\n\texport let maxHealth = 100\r\n\r\n\t$: displayHealth = health > 0 ? Math.round(health) : 0\r\n\t$: percent = Math.round((health / maxHealth) * 100, 2)\r\n\t$: displayPercent = percent > 0 ? percent : 0\r\n\t$: color = percent > 75 ? 'rgba(24, 197, 33, 0.5)' : percent > 25 ? 'rgba(245, 189, 36, 0.5)' : 'rgba(223, 22, 22, 0.5)'\r\n</script>\r\n\r\n<style>\r\n\t.health-bar {\r\n\t\theight: 18px;\r\n\t\tbackground: rgba(0, 0, 0, 0.5);\r\n\t\tposition: absolute;\r\n\t\ttop: -20px;\r\n\t\tmargin: 0 auto;\r\n\t\tborder-radius: 5px;\r\n\t\toverflow: hidden;\r\n\t\tmin-width: 75px;\r\n\t}\r\n\r\n\t.filled {\r\n\t\theight: 100%;\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t}\r\n\r\n\t.text {\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\ttext-align: center;\r\n\t\tcolor: #ccc;\r\n\t\tfont-size: 12px;\r\n\t}\r\n</style>\r\n",
    "<div class=\"instructions\">\r\n\t<table>\r\n\t\t{#each keyBinds as bind}\r\n\t\t\t<tr>\r\n\t\t\t\t<td>{bind.key}</td>\r\n\t\t\t\t<td>= {bind.action}</td>\r\n\t\t\t</tr>\r\n\t\t{/each}\r\n\t</table>\r\n</div>\r\n\r\n<script>\r\n\tconst keyBinds = [\r\n\t\t{\r\n\t\t\tkey: 'Left + Right Arrow',\r\n\t\t\taction: 'Move',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Space',\r\n\t\t\taction: 'Jump',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'R',\r\n\t\t\taction: 'Spin Attack / Shield',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Q',\r\n\t\t\taction: 'Heal',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Enter',\r\n\t\t\taction: 'Restart',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'P',\r\n\t\t\taction: 'Pause',\r\n\t\t},\r\n\t]\r\n</script>\r\n\r\n<style>\r\n\t.instructions {\r\n\t\tpadding: 10px;\r\n\t}\r\n\r\n\ttable td {\r\n\t\tfont-size: 12px;\r\n\t}\r\n\r\n\ttable tr td:first-child {\r\n\t\ttext-align: right;\r\n\t}\r\n\ttable tr td:last-child {\r\n\t\ttext-align: left;\r\n\t}\r\n</style>\r\n",
    "<canvas bind:this={canvas} {width} {height} />\r\n\r\n<script>\r\n\timport { createEventDispatcher } from 'svelte'\r\n\timport blockStore from '../../stores/block-store'\r\n\timport enemyStore from '../../stores/enemy-store'\r\n\timport artStore from '../../stores/art-store'\r\n\r\n\texport let width = 0\r\n\texport let height = 0\r\n\texport let blocks = []\r\n\texport let enemies = null\r\n\texport let playing = false\r\n\tconst artScale = 2\r\n\r\n\tconst dispatch = createEventDispatcher()\r\n\tconst imageCache = {}\r\n\r\n\tlet canvas\r\n\tlet context\r\n\r\n\t$: if (canvas != null) context = canvas.getContext('2d')\r\n\t$: if (blocks != null && width != null && height != null && context != null) {\r\n\t\tcontext.clearRect(0, 0, width, height)\r\n\t\tblocks.forEach(b => drawOnCanvas($blockStore[b.name].graphic, b.x, b.y))\r\n\t\tif (enemies != null) {\r\n\t\t\tenemies.forEach(e => drawOnCanvas($enemyStore[e.name].graphicStill, e.x, e.y))\r\n\t\t}\r\n\t\tdispatch('draw', canvas)\r\n\t}\r\n\r\n\tfunction drawOnCanvas(artName, x, y) {\r\n\t\tlet art = $artStore[artName]\r\n\t\tlet src = art.png\r\n\t\tlet drawing = imageCache[artName]\r\n\r\n\t\tconst drawThisImage = () => {\r\n\t\t\tconst draw = () => context.drawImage(drawing, x, height - y - art.height * artScale)\r\n\t\t\tif (playing) setTimeout(draw, 100)\r\n\t\t\telse draw()\r\n\t\t}\r\n\r\n\t\tif (drawing == null) {\r\n\t\t\tdrawing = new Image()\r\n\t\t\tdrawing.src = src\r\n\t\t\timageCache[artName] = drawing\r\n\t\t}\r\n\r\n\t\tif (drawing.complete) {\r\n\t\t\tdrawThisImage()\r\n\t\t} else {\r\n\t\t\tconst oldOnload = drawing.onload\r\n\t\t\tdrawing.onload = () => {\r\n\t\t\t\tif (typeof oldOnload === 'function') oldOnload()\r\n\t\t\t\tdrawThisImage()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\tcanvas {\r\n\t\tdisplay: block;\r\n\t}\r\n</style>\r\n",
    "{#if level}\r\n\t<img\r\n\t\tsrc={level.thumbnail}\r\n\t\talt=\"level preview\"\r\n\t\tclass=\"level-preview\"\r\n\t\tclass:grabbing={mouseDown}\r\n\t\tstyle=\"background: {level.background}\"\r\n\t\ton:mousedown|preventDefault={onMouseDown}\r\n\t\ton:mousemove|preventDefault={onMouseMove}\r\n\t\ton:mouseup|preventDefault={onMouseUp} />\r\n{/if}\r\n\r\n<script>\r\n\timport { createEventDispatcher } from 'svelte'\r\n\texport let level\r\n\tconst dispatch = createEventDispatcher()\r\n\r\n\tlet mouseDown = false\r\n\tfunction onMouseDown(e) {\r\n\t\tmouseDown = true\r\n\t}\r\n\r\n\tfunction onMouseUp(e) {\r\n\t\tmouseDown = false\r\n\t}\r\n\r\n\tfunction onMouseMove(e) {\r\n\t\tif (mouseDown) dispatch('pan', e.offsetX)\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\timg {\r\n\t\tcursor: grab;\r\n\t}\r\n\t.grabbing {\r\n\t\tcursor: grabbing;\r\n\t}\r\n</style>\r\n",
    "<div class=\"player\" style=\"left: {x}px; bottom: {y}px;\">\r\n\t<HealthBar {health} {maxHealth} />\r\n\t{#if graphic != null}\r\n\t\t<img\r\n\t\t\tclass=\"graphic drop-shadow\"\r\n\t\t\tsrc={graphic.png}\r\n\t\t\talt={name}\r\n\t\t\tclass:dead={health <= 0}\r\n\t\t\tstyle=\"width: {graphic.width * artScale}px; height: {graphic.height * artScale}px; transform: scaleX({direction}) rotate({rotate}deg);\" />\r\n\t{/if}\r\n</div>\r\n\r\n<script>\r\n\timport artStore from '../../stores/art-store'\r\n\timport HealthBar from './HealthBar.svelte'\r\n\r\n\tconst artScale = 2\r\n\r\n\texport let name\r\n\texport let maxHealth\r\n\texport let graphicStill\r\n\texport let graphicSpinning\r\n\r\n\texport let vx = 0\r\n\texport let vy = 0\r\n\texport let y = 0\r\n\texport let x = 0\r\n\r\n\texport let health\r\n\r\n\t$: graphic = spinning && graphicSpinning != null ? $artStore[graphicSpinning] : graphicStill != null ? $artStore[graphicStill] : null\r\n\r\n\texport let spinning = false\r\n\r\n\tlet direction = 1\r\n\t$: if (vx != 0) direction = vx > 0 ? 1 : -1\r\n\r\n\t$: rotate = spinning ? spinningRotation : -1 * (5 + (vy > 0 ? vy * 3 : vy * 1.5))\r\n\r\n\tlet spinningRotation = 0\r\n\tlet spinTimeout = null\r\n\t$: if (spinning) {\r\n\t\tspinTimeout = setTimeout(() => {\r\n\t\t\tspinningRotation += 30\r\n\t\t}, 25)\r\n\t} else {\r\n\t\tclearTimeout(spinTimeout)\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.player {\r\n\t\tposition: absolute;\r\n\t}\r\n\t.dead {\r\n\t\tfilter: none;\r\n\t\t-webkit-filter: grayscale(0%);\r\n\t\t-moz-filter: grayscale(0%);\r\n\t\t-ms-filter: grayscale(0%);\r\n\t\t-o-filter: grayscale(0%);\r\n\t}\r\n</style>\r\n",
    "<div>\r\n\t<p>Level: {level.name}</p>\r\n\t<p>Score: {score}</p>\r\n\t<p>Enemies left: {enemyCount}</p>\r\n</div>\r\n\r\n<script>\r\n\texport let level = {}\r\n\texport let score = 0\r\n\texport let enemyCount = 0\r\n</script>\r\n\r\n<style>\r\n\tdiv {\r\n\t\tposition: absolute;\r\n\t\tfont-size: 14px;\r\n\t\ttop: 10px;\r\n\t\tleft: 10px;\r\n\t\tcolor: #333;\r\n\t}\r\n\tp {\r\n\t\tmargin: 0;\r\n\t\tpadding: 0;\r\n\t}\r\n</style>\r\n",
    "<div class=\"viewport\" style=\"width: {width}px; height: {height}px; background: {background}\">\r\n\t<div style=\"position: absolute; left: {-x}px; bottom: {-y}px; height: {height}px;\">\r\n\t\t<slot />\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\texport let x = 0\r\n\texport let y = 0\r\n\texport let width = 0\r\n\texport let height = 0\r\n\texport let background = null\r\n</script>\r\n\r\n<style>\r\n\t.viewport {\r\n\t\tposition: relative;\r\n\t\toverflow: hidden;\r\n\t}\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "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"
}