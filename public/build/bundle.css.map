{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\BubTheBobcat.svelte",
    "..\\..\\Block.svelte",
    "..\\..\\Enemy.svelte",
    "..\\..\\GameOver.svelte",
    "..\\..\\HealthBar.svelte",
    "..\\..\\Index.svelte",
    "..\\..\\Instructions.svelte",
    "..\\..\\Player.svelte",
    "..\\..\\Status.svelte",
    "..\\..\\Viewport.svelte",
    "..\\..\\PixelArtMaker.svelte",
    "..\\..\\Index.svelte"
  ],
  "sourcesContent": [
    "<ul class=\"nav\">\n\t<li class=\"nav-item\">\n\t\t<a class=\"nav-link\" href=\"#/pixel-art-maker\">Pixel Art Maker</a>\n\t</li>\n\t<li class=\"nav-item\">\n\t\t<a class=\"nav-link\" href=\"#/bub-the-bobcat\">Bub the Bobcat</a>\n\t</li>\n</ul>\n\n<main>\n\t<Router {routes} />\n</main>\n\n<script>\n\t// svelte-spa-router for hash routing since this is just going to be hosted on github pages\n\timport Router from 'svelte-spa-router'\n\timport BubTheBobcat from './pages/BubTheBobcat/Index.svelte'\n\timport PixelArtMaker from './pages/PixelArtMaker/Index.svelte'\n\timport NotFound from './pages/NotFound.svelte'\n\n\tconst routes = {\n\t\t'/bub-the-bobcat': BubTheBobcat,\n\t\t'/pixel-art-maker': PixelArtMaker,\n\t\t'*': NotFound,\n\t}\n</script>\n\n<style>\n\tmain {\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>\n",
    "<svelte:window on:keydown={onKeyDown} on:keyup={onKeyUp} />\r\n\r\n<main bind:this={mainEl}>\r\n\t{#if gameOver}\r\n\t\t<GameOver {wave} {score} />\r\n\t{/if}\r\n\t<!-- viewport moves with player -->\r\n\t<Viewport {player} xOffset={playerXOffset}>\r\n\t\t{#if player != null}\r\n\t\t\t{#each blocks as block}\r\n\t\t\t\t<Block {...block} {blockSize} />\r\n\t\t\t{/each}\r\n\t\t\t{#each enemies as enemy}\r\n\t\t\t\t<Enemy {...enemy} />\r\n\t\t\t{/each}\r\n\t\t{/if}\r\n\t</Viewport>\r\n\t<Status {wave} {score} />\r\n\t<!-- player alawys in middle -->\r\n\t<div style=\"position: relative;\">\r\n\t\t<Player {...player} xOffset={playerXOffset} />\r\n\t</div>\r\n\t<Instructions />\r\n</main>\r\n\r\n<script>\r\n\timport { onMount } from 'svelte'\r\n\timport Status from './Status.svelte'\r\n\timport Instructions from './Instructions.svelte'\r\n\timport Viewport from './Viewport.svelte'\r\n\timport Player from './Player.svelte'\r\n\timport Enemy from './Enemy.svelte'\r\n\timport HealthBar from './HealthBar.svelte'\r\n\timport GameOver from './GameOver.svelte'\r\n\timport Block from './Block.svelte'\r\n\timport generateBlocks from './blocks.js'\r\n\tconst blockSize = 40\r\n\tconst mapWidthInBlocks = 80\r\n\r\n\tconst playerXOffset = window.innerWidth / 2\r\n\r\n\tlet wave = 0\r\n\tlet score = 0\r\n\r\n\tlet mainEl\r\n\tlet blocks\r\n\tlet maxSpeed = 5\r\n\tlet maxEnemySpeed = 2\r\n\tlet jumpMomentum = 20\r\n\tlet player\r\n\tlet enemies\r\n\tlet leftDown = false\r\n\tlet rightDown = false\r\n\tlet spaceDown = false\r\n\tlet gameOver = false\r\n\r\n\tfunction gameLoop() {\r\n\t\tif (!gameOver) {\r\n\t\t\tplayer = updateSprite(player, true)\r\n\r\n\t\t\t// if no enemies are alive, spawn some more\r\n\t\t\tif (!enemies.some(e => e.health > 0)) {\r\n\t\t\t\t// if they haven't killed 10 yet, spawn some more small enemies\r\n\t\t\t\tif (enemies.length < 5) {\r\n\t\t\t\t\twave++\r\n\t\t\t\t\tscore += wave > 1 ? 100 : 0\r\n\t\t\t\t\t// bunch of small enemies\r\n\t\t\t\t\tenemies = enemies.concat(\r\n\t\t\t\t\t\t[1, 2, 3, 4, 5].map(x => ({\r\n\t\t\t\t\t\t\tsize: 100,\r\n\t\t\t\t\t\t\tposition: {\r\n\t\t\t\t\t\t\t\tx: player.position.x + 100 + x * 100,\r\n\t\t\t\t\t\t\t\ty: 600,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tdirection: -1,\r\n\t\t\t\t\t\t\tmomentum: {\r\n\t\t\t\t\t\t\t\tx: 0,\r\n\t\t\t\t\t\t\t\ty: 0,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\thealth: 100 * wave,\r\n\t\t\t\t\t\t\tmaxHealth: 100 * wave,\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t)\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// spawn a boss\r\n\t\t\t\t\tscore += 50\r\n\t\t\t\t\tenemies = [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsize: 400,\r\n\t\t\t\t\t\t\tisBoss: true,\r\n\t\t\t\t\t\t\tposition: {\r\n\t\t\t\t\t\t\t\tx: player.position.x + 200,\r\n\t\t\t\t\t\t\t\ty: 600,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tdirection: -1,\r\n\t\t\t\t\t\t\tmomentum: {\r\n\t\t\t\t\t\t\t\tx: 0,\r\n\t\t\t\t\t\t\t\ty: 0,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\thealth: 400 * wave,\r\n\t\t\t\t\t\t\tmaxHealth: 400 * wave,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = 0; i < enemies.length; i++) {\r\n\t\t\t\tif (enemies[i].health > 0) {\r\n\t\t\t\t\tenemies[i] = updateSprite(enemies[i], false)\r\n\r\n\t\t\t\t\t// if enemy is on top of player, player should take damage\r\n\t\t\t\t\tconst enemyCenterX = enemies[i].position.x\r\n\t\t\t\t\tconst halfEnemy = enemies[i].size / 2\r\n\t\t\t\t\tconst playerLeft = player.position.x - player.size / 2 - halfEnemy\r\n\t\t\t\t\tconst playerRight = playerLeft + player.size + halfEnemy\r\n\r\n\t\t\t\t\tenemies[i].gettingHit = false\r\n\t\t\t\t\tif (enemyCenterX >= playerLeft && enemyCenterX <= playerRight) {\r\n\t\t\t\t\t\tconst enemyCenterY = enemies[i].position.y\r\n\t\t\t\t\t\tconst playerBottom = player.position.y - halfEnemy\r\n\t\t\t\t\t\tconst playerTop = player.position.y + player.size + halfEnemy\r\n\t\t\t\t\t\tif (enemyCenterY > playerBottom && enemyCenterY < playerTop) {\r\n\t\t\t\t\t\t\t// player and enemy are intersecting\r\n\t\t\t\t\t\t\tif (player.spinning) {\r\n\t\t\t\t\t\t\t\tenemies[i].gettingHit = true\r\n\t\t\t\t\t\t\t\tenemies[i].health -= 1\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tplayer.health -= 1 * wave\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tenemies = enemies\r\n\r\n\t\t\t// game is over if player dies\r\n\t\t\tif (player.health <= 0) gameOver = true\r\n\t\t}\r\n\r\n\t\twindow.requestAnimationFrame(gameLoop)\r\n\t\tconsole.log('in game loop')\r\n\t}\r\n\r\n\tfunction updateSprite(sprite, isPlayerControlled = false) {\r\n\t\tconst aboveBlock = blocks.find(b => {\r\n\t\t\t// consider player over a block if the player's edges surround the midpoint of the block\r\n\t\t\tconst blockLeftEdge = b.x\r\n\t\t\tconst blockRightEdge = blockLeftEdge + blockSize\r\n\t\t\tconst spriteCenter = sprite.position.x\r\n\t\t\treturn b.interactive && blockLeftEdge <= spriteCenter && blockRightEdge >= spriteCenter && sprite.position.y >= b.y\r\n\t\t})\r\n\t\tsprite.groundY = aboveBlock != null ? aboveBlock.y : 0\r\n\r\n\t\tif (sprite.momentum.y != 0) {\r\n\t\t\tsprite.position.y += sprite.momentum.y\r\n\r\n\t\t\t// if we just hit the ground, take some life away\r\n\t\t\tif (sprite.position.y <= sprite.groundY) {\r\n\t\t\t\tsprite.position.y = sprite.groundY\r\n\t\t\t\tsprite.health += sprite.momentum.y / (isPlayerControlled ? 2 : 10)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// x momentum\r\n\t\tif (sprite.momentum.x != 0) {\r\n\t\t\tif (sprite.momentum.x > 0) {\r\n\t\t\t\tconst rightBound = blockSize * mapWidthInBlocks\r\n\t\t\t\tconst targetX = sprite.position.x + sprite.momentum.x\r\n\t\t\t\tsprite.position.x = targetX > rightBound ? rightBound : targetX\r\n\t\t\t} else {\r\n\t\t\t\tconst leftBound = 0\r\n\t\t\t\tconst targetX = sprite.position.x + sprite.momentum.x\r\n\t\t\t\tsprite.position.x = targetX < leftBound ? leftBound : targetX\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (sprite.position.y > sprite.groundY) {\r\n\t\t\tsprite.momentum.y--\r\n\t\t} else {\r\n\t\t\tsprite.momentum.y = 0\r\n\r\n\t\t\tif (isPlayerControlled) {\r\n\t\t\t\t// player can jump if they're on the ground\r\n\t\t\t\tif (spaceDown) {\r\n\t\t\t\t\tsprite.momentum.y = jumpMomentum\r\n\t\t\t\t\tsprite.position.y += 1\r\n\t\t\t\t} else if (!leftDown && !rightDown) sprite.momentum.x = 0\r\n\t\t\t} else {\r\n\t\t\t\t// enemy, just move toward player\r\n\t\t\t\t// if player is above enemy, jump\r\n\t\t\t\tif (player.position.y - blockSize - 1 > sprite.position.y) {\r\n\t\t\t\t\tsprite.momentum.y = jumpMomentum\r\n\t\t\t\t\tsprite.position.y += 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isPlayerControlled) {\r\n\t\t\t// player can move left and right\r\n\t\t\tif (leftDown) sprite.momentum.x = -maxSpeed\r\n\t\t\telse if (rightDown) sprite.momentum.x = maxSpeed\r\n\t\t} else {\r\n\t\t\t// enemy, just move toward player\r\n\t\t\tif (player.position.x < sprite.position.x) sprite.momentum.x = -maxEnemySpeed\r\n\t\t\telse sprite.momentum.x = maxEnemySpeed\r\n\t\t}\r\n\r\n\t\treturn sprite\r\n\t}\r\n\r\n\tfunction onKeyDown(e) {\r\n\t\tif (gameOver) return\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'ArrowLeft':\r\n\t\t\t\tplayer.direction = -1\r\n\t\t\t\tleftDown = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ArrowRight':\r\n\t\t\t\tplayer.direction = 1\r\n\t\t\t\trightDown = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Space':\r\n\t\t\t\tspaceDown = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyR':\r\n\t\t\t\tplayer.spinning = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyQ':\r\n\t\t\t\tplayer.health = player.maxHealth\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onKeyUp(e) {\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'ArrowLeft':\r\n\t\t\t\tleftDown = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ArrowRight':\r\n\t\t\t\trightDown = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Space':\r\n\t\t\t\tspaceDown = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyR':\r\n\t\t\t\tplayer.spinning = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Enter':\r\n\t\t\t\tstart()\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\tfunction start() {\r\n\t\twave = 0\r\n\t\tscore = 0\r\n\t\tblocks = generateBlocks(blockSize, mapWidthInBlocks)\r\n\r\n\t\tplayer = {\r\n\t\t\tsize: 100,\r\n\t\t\tposition: {\r\n\t\t\t\tx: playerXOffset,\r\n\t\t\t\t// start on top of first block\r\n\t\t\t\ty: blocks[0].y + blocks[0].height,\r\n\t\t\t},\r\n\t\t\tdirection: 1,\r\n\t\t\tmomentum: {\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0,\r\n\t\t\t},\r\n\t\t\tspinning: false,\r\n\t\t\thealth: 100,\r\n\t\t\tmaxHealth: 100,\r\n\t\t}\r\n\t\tenemies = []\r\n\t\tgameOver = false\r\n\t}\r\n\r\n\t// start game loop\r\n\tonMount(() => {\r\n\t\tstart()\r\n\t\tgameLoop()\r\n\t})\r\n</script>\r\n\r\n<style>\r\n\tmain {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\toverflow: hidden;\r\n\t\tposition: relative;\r\n\t}\r\n</style>\r\n",
    "<div class=\"block\" class:interactive style=\"height: {height}px; width: {width}px; bottom: {y - height}px; left: {x}px; background-color: {color}\" />\r\n\r\n<script>\r\n\texport let y = 0\r\n\texport let x = 0\r\n\texport let width = 0\r\n\texport let height = 0\r\n\texport let interactive = true\r\n\texport let color = 'rgb(8,95,8)'\r\n</script>\r\n\r\n<style>\r\n\t.block {\r\n\t\tposition: absolute;\r\n\t}\r\n\r\n\t.interactive {\r\n\t\tborder-top: 4px solid black;\r\n\t}\r\n</style>\r\n",
    "<div class=\"enemy\" style=\"left: {position.x - size / 2}px; bottom: {position.y - 15}px;\">\r\n\t<HealthBar {health} {maxHealth} />\r\n\t<svg\r\n\t\tclass=\"graphic\"\r\n\t\tstyle=\"left: 15px; width: {size}px; height: {size * 0.75}px; transform: scaleX({-1 * direction}) rotate({-4 + (momentum.y > 0 ? momentum.y * 3 : momentum.y * 1.5)}deg);\r\n\t\topacity: {health <= 0 ? 0.2 : 1.0}\"\r\n\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\tviewBox=\"0 10 1024 749\"\r\n\t\tversion=\"1.1\"\r\n\t\txml:space=\"preserve\">\r\n\t\t<path d={path1} fill={bodyColor} />\r\n\t\t<path d={path2} fill={eyeColor} />\r\n\t</svg>\r\n</div>\r\n\r\n<script>\r\n\timport HealthBar from './HealthBar.svelte'\r\n\texport let momentum = {\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t}\r\n\texport let position = {\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t}\r\n\texport let isBoss = false\r\n\texport let size = 75\r\n\texport let direction = 1\r\n\texport let health = 100\r\n\texport let maxHealth = 100\r\n\texport let gettingHit = false\r\n\t$: bodyColor = health <= 0 ? '#333333' : gettingHit ? '#ffffff' : isBoss ? '#000' : '#79cf00'\r\n\t$: eyeColor = health <= 0 ? '#000000' : gettingHit ? '#0000ff' : isBoss ? 'red' : '#cf7900'\r\n\tconst path1 = `M560,128H528a15.99954,15.99954,0,0,0-16,16v80H480V176a15.99954,15.99954,0,0,0-16-16H416V96h48a16.00079,16.00079,0,0,0,16-16V48a15.99954,15.99954,0,0,0-16-16H432a15.99954,15.99954,0,0,0-16,16V64H368a15.99954,15.99954,0,0,0-16,16v48H224V80a15.99954,15.99954,0,0,0-16-16H160V48a15.99954,15.99954,0,0,0-16-16H112A15.99954,15.99954,0,0,0,96,48V80a16.00079,16.00079,0,0,0,16,16h48v64H112a15.99954,15.99954,0,0,0-16,16v48H64V144a15.99954,15.99954,0,0,0-16-16H16A15.99954,15.99954,0,0,0,0,144V272a16.00079,16.00079,0,0,0,16,16H64v80a16.00079,16.00079,0,0,0,16,16h48v80a16.00079,16.00079,0,0,0,16,16h96a16.00079,16.00079,0,0,0,16-16V432a15.99954,15.99954,0,0,0-16-16H192V384H384v32H336a15.99954,15.99954,0,0,0-16,16v32a16.00079,16.00079,0,0,0,16,16h96a16.00079,16.00079,0,0,0,16-16V384h48a16.00079,16.00079,0,0,0,16-16V288h48a16.00079,16.00079,0,0,0,16-16V144A15.99954,15.99954,0,0,0,560,128ZM224,320H160V224h64Zm192,0H352V224h64Z`\r\n\tconst path2 = `M160,320h64V224H160Zm192-96v96h64V224Z`\r\n</script>\r\n\r\n<style>\r\n\t.enemy {\r\n\t\tposition: absolute;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.graphic {\r\n\t\tmargin-top: 10px;\r\n\t\tposition: relative;\r\n\t}\r\n</style>\r\n",
    "<div class=\"game-over\">\r\n\t<h1>Bub is dead now. You really let him down.</h1>\r\n\t<h1>Final score: {score}</h1>\r\n\t<p>Press enter to restart.</p>\r\n</div>\r\n\r\n<script>\r\n\texport let score = 0\r\n\texport let wave = 0\r\n</script>\r\n\r\n<style>\r\n\t.game-over {\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground: rgba(0, 0, 0, 0.5);\r\n\t\ttext-align: center;\r\n\t\tz-index: 10;\r\n\t\tpadding-top: 150px;\r\n\t}\r\n\r\n\th1 {\r\n\t\tmargin-top: 25x;\r\n\t\tcolor: #fff;\r\n\t\tfont-size: 50px;\r\n\t\tfont-weight: 100;\r\n\t}\r\n\r\n\tp {\r\n\t\tcolor: #eee;\r\n\t}\r\n</style>\r\n",
    "<!-- Josh demands a healing animation -->\r\n\r\n<div class=\"health-bar\">\r\n\t<div class=\"filled\" style=\"width: {displayPercent}%; background-color: {color}\" />\r\n\t<div class=\"text\">{displayHealth} - {displayPercent > 0 ? `${displayPercent}%` : 'I am dead.'}</div>\r\n</div>\r\n\r\n<script>\r\n\texport let percent = 100\r\n\texport let health = 100\r\n\texport let maxHealth = 100\r\n\r\n\t$: displayHealth = health > 0 ? Math.round(health) : 0\r\n\t$: percent = Math.round((health / maxHealth) * 100, 2)\r\n\t$: displayPercent = percent > 0 ? percent : 0\r\n\t$: color = percent > 75 ? 'rgba(24, 197, 33, 0.5)' : percent > 25 ? 'rgba(245, 189, 36, 0.5)' : 'rgba(223, 22, 22, 0.5)'\r\n</script>\r\n\r\n<style>\r\n\t.health-bar {\r\n\t\theight: 18px;\r\n\t\tbackground: rgba(0, 0, 0, 0.5);\r\n\t\tposition: relative;\r\n\t\tborder-radius: 5px;\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\t.filled {\r\n\t\theight: 100%;\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t}\r\n\r\n\t.text {\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\ttext-align: center;\r\n\t\tcolor: #ccc;\r\n\t\tfont-size: 12px;\r\n\t}\r\n</style>\r\n",
    "<svelte:window on:keydown={onKeyDown} on:keyup={onKeyUp} />\r\n\r\n<div class=\"game-window\" bind:this={mainEl}>\r\n\t{#if gameOver}\r\n\t\t<GameOver {wave} {score} />\r\n\t{/if}\r\n\t<!-- viewport moves with player -->\r\n\t<Viewport {player} xOffset={playerXOffset}>\r\n\t\t{#if player != null}\r\n\t\t\t{#each blocks as block}\r\n\t\t\t\t<Block {...block} />\r\n\t\t\t{/each}\r\n\t\t\t{#each enemies as enemy}\r\n\t\t\t\t<Enemy {...enemy} />\r\n\t\t\t{/each}\r\n\t\t{/if}\r\n\t</Viewport>\r\n\t<Status {wave} {score} />\r\n\t<!-- player alawys in middle -->\r\n\t<div style=\"position: relative;\">\r\n\t\t<Player {...player} xOffset={playerXOffset} />\r\n\t</div>\r\n\t<Instructions />\r\n</div>\r\n\r\n<script>\r\n\timport { onMount, onDestroy } from 'svelte'\r\n\timport Status from './Status.svelte'\r\n\timport Instructions from './Instructions.svelte'\r\n\timport Viewport from './Viewport.svelte'\r\n\timport Player from './Player.svelte'\r\n\timport Enemy from './Enemy.svelte'\r\n\timport HealthBar from './HealthBar.svelte'\r\n\timport GameOver from './GameOver.svelte'\r\n\timport Block from './Block.svelte'\r\n\timport generateBlocks from './blocks.js'\r\n\tconst blockSize = 40\r\n\tconst mapWidthInBlocks = 80\r\n\r\n\tconst playerXOffset = window.innerWidth / 2\r\n\r\n\tlet wave = 0\r\n\tlet score = 0\r\n\r\n\tlet mainEl\r\n\tlet blocks\r\n\tlet maxSpeed = 5\r\n\tlet maxEnemySpeed = 2\r\n\tlet jumpMomentum = 20\r\n\tlet player\r\n\tlet enemies\r\n\tlet leftDown = false\r\n\tlet rightDown = false\r\n\tlet spaceDown = false\r\n\tlet gameOver = false\r\n\r\n\tlet gameAlive = true\r\n\r\n\tfunction gameLoop() {\r\n\t\tif (!gameOver) {\r\n\t\t\tplayer = updateSprite(player, true)\r\n\r\n\t\t\t// if no enemies are alive, spawn some more\r\n\t\t\tif (!enemies.some(e => e.health > 0)) {\r\n\t\t\t\t// if they haven't killed 10 yet, spawn some more small enemies\r\n\t\t\t\tif (enemies.length < 5) {\r\n\t\t\t\t\twave++\r\n\t\t\t\t\tscore += wave > 1 ? 100 : 0\r\n\t\t\t\t\t// bunch of small enemies\r\n\t\t\t\t\tenemies = enemies.concat(\r\n\t\t\t\t\t\t[1, 2, 3, 4, 5].map(x => ({\r\n\t\t\t\t\t\t\tsize: 100,\r\n\t\t\t\t\t\t\tposition: {\r\n\t\t\t\t\t\t\t\tx: player.position.x + 100 + x * 100,\r\n\t\t\t\t\t\t\t\ty: 600,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tdirection: -1,\r\n\t\t\t\t\t\t\tmomentum: {\r\n\t\t\t\t\t\t\t\tx: 0,\r\n\t\t\t\t\t\t\t\ty: 0,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\thealth: 100 * wave,\r\n\t\t\t\t\t\t\tmaxHealth: 100 * wave,\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t)\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// spawn a boss\r\n\t\t\t\t\tscore += 50\r\n\t\t\t\t\tenemies = [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsize: 400,\r\n\t\t\t\t\t\t\tisBoss: true,\r\n\t\t\t\t\t\t\tposition: {\r\n\t\t\t\t\t\t\t\tx: player.position.x + 200,\r\n\t\t\t\t\t\t\t\ty: 600,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tdirection: -1,\r\n\t\t\t\t\t\t\tmomentum: {\r\n\t\t\t\t\t\t\t\tx: 0,\r\n\t\t\t\t\t\t\t\ty: 0,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\thealth: 400 * wave,\r\n\t\t\t\t\t\t\tmaxHealth: 400 * wave,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = 0; i < enemies.length; i++) {\r\n\t\t\t\tif (enemies[i].health > 0) {\r\n\t\t\t\t\tenemies[i] = updateSprite(enemies[i], false)\r\n\r\n\t\t\t\t\t// if enemy is on top of player, player should take damage\r\n\t\t\t\t\tconst enemyCenterX = enemies[i].position.x\r\n\t\t\t\t\tconst halfEnemy = enemies[i].size / 2\r\n\t\t\t\t\tconst playerLeft = player.position.x - player.size / 2 - halfEnemy\r\n\t\t\t\t\tconst playerRight = playerLeft + player.size + halfEnemy\r\n\r\n\t\t\t\t\tenemies[i].gettingHit = false\r\n\t\t\t\t\tif (enemyCenterX >= playerLeft && enemyCenterX <= playerRight) {\r\n\t\t\t\t\t\tconst enemyCenterY = enemies[i].position.y\r\n\t\t\t\t\t\tconst playerBottom = player.position.y - halfEnemy\r\n\t\t\t\t\t\tconst playerTop = player.position.y + player.size + halfEnemy\r\n\t\t\t\t\t\tif (enemyCenterY > playerBottom && enemyCenterY < playerTop) {\r\n\t\t\t\t\t\t\t// player and enemy are intersecting\r\n\t\t\t\t\t\t\tif (player.spinning) {\r\n\t\t\t\t\t\t\t\tenemies[i].gettingHit = true\r\n\t\t\t\t\t\t\t\tenemies[i].health -= 1\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tplayer.health -= 1 * wave\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tenemies = enemies\r\n\r\n\t\t\t// game is over if player dies\r\n\t\t\tif (player.health <= 0) gameOver = true\r\n\t\t}\r\n\t\tconsole.log('in game loop')\r\n\r\n\t\tif (gameAlive) window.requestAnimationFrame(gameLoop)\r\n\t}\r\n\r\n\tfunction updateSprite(sprite, isPlayerControlled = false) {\r\n\t\tconst aboveBlock = blocks.find(b => {\r\n\t\t\t// consider player over a block if the player's edges surround the midpoint of the block\r\n\t\t\tconst blockLeftEdge = b.x\r\n\t\t\tconst blockRightEdge = blockLeftEdge + blockSize\r\n\t\t\tconst spriteCenter = sprite.position.x\r\n\t\t\treturn b.interactive && blockLeftEdge <= spriteCenter && blockRightEdge >= spriteCenter && sprite.position.y >= b.y\r\n\t\t})\r\n\t\tsprite.groundY = aboveBlock != null ? aboveBlock.y : 0\r\n\r\n\t\tif (sprite.momentum.y != 0) {\r\n\t\t\tsprite.position.y += sprite.momentum.y\r\n\r\n\t\t\t// if we just hit the ground, take some life away\r\n\t\t\tif (sprite.position.y <= sprite.groundY) {\r\n\t\t\t\tsprite.position.y = sprite.groundY\r\n\t\t\t\tsprite.health += sprite.momentum.y / (isPlayerControlled ? 2 : 10)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// x momentum\r\n\t\tif (sprite.momentum.x != 0) {\r\n\t\t\tif (sprite.momentum.x > 0) {\r\n\t\t\t\tconst rightBound = blockSize * mapWidthInBlocks\r\n\t\t\t\tconst targetX = sprite.position.x + sprite.momentum.x\r\n\t\t\t\tsprite.position.x = targetX > rightBound ? rightBound : targetX\r\n\t\t\t} else {\r\n\t\t\t\tconst leftBound = 0\r\n\t\t\t\tconst targetX = sprite.position.x + sprite.momentum.x\r\n\t\t\t\tsprite.position.x = targetX < leftBound ? leftBound : targetX\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (sprite.position.y > sprite.groundY) {\r\n\t\t\tsprite.momentum.y--\r\n\t\t} else {\r\n\t\t\tsprite.momentum.y = 0\r\n\r\n\t\t\tif (isPlayerControlled) {\r\n\t\t\t\t// player can jump if they're on the ground\r\n\t\t\t\tif (spaceDown) {\r\n\t\t\t\t\tsprite.momentum.y = jumpMomentum\r\n\t\t\t\t\tsprite.position.y += 1\r\n\t\t\t\t} else if (!leftDown && !rightDown) sprite.momentum.x = 0\r\n\t\t\t} else {\r\n\t\t\t\t// enemy, just move toward player\r\n\t\t\t\t// if player is above enemy, jump\r\n\t\t\t\tif (player.position.y - blockSize - 1 > sprite.position.y) {\r\n\t\t\t\t\tsprite.momentum.y = jumpMomentum\r\n\t\t\t\t\tsprite.position.y += 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isPlayerControlled) {\r\n\t\t\t// player can move left and right\r\n\t\t\tif (leftDown) sprite.momentum.x = -maxSpeed\r\n\t\t\telse if (rightDown) sprite.momentum.x = maxSpeed\r\n\t\t} else {\r\n\t\t\t// enemy, just move toward player\r\n\t\t\tif (player.position.x < sprite.position.x) sprite.momentum.x = -maxEnemySpeed\r\n\t\t\telse sprite.momentum.x = maxEnemySpeed\r\n\t\t}\r\n\r\n\t\treturn sprite\r\n\t}\r\n\r\n\tfunction onKeyDown(e) {\r\n\t\tif (gameOver) return\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'ArrowLeft':\r\n\t\t\t\tplayer.direction = -1\r\n\t\t\t\tleftDown = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ArrowRight':\r\n\t\t\t\tplayer.direction = 1\r\n\t\t\t\trightDown = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Space':\r\n\t\t\t\tspaceDown = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyR':\r\n\t\t\t\tplayer.spinning = true\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyQ':\r\n\t\t\t\tplayer.health = player.maxHealth\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onKeyUp(e) {\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'ArrowLeft':\r\n\t\t\t\tleftDown = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ArrowRight':\r\n\t\t\t\trightDown = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Space':\r\n\t\t\t\tspaceDown = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyR':\r\n\t\t\t\tplayer.spinning = false\r\n\t\t\t\tbreak\r\n\t\t\tcase 'Enter':\r\n\t\t\t\tstart()\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\tfunction start() {\r\n\t\twave = 0\r\n\t\tscore = 0\r\n\t\tblocks = generateBlocks(blockSize, mapWidthInBlocks)\r\n\r\n\t\tplayer = {\r\n\t\t\tsize: 100,\r\n\t\t\tposition: {\r\n\t\t\t\tx: playerXOffset,\r\n\t\t\t\t// start on top of first block\r\n\t\t\t\ty: blocks[0].y + blocks[0].height,\r\n\t\t\t},\r\n\t\t\tdirection: 1,\r\n\t\t\tmomentum: {\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0,\r\n\t\t\t},\r\n\t\t\tspinning: false,\r\n\t\t\thealth: 100,\r\n\t\t\tmaxHealth: 100,\r\n\t\t}\r\n\t\tenemies = []\r\n\t\tgameOver = false\r\n\t}\r\n\r\n\t// start game loop\r\n\tonMount(() => {\r\n\t\tstart()\r\n\t\tgameLoop()\r\n\t})\r\n\r\n\tonDestroy(() => {\r\n\t\tgameAlive = false\r\n\t})\r\n</script>\r\n\r\n<style>\r\n\t.game-window {\r\n\t\twidth: 100%;\r\n\t\theight: 80vh;\r\n\t\tmin-height: 600px;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\toverflow: hidden;\r\n\t\tposition: relative;\r\n\t}\r\n</style>\r\n",
    "<div class=\"instructions\">\r\n\t<table>\r\n\t\t{#each keyBinds as bind}\r\n\t\t\t<tr>\r\n\t\t\t\t<td>{bind.key}</td>\r\n\t\t\t\t<td>= {bind.action}</td>\r\n\t\t\t</tr>\r\n\t\t{/each}\r\n\t</table>\r\n</div>\r\n\r\n<script>\r\n\tconst keyBinds = [\r\n\t\t{\r\n\t\t\tkey: 'Left + Right Arrow',\r\n\t\t\taction: 'Move',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Space',\r\n\t\t\taction: 'Jump',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'R',\r\n\t\t\taction: 'Spin Attack / Shield',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Q',\r\n\t\t\taction: 'Heal',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Enter',\r\n\t\t\taction: 'Restart',\r\n\t\t},\r\n\t]\r\n</script>\r\n\r\n<style>\r\n\t.instructions {\r\n\t\tbackground: #666;\r\n\t\tcolor: #fff;\r\n\t\tpadding: 10px;\r\n\t}\r\n\r\n\ttable td {\r\n\t\tfont-size: 12px;\r\n\t}\r\n\r\n\ttable tr td:first-child {\r\n\t\ttext-align: right;\r\n\t}\r\n\ttable tr td:last-child {\r\n\t\ttext-align: left;\r\n\t}\r\n</style>\r\n",
    "<div class=\"player\" style=\"left: {-size / 2 + xOffset}px; bottom: {position.y - 5}px;\">\r\n\t<HealthBar {health} {maxHealth} />\r\n\t<img\r\n\t\tclass=\"graphic\"\r\n\t\tsrc=\"https://i.imgur.com/g1jV9bN.png\"\r\n\t\talt=\"Bub\"\r\n\t\tstyle=\"width: {size}px; height: {size * 0.75}px; transform: scaleX({scaleX}) rotate({rotate}deg)\" />\r\n</div>\r\n\r\n<script>\r\n\timport HealthBar from './HealthBar.svelte'\r\n\texport let momentum = {\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t}\r\n\texport let position = {\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t}\r\n\texport let xOffset = 0\r\n\texport let size = 150\r\n\texport let direction = 1\r\n\texport let health = 100\r\n\texport let maxHealth = 100\r\n\r\n\texport let spinning = false\r\n\r\n\t$: scaleX = direction\r\n\t$: rotate = spinning ? spinningRotation : -1 * (5 + (momentum.y > 0 ? momentum.y * 3 : momentum.y * 1.5))\r\n\r\n\tlet spinningRotation = 0\r\n\tlet spinTimeout = null\r\n\t$: if (spinning) {\r\n\t\tspinTimeout = setTimeout(() => {\r\n\t\t\tspinningRotation += 30\r\n\t\t}, 25)\r\n\t} else {\r\n\t\tclearTimeout(spinTimeout)\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.player {\r\n\t\tposition: absolute;\r\n\t}\r\n\r\n\t.graphic {\r\n\t\tmargin-top: 10px;\r\n\t\tmargin: -7px;\r\n\t}\r\n</style>\r\n",
    "<div>\r\n\t<p>Wave: {wave}</p>\r\n\t<p>Score: {score}</p>\r\n</div>\r\n\r\n<script>\r\n\texport let wave = 0\r\n\texport let score = 0\r\n</script>\r\n\r\n<style>\r\n\tdiv {\r\n\t\tposition: absolute;\r\n\t\tfont-size: 30px;\r\n\t\ttop: 10px;\r\n\t\tleft: 10px;\r\n\t\tcolor: #333;\r\n\t}\r\n\tp {\r\n\t\tmargin: 0;\r\n\t\tpadding: 0;\r\n\t}\r\n</style>\r\n",
    "<div class=\"viewport\">\r\n\t{#if player != null}\r\n\t\t<div style=\"position: absolute; left: {xOffset - player.position.x}px; bottom: 0;\">\r\n\t\t\t<slot />\r\n\t\t</div>\r\n\t{/if}\r\n</div>\r\n\r\n<script>\r\n\texport let player = null\r\n\texport let xOffset = 0\r\n</script>\r\n\r\n<style>\r\n\t.viewport {\r\n\t\tflex-grow: 1;\r\n\t\tbackground: rgb(135, 206, 235);\r\n\t\tposition: relative;\r\n\t}\r\n</style>\r\n",
    "<button on:click={reset}>Reset</button>\n\n<div class=\"color-picker\">\n\t{#each colors as color}\n\t\t<button style=\"background-color: {color}\" class:active={color == selectedColor} on:click={() => selectColor(color)} />\n\t{/each}\n</div>\n\n<svelte:window on:mousedown={() => (mouseDown = true)} on:mouseup={() => (mouseDown = false)} />\n\n<table cellspacing=\"0\">\n\t{#each rows as row}\n\t\t<tr>\n\t\t\t{#each columns as column}\n\t\t\t\t<td\n\t\t\t\t\tstyle=\"background-color: {data[row][column]}; width: {gridSize}px; height: {gridSize}px;\"\n\t\t\t\t\ton:mousemove={() => onGridMousemove(row, column)}\n\t\t\t\t\ton:click={e => onGridClick(e, row, column)} />\n\t\t\t{/each}\n\t\t</tr>\n\t{/each}\n</table>\n\n<textarea on:keyup={onKeyUp} value={JSON.stringify(data)} on:click={selectAll} on:focus={selectAll} />\n\n<script>\n\timport LocalStorageStore from '../stores/local-storage-store'\n\n\tconst savedDrawings = LocalStorageStore('saved-drawings')\n\n\tlet loaded = null\n\n\tfunction save() {\n\t\tconst name = prompt('Give us a name', '')\n\t\tif (name == null || name.trim().length == 0) return\n\n\t\t$savedDrawings[name] = data\n\t}\n\n\tfunction load(name) {\n\t\tdata = $savedDrawings[name]\n\t\tloaded = name\n\t}\n\n\tfunction deleteSave(name) {\n\t\tdelete $savedDrawings[name]\n\t\t$savedDrawings = $savedDrawings\n\t}\n\n\tconst colors = ['black', 'white', '#666', 'red', 'green', 'blue', 'pink', 'orange', 'purple', 'yellow', 'teal', '#773b0b']\n\n\tlet selectedColor = 'black'\n\tconst gridSize = 30\n\tconst height = 15\n\tconst width = 20\n\tconst rows = [...Array(height)].map((_, i) => i)\n\tconst columns = [...Array(width)].map((_, i) => i)\n\n\tlet data = []\n\tlet mouseDown = false\n\n\treset()\n\n\tfunction reset() {\n\t\tlet newData = []\n\t\tfor (let i = 0; i < height; i++) {\n\t\t\tlet row = []\n\t\t\tfor (let j = 0; j < width; j++) {\n\t\t\t\trow.push('white')\n\t\t\t}\n\t\t\tnewData.push(row)\n\t\t}\n\t\tdata = newData\n\t}\n\n\tfunction onGridMousemove(row, column) {\n\t\tif (mouseDown) setColor(row, column)\n\t}\n\n\tfunction onGridClick(e, row, column) {\n\t\tif (e.altKey) {\n\t\t\tselectColor(data[row][column])\n\t\t} else {\n\t\t\tsetColor(row, column)\n\t\t}\n\t}\n\n\tfunction setColor(row, column, color = selectedColor) {\n\t\tdata[row][column] = color\n\t}\n\n\tfunction selectColor(color) {\n\t\tselectedColor = color\n\t}\n\n\tfunction onKeyUp(e) {\n\t\tif (e.code == 'KeyV' && e.ctrlKey) {\n\t\t\ttry {\n\t\t\t\tconst input = JSON.parse(e.target.value)\n\t\t\t\tdata = input\n\t\t\t} catch (e) {}\n\t\t}\n\t}\n\n\tfunction selectAll(e) {\n\t\te.target.select()\n\t}\n</script>\n\n<style>\n\tbutton {\n\t\tborder: 2px solid transparent;\n\t\tdisplay: inline-block;\n\t}\n\n\tbutton:hover,\n\tbutton.active {\n\t\tcursor: pointer;\n\t\toutline: 0;\n\t\t-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);\n\t\tbox-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);\n\t\tborder-color: #66afe9;\n\t}\n\n\tbutton.active {\n\t\t-webkit-box-shadow: inset 0 1px 1px rgba(0, 255, 0, 0.075), 0 0 8px rgba(102, 255, 233, 0.6);\n\t\tbox-shadow: inset 0 1px 1px rgba(0, 255, 0, 0.075), 0 0 8px rgba(102, 255, 233, 0.6);\n\t\tborder-color: #00ff00;\n\t}\n\n\t.color-picker button {\n\t\twidth: 30px;\n\t\theight: 30px;\n\t}\n\n\ttable {\n\t\tborder-top: 1px solid #ccc;\n\t\tborder-right: 1px solid #ccc;\n\t}\n\ttable td {\n\t\tborder-bottom: 1px solid #ccc;\n\t\tborder-left: 1px solid #ccc;\n\t\tcursor: pointer;\n\t}\n\n\ttextarea {\n\t\twidth: 100%;\n\t\theight: 50px;\n\t}\n</style>\n",
    "{#if savedNames.length}\n\t<div>\n\t\t{#each savedNames as savedDrawingName}\n\t\t\t<div class=\"btn-group mr-2\">\n\t\t\t\t<button class=\"btn btn-sm btn-{savedDrawingName == loaded ? 'primary active' : 'secondary'}\" on:click={() => load(savedDrawingName)}>\n\t\t\t\t\t{savedDrawingName}\n\t\t\t\t</button>\n\t\t\t\t<button class=\"btn btn-sm btn-secondary\" on:click={() => deleteSave(savedDrawingName)}>x</button>\n\t\t\t</div>\n\t\t{/each}\n\t</div>\n{/if}\n\n<div class=\"flex\">\n\t<div>\n\t\tGrid size\n\t\t<input type=\"number\" bind:value={gridSize} min=\"15\" max=\"50\" step=\"5\" />\n\t</div>\n\t<div>\n\t\tHeight\n\t\t<input type=\"number\" bind:value={height} placeholder=\"Height\" />\n\t</div>\n\t<div>\n\t\tWidth\n\t\t<input type=\"number\" bind:value={width} placeholder=\"Width\" />\n\t</div>\n\t<label>\n\t\t<input type=\"checkbox\" bind:checked={showGrid} />\n\t\tShow grid\n\t</label>\n</div>\n\n<div class=\"btn-toolbar\">\n\t<div class=\"btn-group\">\n\t\t<button class=\"btn btn-danger btn-sm\" on:click={reset}>Reset</button>\n\t\t<button class=\"btn btn-primary btn-sm mr-2\" on:click={() => save()}>Save</button>\n\t</div>\n\n\t<div class=\"btn-group\">\n\t\t<button disabled={undos.length == 0} class=\"btn btn-default btn-sm\" on:click={undo}>Undo {undos.length}</button>\n\t\t<button disabled={redos.length == 0} class=\"btn btn-default btn-sm\" on:click={redo}>Redo {redos.length}</button>\n\t</div>\n\n\t<div class=\"btn-group color-picker\">\n\t\t{#each colors as color}\n\t\t\t<button style=\"background-color: {color}\" class:active={color == selectedColor} on:click={() => selectColor(color)} />\n\t\t{/each}\n\t</div>\n</div>\n\n<svg\n\twidth={width * (gridSize + 2)}\n\theight={height * (gridSize + 2)}\n\ton:mousedown={onSvgMouseDown}\n\ton:mouseup={onSvgMouseUp}\n\ton:mousemove={e => onSvgMouseMove(e.target)}>\n\t{#each rows as row}\n\t\t{#each columns as column}\n\t\t\t<rect\n\t\t\t\ty={row * gridSize}\n\t\t\t\tx={column * gridSize}\n\t\t\t\tstyle=\"fill: {getCellColor(data, row, column)}\"\n\t\t\t\twidth={gridSize}\n\t\t\t\theight={gridSize}\n\t\t\t\tdata-row={row}\n\t\t\t\tdata-column={column}\n\t\t\t\tstroke={showGrid ? '#eee' : null} />\n\t\t{/each}\n\t{/each}\n</svg>\n\n<script>\n\timport LocalStorageStore from '../../stores/local-storage-store'\n\n\tconst savedDrawings = LocalStorageStore('pixel-drawings', {})\n\t$: savedNames = Object.keys($savedDrawings)\n\n\tlet loaded = null\n\tconst colors = [\n\t\t'white',\n\t\t'#A0A4A0',\n\t\t'#666',\n\t\t'#333',\n\t\t'black',\n\t\t'#773b0b',\n\t\t'blue',\n\t\t'pink',\n\t\t'yellow',\n\t\t'orange',\n\t\t'red',\n\t\t'purple',\n\t\t'teal',\n\t\t'green',\n\t\t'#2828B8',\n\t\t'#2850E0',\n\t\t'#5050F8',\n\t\t'#787CF8',\n\t\t'#A00010',\n\t\t'#F80020',\n\t\t'#D07C60',\n\t\t'#F8D0B0',\n\t]\n\tlet selectedColor = 'black'\n\tlet gridSize = 30\n\tlet height = 30\n\tlet width = 30\n\tlet undos = []\n\tlet redos = []\n\tlet showGrid = true\n\n\t$: rows = [...Array(height)].map((_, i) => i)\n\t$: columns = [...Array(width)].map((_, i) => i)\n\n\tlet data = []\n\tlet mouseDown = false\n\n\treset()\n\n\tfunction reset() {\n\t\taddUndoState()\n\t\tdata = buildRows(height)\n\t\tloaded = null\n\t}\n\n\tfunction onSvgMouseDown(e) {\n\t\tif (e.altKey) {\n\t\t\tselectedColor = e.target.style.fill\n\t\t} else {\n\t\t\taddUndoState()\n\t\t\tmouseDown = true\n\t\t\tonSvgMouseMove(e.target)\n\t\t}\n\t}\n\n\tfunction onSvgMouseUp(e) {\n\t\tmouseDown = false\n\t}\n\n\tfunction onSvgMouseMove(target) {\n\t\tif (!mouseDown) return\n\n\t\tconst row = target.dataset.row\n\t\tconst column = target.dataset.column\n\t\tif (row != null && column != null) {\n\t\t\tsetColor(row, column)\n\t\t}\n\t}\n\n\tfunction addUndoState() {\n\t\tundos = [...undos.slice(Math.max(undos.length - 20, 0)), JSON.stringify(data)]\n\n\t\t// if we're adding a new undo state, empty redos\n\t\tredos = []\n\t}\n\n\tfunction buildRows(num) {\n\t\treturn [...Array(num)].map(r => buildColumns(width))\n\t}\n\n\tfunction buildColumns(num) {\n\t\treturn [...Array(num)].map(c => null)\n\t}\n\n\tfunction undo() {\n\t\tredos = [...redos, JSON.stringify(data)]\n\t\tdata = JSON.parse(undos.pop())\n\t\tundos = undos\n\t}\n\n\tfunction redo() {\n\t\tif (redos.length == 0) return\n\n\t\tundos = [...undos, JSON.stringify(data)]\n\t\tdata = JSON.parse(redos.pop())\n\t\tredos = redos\n\t}\n\n\tfunction setColor(row, column, color = selectedColor) {\n\t\t// make sure we have enough rows in data to fit the value\n\t\tif (row > data.length) {\n\t\t\tconst rowsNeeded = height - data.length\n\t\t\tconsole.log('trying to set row ', row, ' but only have ', data.length, ' adding ' + rowsNeeded)\n\t\t\tdata = data.concat(buildRows(rowsNeeded))\n\t\t}\n\n\t\t// don't need to worry about columns.. they get auto-filled with null\n\t\tdata[row][column] = color\n\t}\n\n\tfunction selectColor(color) {\n\t\tselectedColor = color\n\t}\n\n\tfunction save() {\n\t\tconst name = prompt('Give us a name', loaded || '')\n\t\tif (name == null || name.trim().length == 0) return\n\n\t\t$savedDrawings[name] = {\n\t\t\tname,\n\t\t\tgridSize,\n\t\t\twidth,\n\t\t\theight,\n\t\t\tdata,\n\t\t\tshowGrid,\n\t\t}\n\t\tloaded = name\n\t}\n\n\tfunction load(name) {\n\t\tlet savedDrawing = JSON.parse(JSON.stringify($savedDrawings[name]))\n\n\t\tif (Array.isArray(savedDrawing)) {\n\t\t\t// migrate old format to new\n\t\t\tconsole.log('migrating old format')\n\t\t\tsavedDrawing = {\n\t\t\t\tname,\n\t\t\t\tgridSize: 30,\n\t\t\t\twidth: 50,\n\t\t\t\theight: 40,\n\t\t\t\tdata: savedDrawing,\n\t\t\t\tshowGrid,\n\t\t\t}\n\t\t\t$savedDrawings[name] = savedDrawing\n\t\t}\n\n\t\tdata = savedDrawing.data\n\t\tgridSize = savedDrawing.gridSize\n\t\twidth = savedDrawing.width || savedDrawing.data[0].length\n\t\theight = savedDrawing.height || savedDrawing.data.length\n\t\tshowGrid = savedDrawing.showGrid || showGrid\n\t\tundos = []\n\t\tredos = []\n\t\tloaded = name\n\t}\n\n\tfunction deleteSave(name) {\n\t\tif (!confirm(`Are you sure you want to delete ${name}?`)) return\n\n\t\tif ($savedDrawings.hasOwnProperty(name)) {\n\t\t\tdelete $savedDrawings[name]\n\t\t\t$savedDrawings = $savedDrawings\n\t\t}\n\t}\n\n\tfunction getCellColor(d, row, column) {\n\t\treturn d.length > row && d[row].length > column ? d[row][column] : 'white'\n\t}\n</script>\n\n<style>\n\t.color-picker button {\n\t\twidth: 30px;\n\t}\n\n\t.color-picker button.active {\n\t\tborder-color: white;\n\t\tposition: relative;\n\t\ttop: 5px;\n\t}\n\n\tsvg {\n\t\tfill: #fff;\n\t\tpadding: 5px;\n\t}\n\n\t.flex {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\talign-items: center;\n\t}\n\t.flex > * {\n\t\tmargin-right: 5px;\n\t}\n\t.flex input[type='number'] {\n\t\twidth: 50px;\n\t}\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}