{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\Svg.svelte",
    "..\\..\\AnimationPreview.svelte",
    "..\\..\\BuildDrawingTool.svelte",
    "..\\..\\BuildLayout.svelte",
    "..\\..\\ColorPicker.svelte",
    "..\\..\\FieldAbilities.svelte",
    "..\\..\\GameOver.svelte",
    "..\\..\\InputPngData.svelte",
    "..\\..\\InputSelect.svelte",
    "..\\..\\Instructions.svelte",
    "..\\..\\Level.svelte",
    "..\\..\\LevelPreview.svelte",
    "..\\..\\Paused.svelte",
    "..\\..\\PhaserGame.svelte",
    "..\\..\\QuickDropdown.svelte",
    "..\\..\\ArtMaker.svelte"
  ],
  "sourcesContent": [
    "<svg version=\"1.1\" class=\"fa-icon {className}\"\n  class:fa-spin={spin} class:fa-pulse={pulse} class:fa-inverse={inverse}\n  class:fa-flip-horizontal=\"{flip === 'horizontal'}\" class:fa-flip-vertical=\"{flip === 'vertical'}\"\n  {x} {y} {width} {height}\n  aria-label={label}\n  role=\"{ label ? 'img' : 'presentation' }\"\n  viewBox={box} style={style}\n  >\n  <slot></slot>\n</svg>\n\n<style>\n.fa-icon {\n  display: inline-block;\n  fill: currentColor;\n}\n.fa-flip-horizontal {\n  transform: scale(-1, 1);\n}\n.fa-flip-vertical {\n  transform: scale(1, -1);\n}\n.fa-spin {\n  animation: fa-spin 1s 0s infinite linear;\n}\n.fa-inverse {\n  color: #fff;\n}\n.fa-pulse {\n  animation: fa-spin 1s infinite steps(8);\n}\n@keyframes fa-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n</style>\n\n<script>\n  let className;\n\n  export { className as class };\n\n  export let width;\n  export let height;\n  export let box;\n\n  export let spin = false;\n  export let inverse = false;\n  export let pulse = false;\n  export let flip = null;\n\n  // optionals\n  export let x = undefined;\n  export let y = undefined;\n  export let style = undefined;\n  export let label = undefined;\n</script>\n",
    "<!--\r\n\tuse window.requestAnimationFrame to move background image spritesheet around\r\n\twould be nice to use css keyframe animations with steps() instead, but would need to do some hackish stuff to get keyframes into DOM\r\n\t-->\r\n\r\n{#if png != null}\r\n\t{#if !simple}\r\n\t\t<div class=\"animation-preview-container\">\r\n\t\t\t<div\r\n\t\t\t\tstyle=\"background-repeat: no-repeat; background-image: url({png}); background-position: {width * scale - frameWidth * scale * (frameIndex + 1)}px\r\n\t\t\t\ttop; background-size: {width * scale}px {height * scale}px; width: {width * scale * 2 - frameWidth * scale}px; height: {height * scale}px;\" />\r\n\t\t\t<div class=\"animation-preview-cover\" style=\"left: 0; width: {width * scale - frameWidth * scale}px;\" />\r\n\t\t\t<div class=\"animation-preview-cover\" style=\"left: {width * scale}px; width: {width * scale - frameWidth * scale}px;\" />\r\n\t\t</div>\r\n\t{:else}\r\n\t\t<div\r\n\t\t\tclass=\"animation-preview\"\r\n\t\t\tstyle=\"background-repeat: no-repeat; background-image: url({png}); background-position: {frameIndex * -frameWidth * scale}px top;\r\n\t\t\tbackground-size: {width * scale}px {height * scale}px; width: {frameWidth * scale}px; height: {height * scale}px;\" />\r\n\t{/if}\r\n{/if}\r\n\r\n<script>\r\n\timport { onMount, onDestroy } from 'svelte'\r\n\timport debounce from '../services/debounce'\r\n\r\n\texport let png\r\n\texport let width\r\n\texport let height\r\n\texport let frameWidth\r\n\texport let frameRate\r\n\texport let scale = 1\r\n\texport let yoyo\r\n\r\n\texport let simple = false\r\n\r\n\tlet frameIndex = 0\r\n\tlet frameDelta = 1\r\n\tlet frame = 0\r\n\r\n\t$: numFrames = width != null ? Math.ceil(width / frameWidth) : 0\r\n\r\n\t$: if (png != null) {\r\n\t\tframeIndex = 0\r\n\t\tframeDelta = 1\r\n\t}\r\n\r\n\t// change the graphic every 60 / frameRate frames\r\n\t$: if (frame > 60 / frameRate) {\r\n\t\tif (numFrames > 1) {\r\n\t\t\tif (yoyo) {\r\n\t\t\t\tif ((frameIndex == 0 && frameDelta == -1) || (frameIndex == numFrames - 1 && frameDelta == 1)) frameDelta *= -1\r\n\t\t\t\tframeIndex += frameDelta\r\n\t\t\t} else {\r\n\t\t\t\tframeIndex = frameIndex >= numFrames - 1 ? 0 : frameIndex + 1\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tframeIndex = 0\r\n\t\t}\r\n\t\tframe = 0\r\n\t}\r\n\r\n\tlet lastRequestedFrame\r\n\tanimate()\r\n\tfunction animate() {\r\n\t\tlastRequestedFrame = window.requestAnimationFrame(() => {\r\n\t\t\tframe++\r\n\t\t\tanimate()\r\n\t\t})\r\n\t}\r\n\r\n\tonDestroy(() => {\r\n\t\twindow.cancelAnimationFrame(lastRequestedFrame)\r\n\t})\r\n</script>\r\n\r\n<style lang=\"scss\">.animation-preview-container {\n  position: relative; }\n\n.animation-preview-cover {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  background: rgba(255, 255, 255, 0.75);\n  backdrop-filter: grayscale(100%); }\n</style>\r\n",
    "<div class=\"drawing-tool\">\r\n\t<LevelPreview level={{ background, thumbnail }} on:pan={onPreviewPan} />\r\n\t<div class=\"tool-picker\">\r\n\t\t<div>\r\n\t\t\t<InputSelect\r\n\t\t\t\tname=\"selected-block\"\r\n\t\t\t\tinline\r\n\t\t\t\tplaceholder=\"Place a block\"\r\n\t\t\t\toptions={Object.keys($project.blocks).map(name => $project.blocks[name])}\r\n\t\t\t\tlet:option\r\n\t\t\t\tvalueProp=\"name\"\r\n\t\t\t\tbind:value={selectedBlock}\r\n\t\t\t\ton:change={() => (selectedEnemy = null)}>\r\n\t\t\t\t<Art name={$project.blocks[option.name].graphic} simple />\r\n\t\t\t\t{option.name}: {option.damage} damage, {option.solid ? 'solid' : 'background'}, {option.consumable ? 'consumable for ' + option.healthOnConsume + ' health, ' + option.healthOnConsume + ' score' : ''}\r\n\t\t\t</InputSelect>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<InputSelect\r\n\t\t\t\tname=\"selected-block\"\r\n\t\t\t\tinline\r\n\t\t\t\tplaceholder=\"Place an enemy\"\r\n\t\t\t\toptions={Object.keys($project.enemies).map(name => $project.enemies[name])}\r\n\t\t\t\tlet:option\r\n\t\t\t\tvalueProp=\"name\"\r\n\t\t\t\tbind:value={selectedEnemy}\r\n\t\t\t\ton:change={() => (selectedBlock = null)}>\r\n\t\t\t\t<Art name={$project.enemies[option.name].graphics.still} simple />\r\n\t\t\t\t<strong>{option.name}</strong>\r\n\t\t\t\t{option.damage} damage, {option.maxHealth} health, {option.maxVelocity} speed, {option.score} score\r\n\t\t\t</InputSelect>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<div\r\n\t\tclass=\"level-container\"\r\n\t\tstyle=\"background: {background}; height: {height + 18}px;\"\r\n\t\tbind:this={levelContainer}\r\n\t\ton:mousedown={onMouseDown}\r\n\t\ton:mouseup={onMouseUp}\r\n\t\ton:mousemove={onMouseMove}\r\n\t\ton:contextmenu|preventDefault>\r\n\t\t<Level {blocks} {enemies} {width} {height} on:draw={onLevelDraw} />\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\timport Art from './Art.svelte'\r\n\timport project from '../stores/active-project-store'\r\n\timport Level from './Level.svelte'\r\n\timport makeThumbnail from '../services/make-thumbnail'\r\n\timport LevelPreview from './LevelPreview.svelte'\r\n\timport InputSelect from './InputSelect.svelte'\r\n\r\n\texport let background = null\r\n\r\n\t// each block passed to <Level> needs x, y, width, height, png\r\n\texport let thumbnail\r\n\texport let blocks = []\r\n\texport let enemies = []\r\n\r\n\t$: if (blocks != null && blocks.some(b => b.png != null)) {\r\n\t\tblocks = blocks.map(b => {\r\n\t\t\tconst { png, ...otherProps } = b\r\n\t\t\treturn otherProps\r\n\t\t})\r\n\t}\r\n\r\n\tconst blockSize = 40\r\n\r\n\tlet selectedBlock = null\r\n\tlet selectedEnemy = null\r\n\tlet mouseDown = false\r\n\r\n\tlet levelContainer\r\n\tlet canvas\r\n\tconst thumbnailScale = 8\r\n\tfunction onLevelDraw(e) {\r\n\t\tconst canvas = e.detail\r\n\t\tthumbnail = makeThumbnail(canvas, width / thumbnailScale, height / thumbnailScale)\r\n\t}\r\n\r\n\t// todo let them draw higher, use wasd or arrows to navigate around level rather than scrolling\r\n\t// $: highestYUsed = blocks.length > 0 ? Math.max(...blocks.map(b => b.y + b.height)) : 0\r\n\t$: height = 600 //Math.max(400, highestYUsed + 300)\r\n\r\n\t$: highestXUsed = blocks.length > 0 ? Math.max(...blocks.map(b => b.x + b.width)) : 0\r\n\t$: width = Math.max(800, highestXUsed + 500)\r\n\r\n\tfunction selectBlock(name) {\r\n\t\tselectedBlock = name\r\n\t\tselectedEnemy = null\r\n\t}\r\n\r\n\tfunction selectEnemy(name) {\r\n\t\tselectedBlock = null\r\n\t\tselectedEnemy = name\r\n\t}\r\n\r\n\tfunction onPreviewPan(e) {\r\n\t\tconst centerTargetX = e.detail * thumbnailScale\r\n\t\tconst leftTargetX = Math.max(centerTargetX - levelContainer.clientWidth / 2, 0)\r\n\t\tlevelContainer.scroll(leftTargetX, 0)\r\n\t}\r\n\r\n\tfunction onMouseDown(e) {\r\n\t\t// if they right click or alt click, select whatever block they're hovering over\r\n\t\t// if no block is there, it selects null, which makes placeBlock erase the current block\r\n\t\tif (e.altKey || e.button !== 0) {\r\n\t\t\tselectedBlock = findBlockAtPosition(e)\r\n\t\t\tselectedEnemy = findEnemyAtPosition(e)\r\n\t\t}\r\n\r\n\t\tmouseDown = e.button === 0\r\n\t\tonMouseMove(e)\r\n\t}\r\n\r\n\tfunction onMouseMove(e) {\r\n\t\tif (mouseDown) {\r\n\t\t\tconst { x, y } = getEventItemPosition(e)\r\n\t\t\tplaceItem(x, y)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onMouseUp(e) {\r\n\t\tmouseDown = false\r\n\t}\r\n\r\n\tfunction findBlockAtPosition(e) {\r\n\t\tconst { x, y } = getEventItemPosition(e)\r\n\t\tconst block = blocks.find(b => b.x == x && b.y == y)\r\n\t\treturn block == null ? null : block.name\r\n\t}\r\n\r\n\tfunction findEnemyAtPosition(e) {\r\n\t\tconst { x, y } = getEventItemPosition(e)\r\n\t\tconst enemy = enemies.find(e => e.x == x && e.y == y)\r\n\t\treturn enemy == null ? null : enemy.name\r\n\t}\r\n\r\n\tfunction getEventItemPosition(e) {\r\n\t\treturn {\r\n\t\t\tx: Math.floor(e.offsetX / blockSize) * blockSize,\r\n\t\t\ty: Math.floor((height - e.offsetY) / blockSize) * blockSize,\r\n\t\t}\r\n\t}\r\n\r\n\tfunction placeItem(x, y) {\r\n\t\teraseItemAt(x, y)\r\n\t\tif (selectedBlock != null) {\r\n\t\t\tconst template = $project.blocks[selectedBlock]\r\n\t\t\tblocks = [\r\n\t\t\t\t...blocks,\r\n\t\t\t\t{\r\n\t\t\t\t\tname: selectedBlock,\r\n\t\t\t\t\tx,\r\n\t\t\t\t\ty,\r\n\t\t\t\t\twidth: blockSize,\r\n\t\t\t\t\theight: blockSize,\r\n\t\t\t\t},\r\n\t\t\t]\r\n\t\t} else if (selectedEnemy != null) {\r\n\t\t\tconst template = $project.enemies[selectedEnemy]\r\n\t\t\tenemies = [\r\n\t\t\t\t...enemies,\r\n\t\t\t\t{\r\n\t\t\t\t\tname: selectedEnemy,\r\n\t\t\t\t\tx,\r\n\t\t\t\t\ty,\r\n\t\t\t\t\twidth: template.width,\r\n\t\t\t\t\theight: template.height,\r\n\t\t\t\t},\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n\r\n\tfunction eraseItemAt(x, y) {\r\n\t\tblocks = blocks.filter(b => b.x != x || b.y != y)\r\n\t\tenemies = enemies.filter(e => e.x != x || e.y != y)\r\n\t}\r\n\r\n\tfunction hydrateEnemy(enemy) {\r\n\t\tconst template = $project.enemies[enemy.name]\r\n\t\treturn {\r\n\t\t\t...template,\r\n\t\t\t...enemy,\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.drawing-tool {\r\n\t\tposition: relative;\r\n\t\twidth: 1400px;\r\n\t}\r\n\r\n\t.tool-picker {\r\n\t\tmargin: 5px 0;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: row;\r\n\t\talign-items: top;\r\n\t}\r\n\t.tool-picker > div {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t.level-container {\r\n\t\toverflow-x: auto;\r\n\t\tmax-width: 100%;\r\n\t}\r\n</style>\r\n",
    "<div class=\"flex align-top\">\r\n\t<div class=\"sub-nav nav-container\">\r\n\t\t{#each tabs as t}\r\n\t\t\t<a class=\"sub-nav-item\" class:active={tab == t.name} href=\"{baseUrl}/{t.name}/new\">{t.name}</a>\r\n\t\t\t{#if t.name == tab}\r\n\t\t\t\t<div class=\"sub-nav\">\r\n\t\t\t\t\t<a href=\"{baseUrl}/{t.name}/new\" class=\"sub-nav-item\" class:new={store[activeName] == null}>+ New</a>\r\n\t\t\t\t\t{#each Object.keys(store).sort() as name}\r\n\t\t\t\t\t\t<a class=\"sub-nav-item\" class:active={activeName == name} href=\"{baseUrl}/{t.name}/{name}\">\r\n\t\t\t\t\t\t\t{#if tab != 'levels'}\r\n\t\t\t\t\t\t\t\t<Art name={tab == 'art' ? name : getGraphic(name, t.graphicKey)} scale={1} />\r\n\t\t\t\t\t\t\t{/if}\r\n\t\t\t\t\t\t\t<div class=\"flex-column\">\r\n\t\t\t\t\t\t\t\t<span>{name}</span>\r\n\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t{#if tab == 'levels'}\r\n\t\t\t\t\t\t\t\t\t\t<img src={store[name].thumbnail} class=\"level-thumbnail\" alt=\"\" />\r\n\t\t\t\t\t\t\t\t\t{/if}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t{/each}\r\n\t\t\t\t</div>\r\n\t\t\t{/if}\r\n\t\t{/each}\r\n\t</div>\r\n\t<div class=\"content-container\">\r\n\t\t<slot />\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\timport Art from './Art.svelte'\r\n\timport project from '../stores/active-project-store'\r\n\r\n\texport let tab\r\n\texport let activeName\r\n\texport let store\r\n\r\n\t$: baseUrl = `#/${$project.name}/build`\r\n\r\n\tconst tabs = [\r\n\t\t{ name: 'art' },\r\n\t\t{ name: 'blocks', graphicKey: 'graphic' },\r\n\t\t{ name: 'characters', graphicKey: 'graphics.still' },\r\n\t\t{ name: 'enemies', graphicKey: 'graphics.still' },\r\n\t\t{ name: 'levels', graphicKey: null },\r\n\t]\r\n\r\n\tfunction getGraphic(name, key) {\r\n\t\tlet item = store[name]\r\n\t\tkey.split('.').forEach(p => {\r\n\t\t\titem = item[p]\r\n\t\t})\r\n\t\treturn item\r\n\t}\r\n</script>\r\n\r\n<style lang=\"scss\">.nav-container {\n  width: 200px; }\n\n.content-container {\n  width: calc(100vw - 200px); }\n\n.sub-nav .sub-nav {\n  padding-left: 5px;\n  margin-left: 15px;\n  max-height: 60vh;\n  overflow-x: hidden;\n  overflow-y: auto;\n  border-left: 1px solid #eee; }\n  .sub-nav .sub-nav .sub-nav-item {\n    padding: 3px 7px; }\n\n.sub-nav .sub-nav-item {\n  padding: 5px 7px;\n  display: flex;\n  flex-direction: row;\n  font-size: 13px;\n  color: #666; }\n  .sub-nav .sub-nav-item :global(img) {\n    margin-right: 5px;\n    height: 20px; }\n  .sub-nav .sub-nav-item:hover {\n    color: #28a745;\n    text-decoration: none;\n    font-weight: bold; }\n  .sub-nav .sub-nav-item.active {\n    color: #007bff;\n    font-weight: bold; }\n\n.sub-nav-item.new {\n  color: #28a745; }\n</style>\r\n",
    "<QuickDropdown btnClass=\"color-picker-toggle\" noCaret bind:isOpen>\r\n\t<span slot=\"label\">\r\n\t\t<div class=\"color-choice\" style=\"background: {getBackground(value)}\" title=\"Change color\" />\r\n\t</span>\r\n\t<div class=\"color-picker-choices\">\r\n\t\t{#each colors as colorGroup}\r\n\t\t\t<div class=\"color-group\">\r\n\t\t\t\t{#each colorGroup as color}\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclass=\"color-choice\"\r\n\t\t\t\t\t\tclass:selected={value == color}\r\n\t\t\t\t\t\ton:click={() => select(color)}\r\n\t\t\t\t\t\tstyle=\"background: {getBackground(color)}; width: {colorSize}px; height: {colorSize}px;\" />\r\n\t\t\t\t{/each}\r\n\t\t\t</div>\r\n\t\t{/each}\r\n\t</div>\r\n</QuickDropdown>\r\n\r\n<script>\r\n\timport QuickDropdown from './QuickDropdown.svelte'\r\n\timport { createEventDispatcher } from 'svelte'\r\n\tconst dispatch = createEventDispatcher()\r\n\r\n\texport let value = 'transparent'\r\n\tlet alpha = 255\r\n\tlet isOpen = false\r\n\r\n\tfunction select(color) {\r\n\t\tvalue = color\r\n\t\tdispatch('change', color)\r\n\t\tisOpen = false\r\n\t}\r\n\r\n\tfunction getBackground(color) {\r\n\t\treturn color != 'transparent' ? color : 'repeating-linear-gradient(-45deg, transparent, #eee 10px)'\r\n\t}\r\n\r\n\t// super half-assed generated color groups\r\n\tconst colorSteps = 10\r\n\tconst colorDarknessSteps = 25\r\n\tconst rainbowIntervals = [rgb(255, 0, 0), rgb(255, 255, 0), rgb(0, 255, 0), rgb(0, 255, 255), rgb(0, 0, 255), rgb(255, 0, 255)]\r\n\tconst colorSize = 600 / colorSteps / rainbowIntervals.length\r\n\tlet colors = []\r\n\t$: if (alpha != null)\r\n\t\tcolors = (function () {\r\n\t\t\tlet result = []\r\n\t\t\tlet rainbow = []\r\n\t\t\tfor (let i = 0; i < rainbowIntervals.length; i++) {\r\n\t\t\t\trainbow = rainbow.concat(\r\n\t\t\t\t\tlerpColorsBetween(rainbowIntervals[i], i == rainbowIntervals.length - 1 ? rainbowIntervals[0] : rainbowIntervals[i + 1], colorSteps).slice(\r\n\t\t\t\t\t\t0,\r\n\t\t\t\t\t\tcolorSteps - 1\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tlet blackToGreySteps = rainbowIntervals.length * (colorSteps - 1)\r\n\t\t\tresult.push(lerpColorsBetween(rgb(255, 255, 255), rgb(0, 0, 0), blackToGreySteps))\r\n\r\n\t\t\tfor (let i = 1; i < colorDarknessSteps; i++) result.push(rainbow.map(r => darken(r, i / (colorDarknessSteps - 1))))\r\n\t\t\tfor (let i = 1; i < colorDarknessSteps - 1; i++) result.push(rainbow.map(r => lighten(r, i / (colorDarknessSteps - 1))))\r\n\r\n\t\t\treturn result.map(group => group.map(c => `rgba(${c.r}, ${c.g}, ${c.b}, ${alpha})`))\r\n\t\t})()\r\n\r\n\tfunction rgb(r, g, b) {\r\n\t\treturn { r, g, b }\r\n\t}\r\n\r\n\tfunction lerpColorsBetween(color1, color2, steps) {\r\n\t\treturn [...Array(steps)].map((_, t) => lerpRGB(color1, color2, t / (steps - 1)))\r\n\t}\r\n\r\n\tfunction lerpRGB(color1, color2, t) {\r\n\t\treturn {\r\n\t\t\tr: Math.round(color1.r + (color2.r - color1.r) * t),\r\n\t\t\tg: Math.round(color1.g + (color2.g - color1.g) * t),\r\n\t\t\tb: Math.round(color1.b + (color2.b - color1.b) * t),\r\n\t\t}\r\n\t}\r\n\r\n\tfunction lighten(color, t) {\r\n\t\treturn {\r\n\t\t\tr: Math.min(Math.round(color.r + (255 - color.r) * t), 255),\r\n\t\t\tg: Math.min(Math.round(color.g + (255 - color.g) * t), 255),\r\n\t\t\tb: Math.min(Math.round(color.b + (255 - color.b) * t), 255),\r\n\t\t}\r\n\t}\r\n\r\n\tfunction darken(color, t) {\r\n\t\treturn {\r\n\t\t\tr: Math.max(Math.round(color.r - 255 * (1 - t)), 0),\r\n\t\t\tg: Math.max(Math.round(color.g - 255 * (1 - t)), 0),\r\n\t\t\tb: Math.max(Math.round(color.b - 255 * (1 - t)), 0),\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style lang=\"scss\">:global(.color-picker-toggle .color-choice) {\n  border-radius: 3px;\n  height: 31px;\n  width: 48px;\n  padding: 12px 15px;\n  -webkit-box-shadow: 0 1px 10px 4px rgba(0, 0, 0, 0.08);\n  -moz-box-shadow: 0 1px 10px 4px rgba(0, 0, 0, 0.08);\n  box-shadow: 0 1px 10px 4px rgba(0, 0, 0, 0.08); }\n\n.color-group {\n  clear: both;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start; }\n  .color-group:first-child {\n    margin-bottom: 10px; }\n\n.color-choice {\n  position: relative;\n  cursor: pointer; }\n  .color-choice:focus {\n    outline: none; }\n\n.color-picker-choices {\n  padding: 5px; }\n  .color-picker-choices .color-choice {\n    height: 30px;\n    z-index: 9;\n    color: #fff; }\n    .color-picker-choices .color-choice:hover, .color-picker-choices .color-choice.selected {\n      -webkit-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 1px 15px 4px rgba(0, 0, 0, 0.14);\n      -moz-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 1px 15px 4px rgba(0, 0, 0, 0.14);\n      box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 1px 15px 4px rgba(0, 0, 0, 0.14);\n      z-index: 10;\n      transform: scale(1.5);\n      border: 1px solid white; }\n</style>\r\n",
    "<div class=\"form-group\">\r\n\t<label>\r\n\t\t<slot />\r\n\t</label>\r\n\t<div class=\"card bg-light mb-2\">\r\n\t\t<div class=\"card-body\">\r\n\t\t\t<table class=\"table\">\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th />\r\n\t\t\t\t\t\t{#if requireKeybinds}\r\n\t\t\t\t\t\t\t<th>Key</th>\r\n\t\t\t\t\t\t{:else}\r\n\t\t\t\t\t\t\t<th>Range</th>\r\n\t\t\t\t\t\t{/if}\r\n\t\t\t\t\t\t<th>Name</th>\r\n\t\t\t\t\t\t<th>Character graphic</th>\r\n\t\t\t\t\t\t<th>Damage per hit</th>\r\n\t\t\t\t\t\t<th>Attack rate (MS)</th>\r\n\t\t\t\t\t\t<th>Projectile?</th>\r\n\t\t\t\t\t\t<th>Projectile Graphic</th>\r\n\t\t\t\t\t\t<th>Projectile Velocity</th>\r\n\t\t\t\t\t\t<!-- <th>Projectile Gravity Multiplier</th> -->\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{#each abilities as a, i}\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-danger\" on:click={() => removeAbility(i)}>\r\n\t\t\t\t\t\t\t\t\t<Icon data={removeIcon} />\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t{#if requireKeybinds}\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<InputSelect name=\"ability-key-{i}\" inline options={availableKeys} let:option bind:value={a.key}>{option.value}</InputSelect>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t{:else}\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<input type=\"number\" min={0} max={10000} bind:value={a.range} />\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t{/if}\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<input type=\"text\" bind:value={a.name} />\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<FieldArtPicker name=\"ability-graphics-character-{i}\" bind:value={a.graphics.character} placeholder=\"Character graphic\" />\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<input type=\"number\" bind:value={a.damage} />\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<input type=\"number\" bind:value={a.attackRateMs} min={0} max={120000} />\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" bind:checked={a.projectile} />\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t{#if a.projectile}\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<FieldArtPicker name=\"ability-graphics-projectile-{i}\" bind:value={a.graphics.projectile} placeholder=\"Projectile graphic\" />\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<input type=\"number\" bind:value={a.projectileVelocity} min={0} max={10000} />\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<!-- <td>\r\n\t\t\t\t\t\t\t\t\t<input type=\"number\" bind:value={a.projectileGravityMultiplier} min={0} max={1} step={0.01} />\r\n\t\t\t\t\t\t\t\t</td> -->\r\n\t\t\t\t\t\t\t{:else}\r\n\t\t\t\t\t\t\t\t<td colspan=\"2\" />\r\n\t\t\t\t\t\t\t{/if}\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t{/each}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t</div>\r\n\t<div>\r\n\t\t<button on:click={addAbility} class=\"btn btn-success btn-sm\" type=\"button\">\r\n\t\t\t<Icon data={plusIcon} />\r\n\t\t\tAdd ability\r\n\t\t</button>\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\timport { plus as plusIcon, remove as removeIcon } from 'svelte-awesome/icons'\r\n\timport FieldArtPicker from './FieldArtPicker.svelte'\r\n\timport FieldCheckbox from './FieldCheckbox.svelte'\r\n\timport FieldNumber from './FieldNumber.svelte'\r\n\timport FieldText from './FieldText.svelte'\r\n\timport Icon from 'svelte-awesome'\r\n\timport InputSelect from './InputSelect.svelte'\r\n\r\n\texport let abilities = []\r\n\texport let requireKeybinds = true // whether to show key bind field\r\n\r\n\tconst availableKeys = ['Q', 'W', 'E', 'R']\r\n\r\n\tfunction addAbility() {\r\n\t\tabilities = abilities.concat(createDefaultAbility())\r\n\t}\r\n\r\n\tfunction removeAbility(i) {\r\n\t\tabilities.splice(i, 1)\r\n\t\tabilities = abilities\r\n\t}\r\n\r\n\tfunction createDefaultAbility() {\r\n\t\treturn {\r\n\t\t\tname: '',\r\n\t\t\tkey: 'R',\r\n\t\t\tprojectile: false,\r\n\t\t\trange: 400,\r\n\t\t\tdamage: 50,\r\n\t\t\tattackRateMs: 500,\r\n\t\t\tprojectileVelocity: 500,\r\n\t\t\tprojectileGravityMultiplier: 0.1,\r\n\r\n\t\t\tgraphics: {\r\n\t\t\t\tcharacter: null,\r\n\t\t\t\tprojectile: null,\r\n\t\t\t},\r\n\r\n\t\t\t// TODO: settings for emitters or other cool stuff Phaser can do?\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t\t</div>\r\n\t</div>\r\n{/if}\r\n\r\n<FieldCheckbox name=\"canFireProjectiles\" bind:checked={input.canFireProjectiles}>\r\n\tCan fire projectiles? (Note: game doesn't actually support this yet, but you can set it up for now)\r\n</FieldCheckbox>\r\n{#if input.canFireProjectiles}\r\n\t<div class=\"card bg-light mb-3\">\r\n\t\t<div class=\"card-body\">\r\n\t\t\t<FieldNumber name=\"projectileDamage\" bind:value={input.projectileDamage} min={0}>Projectile damage</FieldNumber>\r\n\t\t\t<FieldNumber name=\"projectileVelocity\" bind:value={input.projectileVelocity} min={0} max={300}>Projectile velocity</FieldNumber>\r\n\t\t\t<FieldNumber name=\"projectileYStart\" bind:value={input.projectileYStart} min={0} max={300}>Projectile start height</FieldNumber>\r\n\t\t\t<FieldNumber min={0} max={2} step={0.1} bind:value={input.projectileGravityMultiplier}>Projectile gravity multiplier</FieldNumber>\r\n\t\t\t<FieldArtPicker bind:value={input.graphicProjectile}>Projectile graphic</FieldArtPicker>\r\n\t\t</div>\r\n\t\t{#if input.graphicProjectile != null}\r\n\t\t\t<div class=\"motion-preview\">\r\n\t\t\t\t<Art name={input.graphics.still} />\r\n\t\t\t\t<img\r\n\t\t\t\t\tsrc={$project.art[input.graphicProjectile].png}\r\n\t\t\t\t\tstyle=\"position: absolute; bottom: {projectileY}px; left: {$project.art[input.graphicProjectile].width * 2 + projectileX}px\"\r\n\t\t\t\t\talt=\"\" />\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\t</div>\r\n{/if}<script>\r\n\timport { onDestroy } from 'svelte'\r\n\timport Icon from 'svelte-awesome'\r\n\timport { spinner } from 'svelte-awesome/icons'\r\n\timport FieldNumber from './FieldNumber.svelte'\r\n\timport FieldArtPicker from './FieldArtPicker.svelte'\r\n\timport FieldCheckbox from './FieldCheckbox.svelte'\r\n\timport project from '../stores/active-project-store'\r\n\timport Art from './Art.svelte'\r\n\r\n\t// export let abilities = {}\r\n\r\n\t// todo kill this\r\n\texport let input = {}\r\n\r\n\t// animation preview stuff\r\n\tlet projectileX = 0\r\n\tlet projectilePosDir = 1\r\n\tlet projectileY = 0\r\n\tlet projectileVY = 0\r\n\r\n\tlet lastRequestedFrame\r\n\tlet previewFrame = 0\r\n\tanimationLoop()\r\n\tfunction animationLoop() {\r\n\t\tpreviewFrame++\r\n\r\n\t\t// move the projectile if there is one\r\n\t\tprojectileX += (input.projectileVelocity || 0) * projectilePosDir\r\n\t\tprojectileY += projectileVY\r\n\t\tprojectileVY -= 1 * input.projectileGravityMultiplier\r\n\t\tif (previewFrame % 50 == 0) {\r\n\t\t\tprojectileX = 0\r\n\t\t\tprojectileY = input.projectileYStart\r\n\t\t\tprojectileVY = 0\r\n\t\t}\r\n\r\n\t\tlastRequestedFrame = window.requestAnimationFrame(animationLoop)\r\n\t}\r\n\r\n\tonDestroy(() => {\r\n\t\twindow.cancelAnimationFrame(lastRequestedFrame)\r\n\t})\r\n\r\n\t.motion-preview {\r\n\t\tposition: relative;\r\n\t\tbackground: #eee;\r\n\t\toverflow: hidden;\r\n\r\n\t\timg {\r\n\t\t\tposition: relative;\r\n\t\t}\r\n\t}\r\n\r\n\t:global(.motion-graphics-fields > div) {\r\n\t\tmargin-right: 5px;\r\n\t}\r\n*/\r\n</script>\r\n\r\n<style lang=\"scss\">.table thead th {\n  border-top: none; }\n</style>\r\n",
    "{#if player}\r\n\t<div class=\"game-over\" class:won>\r\n\t\t{#if won}\r\n\t\t\t<h1>You have guided {player.name} to victory. {level.name} complete!</h1>\r\n\t\t{:else}\r\n\t\t\t<h1>{player.name} is dead now. You really let him down.</h1>\r\n\t\t{/if}\r\n\t\t<h1>Final score: {score}</h1>\r\n\t\t<p>Press enter or space to restart.</p>\r\n\t</div>\r\n{/if}\r\n\r\n<script>\r\n\texport let score\r\n\texport let player\r\n\texport let won\r\n\texport let level\r\n</script>\r\n\r\n<style lang=\"scss\">.game-over {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  z-index: 10;\n  padding-top: 150px;\n  background: rgba(50, 0, 0, 0.5); }\n  .game-over.won {\n    background: rgba(0, 50, 0, 0.5); }\n\nh1 {\n  margin-top: 25x;\n  color: #fff;\n  font-size: 50px;\n  font-weight: 100; }\n\np {\n  color: #eee; }\n</style>\r\n",
    "<div contenteditable=\"true\" on:paste={onPaste} class=\"paste-container\" />\r\n{#if value != null}\r\n\t<img src={value} alt=\"\" />\r\n{/if}\r\n\r\n<script>\r\n\texport let value = null\r\n\r\n\tfunction onPaste(e) {\r\n\t\tconst items = (e.clipboardData || e.originalEvent.clipboardData).items\r\n\t\tfor (let index in items) {\r\n\t\t\tconst item = items[index]\r\n\t\t\tif (item.kind === 'file') {\r\n\t\t\t\tconst blob = item.getAsFile()\r\n\t\t\t\tconst reader = new FileReader()\r\n\t\t\t\treader.onload = function (event) {\r\n\t\t\t\t\tvalue = event.target.result\r\n\t\t\t\t}\r\n\t\t\t\t// data url!\r\n\t\t\t\t// callback(blob)\r\n\t\t\t\treader.readAsDataURL(blob)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.paste-container {\r\n\t\twidth: 100px;\r\n\t\theight: 100px;\r\n\t\tbackground: #eee;\r\n\t}\r\n</style>\r\n",
    "<div class=\"select\" class:inline class:disabled bind:this={container} data-test={name} id={name}>\r\n\t<div\r\n\t\tclass=\"btn btn-light {className}\"\r\n\t\tclass:btn-sm={sm}\r\n\t\tdata-test=\"{name}-btn\"\r\n\t\tclass:open={isOpen}\r\n\t\t{tabindex}\r\n\t\ton:click={open}\r\n\t\ton:focus={open}\r\n\t\ton:keydown={keyListener}\r\n\t\tbind:this={fakeField}>\r\n\t\t<div class=\"input-select-content\">\r\n\t\t\t{#if selectedOptions.length === 0 || (!multiple && selectedOptions[0].value)}{prefixLabel}{/if}\r\n\t\t\t{#each selectedOptions as option, index (option)}\r\n\t\t\t\t{#if multiple}\r\n\t\t\t\t\t{#if index > 0},{inline && index == selectedOptions.length - 1 ? ' and' : ''}{/if}\r\n\t\t\t\t\t<span class=\"select-input-text\">\r\n\t\t\t\t\t\t<slot {option}>\r\n\t\t\t\t\t\t\t{@html option.label}\r\n\t\t\t\t\t\t</slot>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t{:else}\r\n\t\t\t\t\t<span class=\"select-input-text\">\r\n\t\t\t\t\t\t<slot {option}>\r\n\t\t\t\t\t\t\t{@html option.label}\r\n\t\t\t\t\t\t</slot>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t{/if}\r\n\t\t\t{/each}\r\n\t\t\t{#if selectedOptions == null || selectedOptions.length === 0}\r\n\t\t\t\t<span class=\"select-input-text\">{placeholder != null ? placeholder : ''}</span>\r\n\t\t\t{/if}\r\n\t\t</div>\r\n\t\t<span class=\"dropdown-icon\">\r\n\t\t\t<Icon data={caretDownIcon} class=\"fw\" />\r\n\t\t</span>\r\n\t</div>\r\n\r\n\t{#if isOpen && !disabled}\r\n\t\t<div class=\"select-dropdown\" class:right>\r\n\t\t\t{#if filterable}\r\n\t\t\t\t<div class=\"filter\">\r\n\t\t\t\t\t<div class=\"input-group\">\r\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" bind:value={filter} placeholder={filterPlaceholder} on:keydown={keyListener} />\r\n\t\t\t\t\t\t<a class=\"input-group-append\" on:click|preventDefault={() => (filter = '')} href=\"/\" tabindex=\"-1\">\r\n\t\t\t\t\t\t\t<span class=\"input-group-text\">\r\n\t\t\t\t\t\t\t\t<Icon data={removeIcon} class=\"fw\" />\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t{/if}\r\n\t\t\t{#each filteredOptions as option, index}\r\n\t\t\t\t<div\r\n\t\t\t\t\tclass=\"item\"\r\n\t\t\t\t\tclass:selected={option.selected}\r\n\t\t\t\t\tclass:viewing={viewIndex == index}\r\n\t\t\t\t\tclass:disabled={option.disabled}\r\n\t\t\t\t\ton:click={() => (option.disabled ? null : toggle(option, index))}>\r\n\t\t\t\t\t<slot {option}>\r\n\t\t\t\t\t\t{@html option.label}\r\n\t\t\t\t\t</slot>\r\n\t\t\t\t</div>\r\n\t\t\t{:else}\r\n\t\t\t\t{#if filter != null && filter.length > 0}\r\n\t\t\t\t\t<div class=\"alert alert-warning\">No options match \"{filter}\"</div>\r\n\t\t\t\t{/if}\r\n\t\t\t{/each}\r\n\t\t</div>\r\n\t{/if}\r\n</div>\r\n\r\n<script>\r\n\timport Icon from 'svelte-awesome'\r\n\timport { remove as removeIcon, caretDown as caretDownIcon } from 'svelte-awesome/icons'\r\n\r\n\timport _filter from '../services/filter'\r\n\timport validator from '../services/validator'\r\n\timport { tick, getContext, createEventDispatcher } from 'svelte'\r\n\r\n\tconst dispatch = createEventDispatcher()\r\n\r\n\texport let name = null\r\n\texport let multiple = false\r\n\texport let prefixLabel = ''\r\n\r\n\t// placeholder for the main input\r\n\texport let placeholder = ''\r\n\r\n\t// pass an array of options\r\n\t// can be either simple values, or { value, label } objects\r\n\texport let options = null\r\n\r\n\t// optionally set what prop to use for an option's value.\r\n\t// by default we use 'option.value' if it's defined, else we use the option itself (assuming it to be a simple value type)\r\n\texport let valueProp = null\r\n\r\n\t// optionally set what prop to use for an option's label if you don't want to define a custom renderer.\r\n\t// by default we use 'option.label' if it's defined, else we use the option itself (assuming it to be a simple value type)\r\n\texport let labelProp = null\r\n\r\n\t// pass either a simple value, or an array of values if multiple\r\n\texport let value = null\r\n\tconst initialValue = value\r\n\r\n\tconst markDirty = getContext('markDirty')\r\n\t$: if (markDirty != null && value != null && !validator.equals(value, initialValue)) markDirty()\r\n\r\n\t// set filterable to true to allow filtering\r\n\texport let filterable = false\r\n\r\n\t// programmatically open if you want\r\n\texport let isOpen = false\r\n\r\n\t// prevents user from interacting\r\n\texport let disabled = false\r\n\r\n\t// class will get added to the form-control, for if you want to do form-control-lg, form-control-sm, etc to match the rest of your form\r\n\tlet className = ''\r\n\texport { className as class }\r\n\r\n\t// whether to display it inline\r\n\texport let inline = false\r\n\r\n\texport let sm = false\r\n\r\n\texport let right = false // lazy - make dropdown start from right of button instead of left, for when it's toward right edge of screen\r\n\r\n\tlet container = null\r\n\tlet fakeField = null\r\n\r\n\tconst tabindex = 0\r\n\r\n\t// you can also pass filter to preemptively filter options\r\n\texport let filter = ''\r\n\r\n\t// placeholder for the filter input\r\n\texport let filterPlaceholder = 'Filter'\r\n\r\n\t// option we're currently viewing w/ keyboard navigation\r\n\tlet viewIndex = -1\r\n\r\n\t// options to render, filtered if necessary\r\n\t$: filteredOptions = (() => {\r\n\t\tconst arr = optionsToArray(options, value)\r\n\t\treturn !filterable ? arr : _filter(arr, filter)\r\n\t})()\r\n\r\n\t// keep viewIndex within filteredOptions length\r\n\t$: {\r\n\t\tif (viewIndex > filteredOptions.length - 1) viewIndex = filteredOptions.length - 1\r\n\t\tif (viewIndex < -1) viewIndex = filterable ? -1 : -1\r\n\t}\r\n\r\n\t// if multiple...\r\n\t// make sure value is always array\r\n\t// make sure value is always sorted to match option order - just nice to pass the same order around regardless of user click order\r\n\t$: if (multiple && value) makeValueArray()\r\n\r\n\t// options to render in the selected box (so we can use the same slot logic)\r\n\t$: selectedOptions = optionsToArray(options, value).filter(option => (multiple ? value && value.indexOf(option.value) > -1 : value == option.value))\r\n\r\n\tfunction makeValueArray() {\r\n\t\tif (!Array.isArray(value)) value = [value]\r\n\t\telse\r\n\t\t\tvalue = optionsToArray(options, value)\r\n\t\t\t\t.filter(o => o.selected)\r\n\t\t\t\t.map(option => option.value)\r\n\t}\r\n\r\n\tfunction optionsToArray(_options, v) {\r\n\t\tconst arr =\r\n\t\t\t_options == null\r\n\t\t\t\t? []\r\n\t\t\t\t: _options.map(o => {\r\n\t\t\t\t\t\tconst isString = typeof o === 'string'\r\n\t\t\t\t\t\t// in case they pass a custom object with other keys they need in a custom label, we destructure the original option object\r\n\t\t\t\t\t\tconst option = isString ? {} : { ...o }\r\n\t\t\t\t\t\toption.value = isString ? o : valueProp != null ? o[valueProp] : o.value !== undefined ? o.value : o\r\n\t\t\t\t\t\toption.label = isString ? o : o[labelProp] !== undefined ? o[labelProp] : o.label !== undefined ? o.label : o\r\n\t\t\t\t\t\toption.selected = multiple ? v != null && v.indexOf(option.value) > -1 : v == option.value\r\n\t\t\t\t\t\toption.disabled = o.disabled === undefined ? false : o.disabled\r\n\t\t\t\t\t\treturn option\r\n\t\t\t\t  })\r\n\t\treturn arr\r\n\t}\r\n\r\n\tfunction toggle(option, setViewIndex) {\r\n\t\tif (multiple) {\r\n\t\t\tvalue = option.selected ? (value || []).filter(v => v != option.value) : (value || []).concat(option.value)\r\n\t\t\t// if user clicked an option in multi-select, refocus the fakeField\r\n\t\t\tif (document.activeElement != fakeField) focusField()\r\n\t\t} else {\r\n\t\t\tvalue = option.value\r\n\t\t\tclose()\r\n\t\t}\r\n\t\tif (setViewIndex != null) viewIndex = setViewIndex\r\n\t\tdispatch('change', value)\r\n\t}\r\n\r\n\tasync function open() {\r\n\t\tif (disabled) return\r\n\t\tisOpen = true\r\n\t\tconst selected = multiple ? (value != null && value.length > 0 ? value[0] : null) : value\r\n\t\tviewIndex = selected != null ? filteredOptions.findIndex(o => o.value === selected) : -1\r\n\t\tdocument.addEventListener('mousedown', clickListener)\r\n\t\tdocument.addEventListener('touchstart', clickListener)\r\n\t\tawait tick()\r\n\t\tif (isOpen) focusField()\r\n\t}\r\n\r\n\tfunction close() {\r\n\t\t// focus the non-field so tabbing/shift-tabbing works after close\r\n\t\tfocusField()\r\n\t\tisOpen = false\r\n\t\tdocument.removeEventListener('mousedown', clickListener)\r\n\t\tdocument.removeEventListener('touchstart', clickListener)\r\n\t}\r\n\r\n\tfunction keyListener(e) {\r\n\t\t// if tab, close and let them out\r\n\t\tif (e.code == 'Tab') {\r\n\t\t\tclose()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// otherwise, if we're not open, any key should open\r\n\t\tif (!isOpen) {\r\n\t\t\t// except shift, so shift-tab doesn't open before closing immediately anyway\r\n\t\t\t// and up, cuz it feels weird\r\n\t\t\tif (e.code == 'ShiftLeft' || e.code == 'ShiftRight' || e.code == 'ArrowUp') return\r\n\r\n\t\t\topen()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// otherwise, handle a few keys for navigating options and toggling them\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'Escape':\r\n\t\t\t\te.stopPropagation()\r\n\t\t\t\tclose()\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase 'Space':\r\n\t\t\tcase 'Enter':\r\n\t\t\t\tif (viewIndex != null && filteredOptions[viewIndex] != null) {\r\n\t\t\t\t\ttoggle(filteredOptions[viewIndex])\r\n\t\t\t\t\te.preventDefault()\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase 'ArrowUp':\r\n\t\t\t\tviewIndex--\r\n\t\t\t\tif ((filterable && viewIndex == -2) || (!filterable && viewIndex <= -1)) close()\r\n\r\n\t\t\t\te.preventDefault()\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase 'ArrowDown':\r\n\t\t\t\tif (!isOpen) open()\r\n\t\t\t\telse if (viewIndex < filteredOptions.length - 1) viewIndex++\r\n\t\t\t\te.preventDefault()\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\tfunction clickListener(e) {\r\n\t\tif (e.target.closest == null || e.target.closest('.select') !== container) close()\r\n\t}\r\n\r\n\tfunction focusField() {\r\n\t\tif (fakeField && !filterable) fakeField.focus()\r\n\t}\r\n</script>\r\n\r\n<style lang=\"scss\">.select {\n  position: relative;\n  cursor: pointer; }\n  .select.inline {\n    display: inline-block;\n    vertical-align: top; }\n    .select.inline .select-dropdown .item {\n      white-space: nowrap; }\n  .select .btn {\n    display: flex;\n    flex-direction: row;\n    align-items: center; }\n    .select .btn .dropdown-icon {\n      margin-left: 0.6rem; }\n    .select .btn .select-input-text {\n      display: inline-block; }\n    .select .btn .input-select-content {\n      text-align: left;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      flex: 1; }\n  .select.disabled {\n    cursor: not-allowed; }\n    .select.disabled .input-select {\n      background-color: #f0f0f0;\n      color: #aaa; }\n\n.select-dropdown {\n  min-width: 100%;\n  position: absolute;\n  border-bottom: none;\n  border-top: none;\n  z-index: 1055;\n  top: 100%;\n  left: 0;\n  -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\n  background-color: #fff; }\n  .select-dropdown.right {\n    left: auto;\n    right: 0; }\n  .select-dropdown > .filter {\n    padding: 2px; }\n  .select-dropdown > .item {\n    cursor: pointer;\n    border-bottom: 1px solid #efefef;\n    padding: 8px 16px;\n    min-width: 150px; }\n    .select-dropdown > .item:hover, .select-dropdown > .item.viewing {\n      /*when hovering an item or when navigating through the items using the arrow keys*/\n      background-color: #eee; }\n    .select-dropdown > .item.selected {\n      background-color: #007bff;\n      color: #ffffff; }\n      .select-dropdown > .item.selected.viewing {\n        background-color: #006fe6; }\n    .select-dropdown > .item.disabled {\n      background-color: #f0f0f0;\n      color: #aaa;\n      cursor: not-allowed; }\n\n:global(.fw) {\n  width: 1.5em; }\n</style>\r\n",
    "<div class=\"instructions\">\r\n\t<table>\r\n\t\t{#each keyBinds as bind}\r\n\t\t\t<tr>\r\n\t\t\t\t<td>{bind.key}</td>\r\n\t\t\t\t<td>= {bind.action}</td>\r\n\t\t\t</tr>\r\n\t\t{/each}\r\n\t</table>\r\n</div>\r\n\r\n<script>\r\n\tconst keyBinds = [\r\n\t\t{\r\n\t\t\tkey: 'Left + Right Arrow',\r\n\t\t\taction: 'Move',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Space',\r\n\t\t\taction: 'Jump',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'R',\r\n\t\t\taction: 'Spin Attack / Shield',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'Enter',\r\n\t\t\taction: 'Restart',\r\n\t\t},\r\n\t\t// {\r\n\t\t// \tkey: 'P or Escape',\r\n\t\t// \taction: 'Pause',\r\n\t\t// },\r\n\t]\r\n</script>\r\n\r\n<style>\r\n\t.instructions {\r\n\t\tpadding: 10px;\r\n\t}\r\n\r\n\ttable td {\r\n\t\tfont-size: 12px;\r\n\t}\r\n\r\n\ttable tr td:first-child {\r\n\t\ttext-align: right;\r\n\t}\r\n\ttable tr td:last-child {\r\n\t\ttext-align: left;\r\n\t}\r\n</style>\r\n",
    "<canvas bind:this={canvas} {width} {height} />\r\n\r\n<script>\r\n\timport { createEventDispatcher } from 'svelte'\r\n\timport project from '../stores/active-project-store'\r\n\r\n\texport let width = 0\r\n\texport let height = 0\r\n\texport let blocks = []\r\n\texport let enemies = null\r\n\texport let playing = false\r\n\r\n\tconst dispatch = createEventDispatcher()\r\n\tconst imageCache = {}\r\n\r\n\tlet canvas\r\n\tlet context\r\n\r\n\t$: if (canvas != null) {\r\n\t\tcontext = canvas.getContext('2d')\r\n\t}\r\n\t$: if (blocks != null && width != null && height != null && context != null) {\r\n\t\tcontext.clearRect(0, 0, width, height)\r\n\t\tcontext.imageSmoothingEnabled = false\r\n\t\tblocks.forEach(b => drawOnCanvas($project.blocks[b.name].graphic, b.x, b.y))\r\n\t\tif (enemies != null) {\r\n\t\t\tenemies.forEach(e => drawOnCanvas($project.enemies[e.name].graphics.still, e.x, e.y))\r\n\t\t}\r\n\t\tdispatch('draw', canvas)\r\n\t}\r\n\r\n\tfunction drawOnCanvas(artName, x, y) {\r\n\t\tlet art = $project.art[artName]\r\n\t\tlet src = art.png\r\n\t\tlet image = imageCache[artName]\r\n\r\n\t\tconst drawThisImage = () => {\r\n\t\t\tconst draw = () => {\r\n\t\t\t\tconst dx = x\r\n\t\t\t\tconst dy = height - y - art.height\r\n\t\t\t\t// if animated, only draw first frame\r\n\t\t\t\tconst dw = art.animated ? art.frameWidth : art.width\r\n\t\t\t\tconst dh = art.height\r\n\t\t\t\tcontext.drawImage(image, 0, 0, dw, dh, dx, dy, dw, dh)\r\n\t\t\t}\r\n\t\t\tif (playing) setTimeout(draw, 100)\r\n\t\t\telse draw()\r\n\t\t}\r\n\r\n\t\tif (image == null) {\r\n\t\t\timage = new Image()\r\n\t\t\timage.src = src\r\n\t\t\timageCache[artName] = image\r\n\t\t}\r\n\r\n\t\tif (image.complete) {\r\n\t\t\tdrawThisImage()\r\n\t\t} else {\r\n\t\t\tconst oldOnload = image.onload\r\n\t\t\timage.onload = () => {\r\n\t\t\t\tif (typeof oldOnload === 'function') oldOnload()\r\n\t\t\t\tdrawThisImage()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\tcanvas {\r\n\t\tdisplay: block;\r\n\t}\r\n</style>\r\n",
    "{#if level}\r\n\t<img\r\n\t\tsrc={level.thumbnail}\r\n\t\talt=\"level preview\"\r\n\t\tclass=\"level-preview\"\r\n\t\tclass:grabbing={mouseDown}\r\n\t\tstyle=\"background: {level.background}\"\r\n\t\ton:mousedown|preventDefault={onMouseDown}\r\n\t\ton:mousemove|preventDefault={onMouseMove}\r\n\t\ton:mouseup|preventDefault={onMouseUp} />\r\n{/if}\r\n\r\n<script>\r\n\timport { createEventDispatcher } from 'svelte'\r\n\texport let level\r\n\tconst dispatch = createEventDispatcher()\r\n\r\n\tlet mouseDown = false\r\n\tfunction onMouseDown(e) {\r\n\t\tmouseDown = true\r\n\t}\r\n\r\n\tfunction onMouseUp(e) {\r\n\t\tmouseDown = false\r\n\t}\r\n\r\n\tfunction onMouseMove(e) {\r\n\t\tif (mouseDown) dispatch('pan', e.offsetX)\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\timg {\r\n\t\tcursor: grab;\r\n\t}\r\n\t.grabbing {\r\n\t\tcursor: grabbing;\r\n\t}\r\n</style>\r\n",
    "<div class=\"paused\">\r\n\t<h1>Paused</h1>\r\n\t<p>Press p, escape, or space to resume.</p>\r\n</div>\r\n\r\n<style>\r\n\t.paused {\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground: rgba(0, 0, 0, 0.5);\r\n\t\ttext-align: center;\r\n\t\tz-index: 10;\r\n\t\tpadding-top: 150px;\r\n\t}\r\n\r\n\th1 {\r\n\t\tmargin-top: 25x;\r\n\t\tcolor: #fff;\r\n\t\tfont-size: 50px;\r\n\t\tfont-weight: 100;\r\n\t}\r\n\r\n\tp {\r\n\t\tcolor: #eee;\r\n\t}\r\n</style>\r\n",
    "<div class=\"game-window\">\r\n\t{#if level != null && character != null}\r\n\t\t{#if gameOver}\r\n\t\t\t<GameOver {score} {player} won={gameWon} {level} />\r\n\t\t{:else if paused}\r\n\t\t\t<Paused />\r\n\t\t{/if}\r\n\t\t<div bind:this={container} />\r\n\t{/if}\r\n\t<Instructions />\r\n</div>\r\n\r\n<script>\r\n\timport { magnet, image } from 'svelte-awesome/icons'\r\n\timport { onMount, onDestroy } from 'svelte'\r\n\timport { rgbaStringToHex } from '../services/rgba-to-hex'\r\n\timport Enemy from './PhaserGame/Enemy'\r\n\timport GameOver from './GameOver.svelte'\r\n\timport HealthBar from './PhaserGame/HealthBar'\r\n\timport Instructions from './Instructions.svelte'\r\n\timport Paused from './Paused.svelte'\r\n\timport Player from './PhaserGame/Player'\r\n\timport project from '../stores/active-project-store'\r\n\r\n\texport let level = null\r\n\texport let character = null\r\n\r\n\t// TODO: status text\r\n\t//   level: {}\r\n\t//   score: {}\r\n\t//   enemies left: {}\r\n\r\n\t// TODO: make editable in level or on individual enemies\r\n\tconst leashRange = 400\r\n\r\n\tconst gravityPixelsPerSecond = 2000\r\n\r\n\tlet container\r\n\r\n\tlet gameOver\r\n\tlet gameWon\r\n\tlet score\r\n\tlet paused\r\n\r\n\tlet blocks\r\n\tlet simpleBlocks\r\n\tlet effectBlocks\r\n\tlet consumableBlocks\r\n\r\n\tlet worldSimpleBlocks\r\n\tlet worldEffectBlocks\r\n\tlet worldConsumableBlocks\r\n\r\n\tlet config\r\n\tlet game\r\n\tlet preloadedData\r\n\tlet cursors\r\n\tlet keys = {}\r\n\tlet player\r\n\tlet enemies\r\n\r\n\tlet gameWidth = 1200\r\n\tlet viewportHeight = 600\r\n\r\n\tlet maxLevelX\r\n\tlet maxLevelY\r\n\r\n\tonMount(() => {\r\n\t\t// sort blocks by x, then y\r\n\t\tblocks = level.blocks\r\n\t\t\t.sort((a, b) => {\r\n\t\t\t\tif (a.x > b.x) return 1\r\n\t\t\t\telse if (b.x > a.x) return -1\r\n\r\n\t\t\t\tif (a.y > b.y) return -1\r\n\t\t\t\telse if (b.y > a.y) return 1\r\n\r\n\t\t\t\treturn 0\r\n\t\t\t})\r\n\t\t\t.map(b => ({\r\n\t\t\t\t...$project.blocks[b.name],\r\n\t\t\t\t...b,\r\n\t\t\t}))\r\n\r\n\t\teffectBlocks = blocks.filter(b => (b.damage > 0 || b.throwOnTouch) && !b.consumable)\r\n\t\tsimpleBlocks = blocks.filter(b => (b.damage == null || b.damage == 0) && !b.throwOnTouch && !b.consumable)\r\n\t\tconsumableBlocks = blocks.filter(b => b.consumable)\r\n\r\n\t\tstart()\r\n\t})\r\n\r\n\t// $: if (level != null && character != null && container != null) start()\r\n\r\n\tfunction start() {\r\n\t\tdestroyGame()\r\n\t\tpreload().then(() => {\r\n\t\t\tif (container == null) return\r\n\r\n\t\t\tgameOver = false\r\n\t\t\tgameWon = false\r\n\t\t\tpaused = false\r\n\t\t\tscore = 0\r\n\t\t\tgameWidth = window.innerWidth\r\n\r\n\t\t\tmaxLevelX = Math.max(...level.blocks.map(b => b.x + b.width))\r\n\t\t\tmaxLevelY = Math.max(...level.blocks.map(b => b.y + b.height))\r\n\r\n\t\t\tconfig = {\r\n\t\t\t\ttype: Phaser.AUTO,\r\n\t\t\t\tparent: container,\r\n\t\t\t\tscene: {\r\n\t\t\t\t\tcreate: onCreate,\r\n\t\t\t\t\tupdate: onUpdate,\r\n\t\t\t\t},\r\n\t\t\t\tphysics: {\r\n\t\t\t\t\tdefault: 'arcade',\r\n\t\t\t\t\tarcade: {\r\n\t\t\t\t\t\tgravity: { y: gravityPixelsPerSecond },\r\n\t\t\t\t\t\t// debug: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\twidth: gameWidth,\r\n\t\t\t\theight: viewportHeight,\r\n\t\t\t\tpixelArt: true,\r\n\t\t\t}\r\n\r\n\t\t\tgame = new Phaser.Game(config)\r\n\t\t})\r\n\t}\r\n\r\n\tonDestroy(() => {\r\n\t\tdestroyGame()\r\n\t})\r\n\r\n\tfunction destroyGame() {\r\n\t\tif (game != null) {\r\n\t\t\tgame.destroy()\r\n\t\t\tcontainer.querySelectorAll('*').forEach(n => n.remove())\r\n\t\t}\r\n\t}\r\n\r\n\tfunction preload() {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst distinctBlocks = [...new Set(level.blocks.map(b => b.name))].map(n => $project.blocks[n]).filter(b => b != null)\r\n\t\t\tconst distinctEnemies = [...new Set(level.enemies.map(e => e.name))].map(n => $project.enemies[n]).filter(e => e != null)\r\n\t\t\tconst allArt = [\r\n\t\t\t\t...new Set([\r\n\t\t\t\t\t// blocks\r\n\t\t\t\t\t...distinctBlocks.map(b => b.graphic),\r\n\r\n\t\t\t\t\t// player\r\n\t\t\t\t\t...Object.keys(character.graphics).map(key => character.graphics[key]),\r\n\r\n\t\t\t\t\t// player abilities\r\n\t\t\t\t\t...character.abilities.flatMap(a => Object.keys(a.graphics).map(key => a.graphics[key])),\r\n\r\n\t\t\t\t\t// enemies\r\n\t\t\t\t\t...distinctEnemies.flatMap(e => Object.keys(e.graphics).map(key => e.graphics[key])),\r\n\r\n\t\t\t\t\t// enemy abilities\r\n\t\t\t\t\t...distinctEnemies\r\n\t\t\t\t\t\t.filter(e => e.abilities != null)\r\n\t\t\t\t\t\t.flatMap(e => e.abilities.flatMap(a => Object.keys(a.graphics).map(key => a.graphics[key]))),\r\n\t\t\t\t]),\r\n\t\t\t].filter(name => name != null)\r\n\t\t\tPromise.all(allArt.map(name => preloadArt(name))).then(data => {\r\n\t\t\t\tpreloadedData = data\r\n\t\t\t\tresolve()\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tfunction preloadArt(name) {\r\n\t\tconst art = $project.art[name]\r\n\t\treturn new Promise((res, rej) => {\r\n\t\t\tconst image = new Image()\r\n\t\t\timage.onload = () => {\r\n\t\t\t\tres({\r\n\t\t\t\t\t...art,\r\n\t\t\t\t\timage,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\timage.src = art.png\r\n\t\t})\r\n\t}\r\n\r\n\tfunction onCreate() {\r\n\t\t// set bg color\r\n\t\tthis.cameras.main.setBackgroundColor(rgbaStringToHex(level.background))\r\n\r\n\t\t// set up textures and sprites for all blocks, character, and enemies in level\r\n\t\tpreloadedData.forEach(art => {\r\n\t\t\tif (art.animated) {\r\n\t\t\t\t// animated spritesheet\r\n\t\t\t\tthis.textures.addSpriteSheet(art.name, art.image, {\r\n\t\t\t\t\tframeWidth: art.frameWidth,\r\n\t\t\t\t\tframeHeight: art.height,\r\n\t\t\t\t})\r\n\t\t\t\tthis.anims.create({\r\n\t\t\t\t\tkey: getAnimationKey(art.name),\r\n\t\t\t\t\tframes: this.anims.generateFrameNumbers(art.name, {\r\n\t\t\t\t\t\tstart: 0,\r\n\t\t\t\t\t\tend: Math.ceil(art.width / art.frameWidth),\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tframeRate: art.frameRate,\r\n\t\t\t\t\trepeat: -1,\r\n\t\t\t\t\tyoyo: art.yoyo,\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\t// simple static image\r\n\t\t\t\tthis.textures.addImage(art.name, art.image)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\t// add blocks as static objects\r\n\t\t// TODO: block class to abstract this...\r\n\t\tworldSimpleBlocks = this.physics.add.staticGroup()\r\n\t\tsimpleBlocks.forEach(b => {\r\n\t\t\tconst template = $project.blocks[b.name]\r\n\t\t\tconst art = $project.art[template.graphic]\r\n\t\t\tconst block = worldSimpleBlocks.create(translateX(b.x, b.width), translateY(b.y, b.height), art.name)\r\n\t\t\tif (art.animated) block.anims.play(getAnimationKey(art.name), true)\r\n\t\t})\r\n\t\tworldEffectBlocks = this.physics.add.staticGroup()\r\n\t\teffectBlocks.forEach(b => {\r\n\t\t\tconst template = $project.blocks[b.name]\r\n\t\t\tconst art = $project.art[template.graphic]\r\n\t\t\tconst block = worldEffectBlocks.create(translateX(b.x, b.width), translateY(b.y, b.height), art.name)\r\n\t\t\tif (art.animated) block.anims.play(getAnimationKey(art.name), true)\r\n\t\t\tblock.damage = b.damage\r\n\t\t\tblock.throwOnTouch = b.throwOnTouch\r\n\t\t})\r\n\t\tworldConsumableBlocks = this.physics.add.staticGroup()\r\n\t\tconsumableBlocks.forEach(b => {\r\n\t\t\tconst template = $project.blocks[b.name]\r\n\t\t\tconst art = $project.art[template.graphic]\r\n\t\t\tconst block = worldConsumableBlocks.create(translateX(b.x, b.width), translateY(b.y, b.height), art.name)\r\n\t\t\tif (art.animated) block.anims.play(getAnimationKey(art.name), true)\r\n\t\t\tblock.damage = b.damage\r\n\t\t\tblock.throwOnTouch = b.throwOnTouch\r\n\t\t\tblock.consumable = true\r\n\t\t\tblock.healthOnConsume = b.healthOnConsume\r\n\t\t\tblock.scoreOnConsume = b.scoreOnConsume\r\n\t\t})\r\n\r\n\t\t// configure input\r\n\t\tkeys = {\r\n\t\t\tcursors: this.input.keyboard.createCursorKeys(),\r\n\t\t}\r\n\t\tconst keysWeCareAbout = ['SPACE', 'ENTER', 'Q', 'W', 'E', 'R']\r\n\t\tkeysWeCareAbout.forEach(k => {\r\n\t\t\tkeys[k] = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes[k])\r\n\t\t})\r\n\r\n\t\t// add player\r\n\t\tconst startingY =\r\n\t\t\ttranslateY(Math.max(...blocks.filter(b => b.x == 0).map(b => b.y)), blocks[0].height) - $project.art[character.graphics.still].height\r\n\t\tconst template = hydrateGraphics(character)\r\n\t\tplayer = this.physics.add.existing(\r\n\t\t\tnew Player(this, translateX(0, template.graphics.still.width), startingY, character.graphics.still.name, template, keys)\r\n\t\t)\r\n\t\tthis.physics.add.collider(player, worldSimpleBlocks)\r\n\t\tthis.physics.add.collider(player, worldEffectBlocks, onEffectBlockCollision)\r\n\t\tthis.physics.add.overlap(player, worldConsumableBlocks, onConsumableBlockOverlap)\r\n\r\n\t\t// add enemies\r\n\t\tenemies = this.physics.add.group()\r\n\t\tenemies.runChildUpdate = true\r\n\t\tlevel.enemies.forEach(e => {\r\n\t\t\tconst template = hydrateGraphics($project.enemies[e.name])\r\n\t\t\tconst enemy = new Enemy(\r\n\t\t\t\tthis,\r\n\t\t\t\ttranslateX(e.x, template.graphics.still.width),\r\n\t\t\t\ttranslateY(e.y, template.graphics.still.height),\r\n\t\t\t\ttemplate.graphics.still.name,\r\n\t\t\t\ttemplate,\r\n\t\t\t\tplayer\r\n\t\t\t)\r\n\t\t\tenemies.add(enemy)\r\n\t\t})\r\n\t\tthis.physics.add.collider(enemies, worldSimpleBlocks)\r\n\t\tthis.physics.add.collider(enemies, worldEffectBlocks, onEffectBlockCollision)\r\n\t\tthis.physics.add.overlap(player, enemies, onPlayerEnemyOverlap)\r\n\t\tplayer.enemies = enemies\r\n\r\n\t\t// camera and player bounds\r\n\t\tthis.physics.world.setBounds(0, 0, maxLevelX, maxLevelY + viewportHeight)\r\n\t\tthis.cameras.main.setBounds(0, -maxLevelY, maxLevelX, maxLevelY + viewportHeight)\r\n\t\tthis.cameras.main.startFollow(player)\r\n\t}\r\n\r\n\tfunction translateX(x, width) {\r\n\t\treturn x + width / 2\r\n\t}\r\n\r\n\tfunction translateY(y, height) {\r\n\t\treturn Math.max(maxLevelY, viewportHeight) - y - height / 2\r\n\t}\r\n\r\n\tfunction onEffectBlockCollision(sprite, block) {\r\n\t\tsprite.damage(block.damage)\r\n\t\tif (block.throwOnTouch) sprite.setVelocityY(-1000)\r\n\t}\r\n\r\n\tfunction onConsumableBlockOverlap(sprite, block) {\r\n\t\tif (block.healthOnConsume) sprite.damage(-block.healthOnConsume)\r\n\t\tif (block.scoreOnConsume) score += block.scoreOnConsume\r\n\t\tif (block.throwOnTouch) sprite.setVelocityY(-1000)\r\n\t\tblock.disableBody(true, true)\r\n\t\tblock.destroy()\r\n\t}\r\n\r\n\tfunction onPlayerEnemyOverlap(player, enemy) {\r\n\t\tplayer.onEnemyOverlap(enemy)\r\n\t}\r\n\r\n\tfunction onUpdate() {\r\n\t\t// restart game\r\n\t\tif (Phaser.Input.Keyboard.JustDown(keys.ENTER) || (gameOver && Phaser.Input.Keyboard.JustDown(keys.SPACE))) start()\r\n\r\n\t\tif (gameOver) return\r\n\r\n\t\t// if player is dead or fell out bottom of world, they lost\r\n\t\tif (!player.alive) {\r\n\t\t\tthis.physics.pause()\r\n\t\t\tgameOver = true\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getAnimationKey(key) {\r\n\t\treturn `${key}.animation`\r\n\t}\r\n\r\n\tfunction hydrateGraphics(template) {\r\n\t\tconst copy = JSON.parse(JSON.stringify(template))\r\n\t\tcopy.graphics = hydrateGraphicsObject(copy.graphics)\r\n\t\tif (copy.abilities != null)\r\n\t\t\tcopy.abilities = copy.abilities.map(a => ({\r\n\t\t\t\t...a,\r\n\t\t\t\tgraphics: hydrateGraphicsObject(a.graphics),\r\n\t\t\t}))\r\n\t\treturn copy\r\n\t}\r\n\r\n\tfunction hydrateGraphicsObject(graphics) {\r\n\t\tObject.keys(graphics).forEach(name => {\r\n\t\t\tgraphics[name] = $project.art[graphics[name]] != null ? JSON.parse(JSON.stringify($project.art[graphics[name]])) : null\r\n\t\t\tif (graphics[name] != null && graphics[name].animated) graphics[name].width = graphics[name].frameWidth\r\n\t\t\treturn graphics[name]\r\n\t\t})\r\n\t\treturn graphics\r\n\t}\r\n</script>\r\n\r\n<style>\r\n\t.game-window {\r\n\t\twidth: 100%;\r\n\t\tposition: relative;\r\n\t}\r\n</style>\r\n",
    "<div bind:this={dropdownElement} class=\"quick-dropdown {className}\" data-test={dataTest}>\r\n\t<a\r\n\t\tclass={btnClass}\r\n\t\tclass:btn-default={!invalid}\r\n\t\tclass:btn-danger={invalid}\r\n\t\tclass:invalid={invalid && !isOpen}\r\n\t\tclass:disabled\r\n\t\t{id}\r\n\t\ton:click|preventDefault={toggle}\r\n\t\thref=\"/\"\r\n\t\ton:keydown={keydown}\r\n\t\t{tabindex}\r\n\t\tbind:this={buttonElement}>\r\n\t\t<slot name=\"label\">\r\n\t\t\t{#if label != null}\r\n\t\t\t\t<span>\r\n\t\t\t\t\t{@html label}\r\n\t\t\t\t</span>\r\n\t\t\t{/if}\r\n\t\t</slot>\r\n\t\t{#if !noCaret}\r\n\t\t\t<Icon data={caretDownIcon} />\r\n\t\t{/if}\r\n\t</a>\r\n\t{#if isOpen}\r\n\t\t<div class=\"quick-dropdown-menu {dropdownClass}\" bind:this={dropdownMenuElement} on:click={closeIfAnyClickCloses}>\r\n\t\t\t<slot />\r\n\t\t</div>\r\n\t{/if}\r\n</div>\r\n\r\n<script>\r\n\timport { createEventDispatcher, onDestroy } from 'svelte'\r\n\timport Icon from 'svelte-awesome'\r\n\timport { caretDown as caretDownIcon } from 'svelte-awesome/icons'\r\n\r\n\texport let isOpen = false\r\n\texport let dataTest = null\r\n\texport { className as class }\r\n\texport let btnClass = 'btn btn-light btn-sm'\r\n\texport let dropdownClass = 'below left'\r\n\texport let anyItemClickCloses = false\r\n\texport let noCaret = false\r\n\texport let autofocusFirstItem = false\r\n\texport let disabled = false\r\n\texport let label = null\r\n\texport let id = null\r\n\texport let invalid = false\r\n\r\n\tconst dispatch = createEventDispatcher()\r\n\tconst tabindex = 0\r\n\tlet dropdownElement = null\r\n\tlet buttonElement = null\r\n\tlet dropdownMenuElement = null\r\n\tlet className = ''\r\n\tlet lastMouseDownTarget = null\r\n\r\n\tonDestroy(close)\r\n\r\n\t$: if (isOpen) open()\r\n\telse close()\r\n\r\n\tfunction open() {\r\n\t\tisOpen = true\r\n\t\t// wait for next event loop (not just micro task as in tick()) so menu element is rendered\r\n\t\tsetTimeout(() => {\r\n\t\t\tif (autofocusFirstItem && dropdownMenuElement != null) {\r\n\t\t\t\tconst item = dropdownMenuElement.querySelector('input, label, a')\r\n\t\t\t\tif (item != null) item.focus()\r\n\t\t\t}\r\n\t\t\tdispatch('open')\r\n\t\t\tdocument.addEventListener('mousedown', trackLastMouseDownTarget)\r\n\t\t\tdocument.addEventListener('click', clickListener)\r\n\t\t})\r\n\t}\r\n\r\n\tfunction close() {\r\n\t\tdispatch('close')\r\n\t\tisOpen = false\r\n\t\tdocument.removeEventListener('mousedown', trackLastMouseDownTarget)\r\n\t\tdocument.removeEventListener('click', clickListener)\r\n\t}\r\n\r\n\tfunction trackLastMouseDownTarget(e) {\r\n\t\tlastMouseDownTarget = e.target\r\n\t}\r\n\r\n\tfunction clickListener() {\r\n\t\t// for click events, e.target is the last element the mouse was on, so use the element they initially put their mouse down on instead.\r\n\t\t// wait til they finish the click to determine if we need to close it or not, so that click handlers can fire before we close\r\n\t\t// e.g. if they select all text in a box with mouse and end their \"click\" outside the menu, don't close\r\n\t\tif (dropdownMenuElement == null || lastMouseDownTarget == null) return\r\n\r\n\t\t// if the element has since been removed from DOM, assume don't close--e.g. open an date picker, select date, calendar goes away, should keep quickdropdown open\r\n\t\tif (!document.body.contains(lastMouseDownTarget)) return\r\n\r\n\t\tconst clickedMenu = dropdownMenuElement === lastMouseDownTarget || dropdownMenuElement.contains(lastMouseDownTarget)\r\n\t\tif (!clickedMenu) {\r\n\t\t\t// console.log('closing', clickedMenu, anyItemClickCloses, dropdownMenuElement, lastMouseDownTarget, e.target)\r\n\t\t\tclose()\r\n\t\t}\r\n\t}\r\n\r\n\tfunction closeIfAnyClickCloses() {\r\n\t\tif (anyItemClickCloses) setTimeout(close, 0) // wait a bit so click registers prior to closing\r\n\t}\r\n\r\n\tfunction toggle() {\r\n\t\tisOpen ? close() : open()\r\n\t}\r\n\r\n\tfunction keydown(e) {\r\n\t\tconst key = e.which || e.keyCode\r\n\t\tswitch (key) {\r\n\t\t\tcase 13: // enter\r\n\t\t\tcase 32: // space\r\n\t\t\tcase 40: // down\r\n\t\t\t\topen()\r\n\t\t\t\te.preventDefault()\r\n\t\t\t\treturn\r\n\t\t\tcase 27: // esc\r\n\t\t\tcase 9: // tab\r\n\t\t\tcase 38: // up\r\n\t\t\t\tclose()\r\n\t\t\t\treturn\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style lang=\"scss\">.quick-dropdown {\n  position: relative; }\n  .quick-dropdown .quick-dropdown-menu {\n    border: none;\n    padding: 0;\n    border-radius: 4px;\n    position: absolute;\n    z-index: 10;\n    white-space: nowrap;\n    background: #fff;\n    -webkit-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 1px 15px 4px rgba(0, 0, 0, 0.14);\n    -moz-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 1px 15px 4px rgba(0, 0, 0, 0.14);\n    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 1px 15px 4px rgba(0, 0, 0, 0.14); }\n    .quick-dropdown .quick-dropdown-menu .list-group {\n      margin-bottom: 0; }\n    .quick-dropdown .quick-dropdown-menu .list-group-item.active {\n      background-color: #007bff; }\n\n.below {\n  top: 100%; }\n\n.left {\n  left: 0; }\n</style>\r\n",
    "<svelte:window on:keyup={onKeyUp} on:paste={onPaste} on:mouseup={onDrawMouseUp} />\r\n\r\n<BuildLayout tab=\"art\" activeName={input.name} store={$project.art}>\r\n\t<form on:submit|preventDefault={save}>\r\n\t\t<div class=\"flex mb-2\">\r\n\t\t\t<SaveBtn disabled={!hasChanges} />\r\n\t\t\t<input type=\"text\" class=\"form-control width-auto\" id=\"name\" name=\"name\" bind:value={input.name} />\r\n\r\n\t\t\t{#if !isAdding}\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-danger\" on:click={() => del(input.name)}>Delete</button>\r\n\t\t\t{/if}\r\n\t\t</div>\r\n\t</form>\r\n\r\n\t<div class=\"toolbar flex align-center\">\r\n\t\t<ColorPicker bind:value={selectedColor} on:change={() => (mode = mode == 'erase' ? 'paint' : mode)} />\r\n\r\n\t\t<div class=\"btn-group\">\r\n\t\t\t<button type=\"button\" class=\"btn btn-sm btn-{mode == 'paint' ? 'primary' : 'light'}\" on:click={() => (mode = 'paint')} title=\"Paint brush\">\r\n\t\t\t\t<Icon data={paintIcon} />\r\n\t\t\t</button>\r\n\t\t\t<button type=\"button\" class=\"btn btn-sm btn-{mode == 'fill' ? 'primary' : 'light'}\" on:click={() => (mode = 'fill')} title=\"Paint bucket\">\r\n\t\t\t\t<Icon data={fillIcon} />\r\n\t\t\t</button>\r\n\t\t\t<button type=\"button\" class=\"btn btn-sm btn-{mode == 'erase' ? 'primary' : 'light'}\" on:click={() => (mode = 'erase')} title=\"Eraser\">\r\n\t\t\t\t<Icon data={eraseIcon} />\r\n\t\t\t</button>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"btn-group\">\r\n\t\t\t<button type=\"button\" disabled={undos.length == 0} class=\"btn btn-default btn-sm\" on:click={undo}>\r\n\t\t\t\t<Icon data={undoIcon} />\r\n\t\t\t\t{undos.length > 0 ? undos.length : ''}\r\n\t\t\t</button>\r\n\t\t\t<button type=\"button\" disabled={redos.length == 0} class=\"btn btn-default btn-sm\" on:click={redo}>\r\n\t\t\t\t<Icon data={undoIcon} flip=\"horizontal\" />\r\n\t\t\t\t{redos.length > 0 ? redos.length : ''}\r\n\t\t\t</button>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"btn-group\">\r\n\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={flipX} title=\"Flip horizontal\">\r\n\t\t\t\t<Icon data={flipIcon} />\r\n\t\t\t</button>\r\n\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={flipY} title=\"Flip vertical\">\r\n\t\t\t\t<Icon data={flipIcon} style=\"transform: rotate(90deg);\" />\r\n\t\t\t</button>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"btn-group\">\r\n\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={moveLeft} title=\"Move left\">\r\n\t\t\t\t<Icon data={arrowLeftIcon} />\r\n\t\t\t</button>\r\n\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={moveRight} title=\"Move right\">\r\n\t\t\t\t<Icon data={arrowRightIcon} />\r\n\t\t\t</button>\r\n\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={moveUp} title=\"Move up\">\r\n\t\t\t\t<Icon data={arrowUpIcon} />\r\n\t\t\t</button>\r\n\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={moveDown} title=\"Move down\">\r\n\t\t\t\t<Icon data={arrowDownIcon} />\r\n\t\t\t</button>\r\n\t\t</div>\r\n\r\n\t\t<QuickDropdown label=\"Size\" dropdownClass=\"p-2\" on:open={startChangeSize}>\r\n\t\t\t<form on:submit|preventDefault={applyChangeSize}>\r\n\t\t\t\t<div class=\"flex\">\r\n\t\t\t\t\tW\r\n\t\t\t\t\t<input type=\"number\" min={1} max={1000} bind:value={changeSize.width} />\r\n\t\t\t\t\t<strong>x</strong>\r\n\t\t\t\t\tH\r\n\t\t\t\t\t<input type=\"number\" min={1} max={1000} bind:value={changeSize.height} />\r\n\t\t\t\t\t<button type=\"submit\" class=\"btn btn-info btn-sm\">Apply</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</QuickDropdown>\r\n\r\n\t\t<QuickDropdown label=\"Scale\" dropdownClass=\"p-2\">\r\n\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={scaleDown} title=\"Scale down\">\r\n\t\t\t\t<Icon data={minusIcon} />\r\n\t\t\t\tHalf size\r\n\t\t\t</button>\r\n\t\t\t<button type=\"button\" class=\"btn btn-light btn-sm\" on:click={scaleUp} title=\"Scale up\">\r\n\t\t\t\t<Icon data={plusIcon} />\r\n\t\t\t\tDouble size\r\n\t\t\t</button>\r\n\t\t</QuickDropdown>\r\n\r\n\t\t<InputSelect sm placeholder=\"Zoom\" bind:value={zoom} let:option options={[...Array(11)].map((_, i) => i + 10)}>\r\n\t\t\t<Icon data={zoomIcon} />\r\n\t\t\t{option.value}\r\n\t\t</InputSelect>\r\n\t\t<div>\r\n\t\t\t<label>\r\n\t\t\t\t<input type=\"checkbox\" bind:checked={showGrid} />\r\n\t\t\t\tShow grid\r\n\t\t\t</label>\r\n\t\t</div>\r\n\r\n\t\t<button type=\"button\" class=\"btn btn-light btn-sm mr1\" on:click={reset}>Start over</button>\r\n\r\n\t\t<InputSelect\r\n\t\t\tdisabled={$autoSaveStore[input.name] == null}\r\n\t\t\toptions={$autoSaveStore[input.name]}\r\n\t\t\tbind:value={selectedAutoSave}\r\n\t\t\ton:change={e => loadAutoSave(e.detail)}\r\n\t\t\tlet:option\r\n\t\t\tplaceholder=\"Auto-saves\"\r\n\t\t\tinline\r\n\t\t\tsm\r\n\t\t\tright>\r\n\t\t\t{option.name}\r\n\t\t\t<img src={option.png} height=\"40\" alt=\"\" />\r\n\t\t</InputSelect>\r\n\r\n\t</div>\r\n\t<div class=\"my-1\">\r\n\t\t<div class=\"flex\">\r\n\t\t\t<div>\r\n\t\t\t\t<label>\r\n\t\t\t\t\tAnimated\r\n\t\t\t\t\t<input type=\"checkbox\" bind:checked={input.animated} on:change={animatedChanged} />\r\n\t\t\t\t</label>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"preview flex\">\r\n\t\t\t{#if input.animated}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div class=\"flex\">\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<label for=\"frame-width\">Frame width</label>\r\n\t\t\t\t\t\t\t<input id=\"frame-width\" type=\"number\" bind:value={input.frameWidth} min={1} max={200} step={1} />\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<label for=\"frame-width\">Frame rate</label>\r\n\t\t\t\t\t\t\t<input id=\"frame-rate\" type=\"number\" bind:value={input.frameRate} min={1} max={60} step={1} />\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\tLoop back\r\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" bind:checked={input.yoyo} />\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div class=\"flex-column\">\r\n\t\t\t\t\t\t<AnimationPreview {...input} scale={artScale} width={pngCanvas.width} height={pngCanvas.height} />\r\n\t\t\t\t\t\t<div class=\"frame-editor\">\r\n\t\t\t\t\t\t\t<img src={input.png} width={pngCanvas.width * artScale} height={pngCanvas.height * artScale} alt=\"preview frame splits\" />\r\n\t\t\t\t\t\t\t{#each [...Array(numFrames)] as x, frameNumber}\r\n\t\t\t\t\t\t\t\t<div class=\"frame\" style=\"left: {frameNumber * input.frameWidth * artScale}px; width: {input.frameWidth * artScale}px;\">\r\n\t\t\t\t\t\t\t\t\t<a href=\"#/\" on:click|preventDefault={() => removeFrame(frameNumber)} class=\"text-danger\">\r\n\t\t\t\t\t\t\t\t\t\t<Icon data={deleteIcon} />\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t<a href=\"#/\" on:click|preventDefault={() => copyFrame(frameNumber)} class=\"text-info\">\r\n\t\t\t\t\t\t\t\t\t\t<Icon data={copyIcon} />\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t{:else}\r\n\t\t\t\t<img src={input.png} width={pngCanvas.width * artScale} height={pngCanvas.height * artScale} alt=\"\" />\r\n\t\t\t{/if}\r\n\r\n\t\t\t<!-- if block size, show repeated in x and y-->\r\n\t\t\t{#if isBlockSize}\r\n\t\t\t\t<div class=\"ml-2\">\r\n\t\t\t\t\t{#each [0, 0] as r}\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t{#each [0, 0, 0] as margin}\r\n\t\t\t\t\t\t\t\t<img src={input.png} alt=\"block repeating preview\" width={input.width * artScale} height={input.height * artScale} />\r\n\t\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t{/each}\r\n\t\t\t\t</div>\r\n\t\t\t{/if}\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<div class=\"canvas-container\">\r\n\t\t<canvas class=\"draw-canvas\" bind:this={drawCanvas} />\r\n\t\t<canvas\r\n\t\t\tclass=\"grid-canvas\"\r\n\t\t\tbind:this={gridCanvas}\r\n\t\t\tclass:paint-cursor={mode == 'paint'}\r\n\t\t\tclass:fill-cursor={mode == 'fill'}\r\n\t\t\tclass:erase-cursor={mode == 'erase'}\r\n\t\t\ton:mousedown|preventDefault={onDrawMouseDown}\r\n\t\t\ton:mouseup|preventDefault={onDrawMouseUp}\r\n\t\t\ton:mousemove|preventDefault={onDrawMouseMove}\r\n\t\t\ton:contextmenu|preventDefault />\r\n\t</div>\r\n\r\n</BuildLayout>\r\n\r\n<script>\r\n\timport {\r\n\t\tarrowLeft as arrowLeftIcon,\r\n\t\tarrowRight as arrowRightIcon,\r\n\t\tarrowUp as arrowUpIcon,\r\n\t\tarrowDown as arrowDownIcon,\r\n\t\tundo as undoIcon,\r\n\t\tpaintBrush as paintBrushIcon,\r\n\t\teraser as eraseIcon,\r\n\t\tremove as deleteIcon,\r\n\t\tcopy as copyIcon,\r\n\t\tsearchPlus as zoomIcon,\r\n\t\tminus as minusIcon,\r\n\t\tplus as plusIcon,\r\n\t} from 'svelte-awesome/icons'\r\n\timport { faFillDrip as fillIcon, faPaintBrush as paintIcon, faExchangeAlt as flipIcon } from '@fortawesome/free-solid-svg-icons'\r\n\timport { onMount } from 'svelte'\r\n\timport { push } from 'svelte-spa-router'\r\n\timport AnimationPreview from '../../components/AnimationPreview.svelte'\r\n\timport autoSaveStore from '../../stores/auto-save-store'\r\n\timport BuildLayout from '../../components/BuildLayout.svelte'\r\n\timport ColorPicker from '../../components/ColorPicker.svelte'\r\n\timport debounce from '../../services/debounce'\r\n\timport FieldNumber from '../../components/FieldNumber.svelte'\r\n\timport FieldText from '../../components/FieldText.svelte'\r\n\timport Form from '../../components/Form.svelte'\r\n\timport Icon from 'svelte-awesome'\r\n\timport InputSelect from '../../components/InputSelect.svelte'\r\n\timport makeThumbnail from '../../services/make-thumbnail'\r\n\timport project from '../../stores/active-project-store'\r\n\timport QuickDropdown from '../../components/QuickDropdown.svelte'\r\n\timport SaveBtn from '../../components/SaveBtn.svelte'\r\n\timport validator from '../../services/validator'\r\n\r\n\texport let params = {}\r\n\tlet input = createDefaultInput()\r\n\tlet mode = 'paint'\r\n\tlet undos = []\r\n\tlet redos = []\r\n\tlet mouseDown = false\r\n\tlet showGrid = true\r\n\tlet selectedColor = 'rgba(0, 0, 0, 255)'\r\n\tlet selectedAutoSave = null\r\n\r\n\t// we load the png into this canvas\r\n\t// and when user draws on the big canvas, we actually make the change on the scaled down canvas, and then re-render the larger canvas from this one\r\n\t// (if we make a change to the larger canvas, it gets blurry when scaling back down)\r\n\tconst pngCanvas = document.createElement('canvas')\r\n\tconst pngContext = pngCanvas.getContext('2d')\r\n\tconst artScale = 1\r\n\r\n\t// we render a scaled up version to this canvas for user to interact with\r\n\tlet drawCanvas\r\n\tlet drawContext\r\n\tlet zoom = 15\r\n\r\n\t// we render grid lines to this canvas\r\n\tlet gridCanvas\r\n\tlet gridContext\r\n\r\n\tlet changeSize = {\r\n\t\twidth: 0,\r\n\t\theight: 0,\r\n\t}\r\n\r\n\tconst debouncedRedraw = debounce(() => redraw(), 200)\r\n\t$: paramName = decodeURIComponent(params.name) || 'new'\r\n\t$: paramName == 'new' ? create() : edit(paramName)\r\n\t$: isAdding = paramName == 'new'\r\n\t$: inputWidth = input.width\r\n\t$: inputHeight = input.height\r\n\t$: hasChanges = !validator.equals(input, $project.art[input.name])\r\n\t$: numFrames = input.width != null && input.frameWidth != null ? Math.ceil(input.width / input.frameWidth) : 0\r\n\t$: if (inputWidth != 0 && inputHeight != 0 && showGrid != null && zoom != null) debouncedRedraw()\r\n\t$: isBlockSize = input.height == 40 && (input.width == 40 || (input.animated && input.frameWidth == 40))\r\n\r\n\tonMount(() => redraw())\r\n\r\n\tfunction create() {\r\n\t\tinput = createDefaultInput()\r\n\t\tredraw()\r\n\t}\r\n\r\n\tfunction createDefaultInput() {\r\n\t\treturn {\r\n\t\t\tname: '',\r\n\t\t\twidth: 40,\r\n\t\t\theight: 40,\r\n\t\t\tpng: null,\r\n\r\n\t\t\tanimated: false,\r\n\t\t\tframeWidth: 25,\r\n\t\t\tframeRate: 10,\r\n\t\t\tyoyo: false,\r\n\t\t}\r\n\t}\r\n\r\n\tfunction edit(name) {\r\n\t\tif (!$project.art.hasOwnProperty(name)) return\r\n\r\n\t\tundos = []\r\n\t\tredos = []\r\n\r\n\t\tinput = {\r\n\t\t\t...createDefaultInput(),\r\n\t\t\t...JSON.parse(JSON.stringify($project.art[name])),\r\n\t\t}\r\n\t\tredraw()\r\n\t}\r\n\r\n\tfunction loadAutoSave(saveData) {\r\n\t\tinput = JSON.parse(JSON.stringify(saveData))\r\n\t\tselectedAutoSave = null\r\n\t\tredraw()\r\n\t}\r\n\r\n\tfunction save() {\r\n\t\tif (validator.empty(input.name)) {\r\n\t\t\tdocument.getElementById('name').focus()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t$project.art[input.name] = JSON.parse(JSON.stringify(input))\r\n\t\tpush(`/${$project.name}/build/art/${encodeURIComponent(input.name)}`)\r\n\t}\r\n\r\n\tfunction del(name) {\r\n\t\tif (confirm(`Are you sure you want to delete \"${name}\"?`)) {\r\n\t\t\tdelete $project.art[name]\r\n\t\t\t$project.art = $project.art\r\n\t\t\tpush(`/${$project.name}/build/art/new`)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction reset(undoable = true) {\r\n\t\tif (undoable) addUndoState()\r\n\t\tinput.png = null\r\n\t\tredraw()\r\n\t}\r\n\r\n\tfunction onDrawMouseDown(e) {\r\n\t\tconst { x, y } = getScaledEventCoordinates(e)\r\n\t\tconst color = getColorAt(x, y)\r\n\t\tif (e.altKey || e.button !== 0) {\r\n\t\t\tif (color == 'transparent') {\r\n\t\t\t\tmode = 'erase'\r\n\t\t\t\tselectedColor = 'transparent'\r\n\t\t\t} else {\r\n\t\t\t\tmode = 'paint'\r\n\t\t\t\tselectedColor = color\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\taddUndoState()\r\n\t\t\tmouseDown = true\r\n\t\t\tonDrawMouseMove(e)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onDrawMouseUp(e) {\r\n\t\tmouseDown = false\r\n\t}\r\n\r\n\tfunction onDrawMouseMove(e) {\r\n\t\tif (!mouseDown) return\r\n\r\n\t\tconst { x, y } = getScaledEventCoordinates(e)\r\n\t\tif (y != null && x != null) {\r\n\t\t\tif (mode == 'erase') setColor(x, y, 'transparent')\r\n\t\t\telse setColor(x, y, selectedColor)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onKeyUp(e) {\r\n\t\tswitch (e.code) {\r\n\t\t\tcase 'KeyZ':\r\n\t\t\t\tif (e.ctrlKey) undo()\r\n\t\t\t\tbreak\r\n\t\t\tcase 'KeyY':\r\n\t\t\t\tif (e.ctrlKey) redo()\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onPaste(e) {\r\n\t\tconst items = (e.clipboardData || e.originalEvent.clipboardData).items\r\n\t\tfor (let index in items) {\r\n\t\t\tconst item = items[index]\r\n\t\t\tif (item.kind === 'file') {\r\n\t\t\t\tconst blob = item.getAsFile()\r\n\t\t\t\tconst reader = new FileReader()\r\n\t\t\t\treader.onload = function (event) {\r\n\t\t\t\t\tconst image = new Image()\r\n\t\t\t\t\timage.src = event.target.result\r\n\t\t\t\t\timage.onload = () => {\r\n\t\t\t\t\t\tinput.width = image.width\r\n\t\t\t\t\t\tinput.height = image.height\r\n\t\t\t\t\t\tinput.png = event.target.result\r\n\t\t\t\t\t\tredraw()\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// data url!\r\n\t\t\t\t// callback(blob)\r\n\t\t\t\treader.readAsDataURL(blob)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getColorAt(x, y) {\r\n\t\treturn toRGB(pngContext.getImageData(x, y, 1, 1).data)\r\n\t}\r\n\r\n\tfunction getScaledEventCoordinates(e) {\r\n\t\tconst x = e.offsetX + e.target.scrollLeft\r\n\t\tconst y = e.offsetY + e.target.scrollTop\r\n\t\t// debugger\r\n\t\treturn {\r\n\t\t\tx: Math.floor(x / zoom),\r\n\t\t\ty: Math.floor(y / zoom),\r\n\t\t}\r\n\t}\r\n\r\n\tfunction toRGB(d) {\r\n\t\treturn d[3] === 0 ? 'transparent' : `rgba(${d[0]}, ${d[1]}, ${d[2]}, ${d[3]})`\r\n\t}\r\n\r\n\tfunction addUndoState() {\r\n\t\tundos = [...undos.slice(Math.max(undos.length - 20, 0)), JSON.stringify(input)]\r\n\r\n\t\t// if we're adding a new undo state, empty redos\r\n\t\tredos = []\r\n\r\n\t\t// auto save\r\n\t\t// todo consider making undo/redo store local storaged?\r\n\t\t$autoSaveStore[input.name] = [JSON.parse(JSON.stringify(input)), ...($autoSaveStore[input.name] || []).slice(0, 10)]\r\n\t}\r\n\r\n\tfunction undo() {\r\n\t\tif (undos.length == 0) return\r\n\r\n\t\tredos = [...redos, JSON.stringify(input)]\r\n\t\tinput = {\r\n\t\t\t...input,\r\n\t\t\t...JSON.parse(undos.pop()),\r\n\t\t}\r\n\t\tundos = undos\r\n\t\tredraw()\r\n\t}\r\n\r\n\tfunction redo() {\r\n\t\tif (redos.length == 0) return\r\n\r\n\t\tundos = [...undos, JSON.stringify(input)]\r\n\t\tinput = {\r\n\t\t\t...input,\r\n\t\t\t...JSON.parse(redos.pop()),\r\n\t\t}\r\n\t\tredos = redos\r\n\t\tredraw()\r\n\t}\r\n\r\n\tfunction setColor(x, y, color, recursing = false) {\r\n\t\tconst oldColor = getColorAt(x, y)\r\n\t\tdrawSquare(pngContext, x, y, 1, color)\r\n\t\tdrawSquare(drawContext, x * zoom, y * zoom, zoom, color)\r\n\r\n\t\tif (mode == 'fill') {\r\n\t\t\t// recursively loop around this pixel setting pixels that were the same color this one used to be to the new color\r\n\t\t\t// needs revision\r\n\t\t\t// right now it works well for filling outlines, but overfills through outlines that only touch on corners\r\n\t\t\tfor (let xn = x - 1; xn <= x + 1; xn += 1) {\r\n\t\t\t\tfor (let yn = y - 1; yn <= y + 1; yn += 1) {\r\n\t\t\t\t\tif (yn < 0 || yn > input.height - 1 || xn < 0 || xn > input.width * 1 - 1) continue\r\n\t\t\t\t\tconst currentColor = getColorAt(xn, yn)\r\n\t\t\t\t\tif (currentColor == oldColor) setColor(xn, yn, color, true)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!recursing) setInputFromCanvas()\r\n\t}\r\n\r\n\tfunction drawSquare(context, x, y, size, color) {\r\n\t\tif (color == 'transparent') {\r\n\t\t\tcontext.clearRect(x, y, size, size)\r\n\t\t} else {\r\n\t\t\tcontext.beginPath()\r\n\t\t\tcontext.rect(x, y, size, size)\r\n\t\t\tcontext.fillStyle = color\r\n\t\t\tcontext.fill()\r\n\t\t}\r\n\t}\r\n\r\n\tfunction redraw() {\r\n\t\tif (drawCanvas == null || gridCanvas == null) return\r\n\t\tif (drawContext == null) drawContext = drawCanvas.getContext('2d')\r\n\t\tif (gridContext == null) gridContext = gridCanvas.getContext('2d')\r\n\r\n\t\t// put source png onto scale canvas\r\n\t\tcreateMemoryImage(input.png).then(image => {\r\n\t\t\t// draw png onto scale canvas\r\n\t\t\tlet scaleWidth = image.width\r\n\t\t\tlet scaleHeight = image.height\r\n\t\t\t// if png size is exactly double input size... we're just importing old data, scale it down\r\n\t\t\tlet wasOutOfScale = scaleWidth == input.width * 2 && scaleHeight == input.height * 2\r\n\t\t\tif (wasOutOfScale) {\r\n\t\t\t\t// should be fine...\r\n\t\t\t\t// use input size instead\r\n\t\t\t\tscaleWidth = image.width / 2\r\n\t\t\t\tscaleHeight = image.height / 2\r\n\t\t\t}\r\n\r\n\t\t\tpngCanvas.width = input.width\r\n\t\t\tpngCanvas.height = input.height\r\n\t\t\tpngContext.clearRect(0, 0, input.width, input.height)\r\n\r\n\t\t\tdrawCanvas.width = input.width * zoom\r\n\t\t\tdrawCanvas.height = input.height * zoom\r\n\t\t\tdrawContext.clearRect(0, 0, input.width * zoom, input.height * zoom)\r\n\r\n\t\t\tgridCanvas.width = input.width * zoom\r\n\t\t\tgridCanvas.height = input.height * zoom\r\n\t\t\tgridContext.clearRect(0, 0, input.width * zoom, input.height * zoom)\r\n\r\n\t\t\t// draw the png full size, even if it gets cut off\r\n\t\t\tif (input.png != null && image != null) {\r\n\t\t\t\tpngContext.drawImage(image, 0, 0, scaleWidth, scaleHeight)\r\n\r\n\t\t\t\t// draw image larger on big canvas\r\n\t\t\t\tdrawContext.save()\r\n\t\t\t\tdrawContext.scale(zoom, zoom)\r\n\t\t\t\tdrawContext.imageSmoothingEnabled = false\r\n\t\t\t\tdrawContext.drawImage(image, 0, 0)\r\n\t\t\t\tdrawContext.restore()\r\n\t\t\t}\r\n\t\t\tsetInputFromCanvas()\r\n\r\n\t\t\tif (showGrid) {\r\n\t\t\t\tgridContext.strokeStyle = 'rgba(255,255,255,1)'\r\n\t\t\t\tfor (let x = 1; x < input.width; x++) {\r\n\t\t\t\t\tgridContext.beginPath()\r\n\t\t\t\t\tgridContext.moveTo(x * zoom, 0)\r\n\t\t\t\t\tgridContext.lineTo(x * zoom, input.height * zoom)\r\n\t\t\t\t\tgridContext.stroke()\r\n\t\t\t\t}\r\n\t\t\t\tfor (let y = 1; y < input.height; y++) {\r\n\t\t\t\t\tgridContext.beginPath()\r\n\t\t\t\t\tgridContext.moveTo(0, y * zoom)\r\n\t\t\t\t\tgridContext.lineTo(input.width * zoom, y * zoom)\r\n\t\t\t\t\tgridContext.stroke()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tfunction flipY() {\r\n\t\tflip(false, true)\r\n\t}\r\n\r\n\tfunction flipX() {\r\n\t\tflip(true, false)\r\n\t}\r\n\r\n\tfunction moveLeft() {\r\n\t\tmove(-1, 0)\r\n\t}\r\n\r\n\tfunction moveRight() {\r\n\t\tmove(1, 0)\r\n\t}\r\n\r\n\tfunction moveUp() {\r\n\t\tmove(0, -1)\r\n\t}\r\n\r\n\tfunction moveDown() {\r\n\t\tmove(0, 1)\r\n\t}\r\n\r\n\tfunction rotateLeft() {\r\n\t\trotate(-90)\r\n\t}\r\n\r\n\tfunction rotateRight() {\r\n\t\trotate(90)\r\n\t}\r\n\r\n\tfunction move(dx, dy) {\r\n\t\taddUndoState()\r\n\t\tconst data = pngContext.getImageData(0, 0, input.width, input.height)\r\n\t\tpngContext.putImageData(data, dx, dy)\r\n\t\tif (dx != 0) pngContext.putImageData(data, dx - dx * input.width, 0)\r\n\t\telse if (dy != 0) pngContext.putImageData(data, 0, dy - dy * input.height)\r\n\t\tsetInputFromCanvas()\r\n\t\tredraw()\r\n\t}\r\n\r\n\tfunction flip(flipX, flipY) {\r\n\t\taddUndoState()\r\n\t\tsetInputFromCanvas()\r\n\t\tcreateMemoryImage(input.png).then(image => {\r\n\t\t\tpngContext.clearRect(0, 0, input.width, input.height)\r\n\t\t\tpngContext.scale(flipX ? -1 : 1, flipY ? -1 : 1)\r\n\t\t\tpngContext.drawImage(image, flipX ? input.width * -1 : 0, flipY ? input.height * -1 : 0, input.width, input.height)\r\n\t\t\tsetInputFromCanvas()\r\n\t\t\tredraw()\r\n\t\t})\r\n\t}\r\n\r\n\t// can't seem to get this to work\r\n\t// function rotate(deg) {\r\n\t// \taddUndoState()\r\n\t// \tsetInputFromCanvas()\r\n\t// \tcreateMemoryImage(input.png).then(image => {\r\n\t// \t})\r\n\t// }\r\n\r\n\tfunction setInputFromCanvas() {\r\n\t\tinput.png = pngCanvas.toDataURL('image/png')\r\n\t}\r\n\r\n\tfunction createMemoryImage(png) {\r\n\t\tif (png == null) return Promise.resolve({ width: input.width, height: input.height })\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst image = new Image()\r\n\t\t\timage.src = input.png\r\n\t\t\timage.onload = () => resolve(image)\r\n\t\t})\r\n\t}\r\n\r\n\tfunction removeFrame(frameIndex) {\r\n\t\taddUndoState()\r\n\t\tconst frameStartX = frameIndex * input.frameWidth\r\n\t\tconst framesAfterData = pngContext.getImageData(frameStartX + input.frameWidth, 0, input.width, input.height)\r\n\r\n\t\tpngContext.clearRect(frameStartX, 0, input.width, input.height)\r\n\t\tpngContext.width = input.width - input.frameWidth\r\n\t\tpngContext.putImageData(framesAfterData, frameStartX, 0)\r\n\r\n\t\tsetInputFromCanvas()\r\n\t\tredraw()\r\n\r\n\t\tinput.width -= input.frameWidth\r\n\t}\r\n\r\n\tfunction copyFrame(frameIndex) {\r\n\t\taddUndoState()\r\n\t\tconst frameStartX = frameIndex * input.frameWidth\r\n\t\tconst existingFramesData = pngContext.getImageData(0, 0, input.width, input.height)\r\n\t\tconst frameData = pngContext.getImageData(frameStartX, 0, input.frameWidth, input.height)\r\n\t\tpngCanvas.width = pngCanvas.width + input.frameWidth\r\n\t\t// changing width clears old content, so we have to re-draw old frames too\r\n\t\tpngContext.putImageData(existingFramesData, 0, 0)\r\n\t\tpngContext.putImageData(frameData, input.width, 0)\r\n\t\tsetInputFromCanvas()\r\n\t\tinput.width += input.frameWidth\r\n\t}\r\n\r\n\tfunction scaleUp() {\r\n\t\tscale(2)\r\n\t}\r\n\r\n\tfunction scaleDown() {\r\n\t\tscale(0.5)\r\n\t}\r\n\r\n\tfunction scale(s) {\r\n\t\taddUndoState()\r\n\t\tcreateMemoryImage(input.png).then(image => {\r\n\t\t\tpngCanvas.width = input.width * s\r\n\t\t\tpngCanvas.height = input.height * s\r\n\t\t\tpngContext.scale(s, s)\r\n\t\t\tpngContext.imageSmoothingEnabled = false\r\n\t\t\tpngContext.drawImage(image, 0, 0)\r\n\t\t\tpngContext.restore()\r\n\r\n\t\t\tsetInputFromCanvas()\r\n\t\t\tinput.width = Math.ceil(input.width * s)\r\n\t\t\tinput.height = Math.ceil(input.height * s)\r\n\t\t\tinput.frameWidth = Math.ceil(input.frameWidth * s)\r\n\t\t})\r\n\t}\r\n\r\n\t// set frame width to width if they're turning on animation for first time\r\n\tfunction animatedChanged() {\r\n\t\tif (input.animated) {\r\n\t\t\tinput.frameWidth = input.width\r\n\t\t}\r\n\t}\r\n\r\n\tfunction startChangeSize() {\r\n\t\tchangeSize.width = input.width\r\n\t\tchangeSize.height = input.height\r\n\t\tchangeSize.scale = 1\r\n\t}\r\n\r\n\tfunction applyChangeSize() {\r\n\t\tinput.width = changeSize.width\r\n\t\tinput.height = changeSize.height\r\n\t}\r\n</script>\r\n\r\n<style lang=\"scss\">.flex input[type='number'] {\n  width: 50px; }\n\n.flex label {\n  margin-bottom: 0; }\n\n.canvas-container {\n  position: relative;\n  margin: 15px 0;\n  max-width: 100%;\n  overflow: auto; }\n  .canvas-container .grid-canvas {\n    position: absolute;\n    left: 0;\n    top: 0; }\n  .canvas-container .draw-canvas {\n    background: repeating-linear-gradient(-45deg, transparent, #eee 10px);\n    -webkit-box-shadow: 0 1px 10px 4px rgba(0, 0, 0, 0.08);\n    -moz-box-shadow: 0 1px 10px 4px rgba(0, 0, 0, 0.08);\n    box-shadow: 0 1px 10px 4px rgba(0, 0, 0, 0.08); }\n\ncanvas:last-child {\n  display: block; }\n\n.preview {\n  margin-left: 10px; }\n\n.header-controls {\n  display: flex;\n  flex-direction: row; }\n\n.width-auto {\n  width: auto; }\n\n.flex > * {\n  margin-right: 5px; }\n\n.toolbar {\n  font-size: 14px;\n  margin-bottom: 5px; }\n  .toolbar > div {\n    margin-right: 5px; }\n\n.flex > div {\n  margin-right: 5px; }\n\n.paint-cursor {\n  cursor: url(/paint-icon.png) 0 20, url(/kid-projects/public/paint-icon.png) 0 20, auto; }\n\n.fill-cursor {\n  cursor: url(/fill-icon.png) 20 20, url(/kid-projects/public/fill-icon.png) 20 20, auto; }\n\n.erase-cursor {\n  cursor: url(/erase-icon.png) 0 20, url(/kid-projects/public/erase-icon.png) 0 20, auto; }\n\n.frame-editor {\n  position: relative;\n  padding-top: 25px;\n  padding-bottom: 25px; }\n  .frame-editor .frame {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    border-right: 1px solid #333;\n    text-align: center; }\n    .frame-editor .frame a {\n      position: absolute;\n      left: 2px; }\n      .frame-editor .frame a:first-child {\n        top: 0; }\n      .frame-editor .frame a:last-child {\n        bottom: 0; }\n</style>\r\n"
  ],
  "names": [],
  "mappings": "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"
}